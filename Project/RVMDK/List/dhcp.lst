L 1 "..\..\lwip\src\core\dhcp.c"
N/**
N * @file
N * Dynamic Host Configuration Protocol client
N *
N */
N
N/*
N *
N * Copyright (c) 2001-2004 Leon Woestenberg <leon.woestenberg@gmx.net>
N * Copyright (c) 2001-2004 Axon Digital Design B.V., The Netherlands.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
N * OF SUCH DAMAGE.
N *
N * This file is a contribution to the lwIP TCP/IP stack.
N * The Swedish Institute of Computer Science and Adam Dunkels
N * are specifically granted permission to redistribute this
N * source code.
N *
N * Author: Leon Woestenberg <leon.woestenberg@gmx.net>
N *
N * This is a DHCP client for the lwIP TCP/IP stack. It aims to conform
N * with RFC 2131 and RFC 2132.
N *
N * TODO:
N * - Support for interfaces other than Ethernet (SLIP, PPP, ...)
N *
N * Please coordinate changes and requests with Leon Woestenberg
N * <leon.woestenberg@gmx.net>
N *
N * Integration with your code:
N *
N * In lwip/dhcp.h
N * #define DHCP_COARSE_TIMER_SECS (recommended 60 which is a minute)
N * #define DHCP_FINE_TIMER_MSECS (recommended 500 which equals TCP coarse timer)
N *
N * Then have your application call dhcp_coarse_tmr() and
N * dhcp_fine_tmr() on the defined intervals.
N *
N * dhcp_start(struct netif *netif);
N * starts a DHCP client instance which configures the interface by
N * obtaining an IP address lease and maintaining it.
N *
N * Use dhcp_release(netif) to end the lease and use dhcp_stop(netif)
N * to remove the DHCP client.
N *
N */
N
N#include "lwip/opt.h"
L 1 "..\..\lwip\src\include\lwip/opt.h" 1
N/**
N * @file
N *
N * lwIP Options Configuration
N */
N
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_OPT_H__
N#define __LWIP_OPT_H__
N
N/*
N * Include user defined options first. Anything not defined in these files
N * will be set to standard values. Override anything you dont like!
N */
N#include "lwipopts.h"
L 1 "..\..\lwip\src\arch\lwipopts.h" 1
N/*
N;*****************************************************************************************************
N
N;*	      
N;*****************************************************************************************************
N;*/
N
N#ifndef __LWIPOPTS_H__
N#define __LWIPOPTS_H__
N
N
N/* 于app_cfg.h文件统一配置线程的优先级 */
N//#include "app_cfg.h"
N/* 临界区的保护 */
N	 
N/* 有系统 */  
N#define NO_SYS                       1
N//#define NO_SYS_NO_TIMERS             1
N
N#define LWIP_SOCKET  0
N#define LWIP_NETCONN 0
N/* 4字节对齐 */
N#define MEM_ALIGNMENT                4
N	
N/* 4K的内存 */  
N#define MEM_SIZE                     1024*40
N#define TCP_SND_BUF                  4000    //允许TCP协议使用的最大发送缓冲长度
N#define TCP_MSS                      1000
N
N/* */
N#define ETH_PAD_SIZE				 0 
N//#define ETHARP_DEBUG                LWIP_DBG_ON
N//#define ICMP_DEBUG                  LWIP_DBG_ON
N
N#define LWIP_HAVE_LOOPIF             1
N
N//#define MEM_DEBUG                       LWIP_DBG_ON
N//#define MEMP_DEBUG                      LWIP_DBG_ON
N//#define TCP_DEBUG					  LWIP_DBG_ON
N//#define UDP_DEBUG					  LWIP_DBG_ON
N//#define MEMP_MEM_MALLOC              1
N//#define MEM_USE_POOLS 0
N
N#endif /* __LWIPOPTS_H__ */
N
N/*
N;*****************************************************************************************************
N;*                            			End Of File
N;*****************************************************************************************************
N;*/
N
L 46 "..\..\lwip\src\include\lwip/opt.h" 2
N#include "lwip/debug.h"
L 1 "..\..\lwip\src\include\lwip/debug.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_DEBUG_H__
N#define __LWIP_DEBUG_H__
N
N#include "lwip/arch.h"
L 1 "..\..\lwip\src\include\lwip/arch.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_ARCH_H__
N#define __LWIP_ARCH_H__
N
N#ifndef LITTLE_ENDIAN
N#define LITTLE_ENDIAN 1234
N#endif
N
N#ifndef BIG_ENDIAN
N#define BIG_ENDIAN 4321
N#endif
N
N#include "arch/cc.h"
L 1 "..\..\lwip\src\arch/cc.h" 1
N/*
N * Copyright (c) 2001, Swedish Institute of Computer Science.
N * All rights reserved. 
N *
N * Redistribution and use in source and binary forms, with or without 
N * modification, are permitted provided that the following conditions 
N * are met: 
N * 1. Redistributions of source code must retain the above copyright 
N *    notice, this list of conditions and the following disclaimer. 
N * 2. Redistributions in binary form must reproduce the above copyright 
N *    notice, this list of conditions and the following disclaimer in the 
N *    documentation and/or other materials provided with the distribution. 
N * 3. Neither the name of the Institute nor the names of its contributors 
N *    may be used to endorse or promote products derived from this software 
N *    without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
N * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
N * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
N * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
N * SUCH DAMAGE. 
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N * $Id: cc.h,v 1.1.1.1 2003/05/17 05:06:56 chenyu Exp $
N */
N
N
N#ifndef __CC_H__
N#define __CC_H__
N
N#include "stdio.h"
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision: 192842 $
N * Checkin $Date: 2015-04-28 10:58:32 +0100 (Tue, 28 Apr 2015) $
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060002
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 41 "..\..\lwip\src\arch/cc.h" 2
N
Ntypedef unsigned char      u8_t;
Ntypedef signed char      s8_t;
Ntypedef unsigned short    u16_t;
Ntypedef signed   short    s16_t;
N
Ntypedef unsigned int    u32_t;
Ntypedef signed   int    s32_t;
Ntypedef unsigned int sys_prot_t;
Ntypedef unsigned int mem_ptr_t;
N
N#define PACK_STRUCT_FIELD(x) x
N#define PACK_STRUCT_STRUCT 
N#define PACK_STRUCT_BEGIN  __packed
N#define PACK_STRUCT_END
N
N#define LWIP_DEBUG
N#define LWIP_PLATFORM_DIAG(x) {printf x;}
N#define LWIP_PLATFORM_ASSERT(x) {printf(x);while(1);}
N
N#define LWIP_ERROR(message, expression, handler)  \
N	do { if (!(expression)) { \
N  			printf(message); handler;}} while(0)
X#define LWIP_ERROR(message, expression, handler)  	do { if (!(expression)) {   			printf(message); handler;}} while(0)
N
N//#define LWIP_NOASSERT
N//#define LWIP_ASSERT(x,y)
N
N#define U16_F "u"
N#define S16_F "d"
N#define X16_F "x"
N#define U32_F "u"
N#define S32_F "d"
N#define X32_F "x"
N
N//#define SZT_F 8f
N
N#define	LWIP_PROVIDE_ERRNO
N
N#define BYTE_ORDER LITTLE_ENDIAN
N
Nextern unsigned int sys_now(void);
N
N//* 临界代码保护宏
N//#define	SYS_ARCH_DECL_PROTECT(x)	    //u32_t cpu_sr
N//#define	SYS_ARCH_PROTECT(x)			    //cpu_sr = DisableInt()//OS_ENTER_CRITICAL()
N//#define	SYS_ARCH_UNPROTECT(x)		    //EnableInt(cpu_sr)     //OS_EXIT_CRITICAL()
N
N#endif /* __CC_H__ */
L 44 "..\..\lwip\src\include\lwip/arch.h" 2
N
N/** Temporary: define format string for size_t if not defined in cc.h */
N#ifndef SZT_F
N#define SZT_F U32_F
N#endif /* SZT_F */
N/** Temporary upgrade helper: define format string for u8_t as hex if not
N    defined in cc.h */
N#ifndef X8_F
N#define X8_F  "02x"
N#endif /* X8_F */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#ifndef PACK_STRUCT_BEGIN
S#define PACK_STRUCT_BEGIN
N#endif /* PACK_STRUCT_BEGIN */
N
N#ifndef PACK_STRUCT_END
S#define PACK_STRUCT_END
N#endif /* PACK_STRUCT_END */
N
N#ifndef PACK_STRUCT_FIELD
S#define PACK_STRUCT_FIELD(x) x
N#endif /* PACK_STRUCT_FIELD */
N
N
N#ifndef LWIP_UNUSED_ARG
N#define LWIP_UNUSED_ARG(x) (void)x
N#endif /* LWIP_UNUSED_ARG */ 
N
N
N#ifdef LWIP_PROVIDE_ERRNO
N
N#define  EPERM         1  /* Operation not permitted */
N#define  ENOENT        2  /* No such file or directory */
N#define  ESRCH         3  /* No such process */
N#define  EINTR         4  /* Interrupted system call */
N#define  EIO           5  /* I/O error */
N#define  ENXIO         6  /* No such device or address */
N#define  E2BIG         7  /* Arg list too long */
N#define  ENOEXEC       8  /* Exec format error */
N#define  EBADF         9  /* Bad file number */
N#define  ECHILD       10  /* No child processes */
N#define  EAGAIN       11  /* Try again */
N#define  ENOMEM       12  /* Out of memory */
N#define  EACCES       13  /* Permission denied */
N#define  EFAULT       14  /* Bad address */
N#define  ENOTBLK      15  /* Block device required */
N#define  EBUSY        16  /* Device or resource busy */
N#define  EEXIST       17  /* File exists */
N#define  EXDEV        18  /* Cross-device link */
N#define  ENODEV       19  /* No such device */
N#define  ENOTDIR      20  /* Not a directory */
N#define  EISDIR       21  /* Is a directory */
N#define  EINVAL       22  /* Invalid argument */
N#define  ENFILE       23  /* File table overflow */
N#define  EMFILE       24  /* Too many open files */
N#define  ENOTTY       25  /* Not a typewriter */
N#define  ETXTBSY      26  /* Text file busy */
N#define  EFBIG        27  /* File too large */
N#define  ENOSPC       28  /* No space left on device */
N#define  ESPIPE       29  /* Illegal seek */
N#define  EROFS        30  /* Read-only file system */
N#define  EMLINK       31  /* Too many links */
N#define  EPIPE        32  /* Broken pipe */
N#define  EDOM         33  /* Math argument out of domain of func */
N#define  ERANGE       34  /* Math result not representable */
N#define  EDEADLK      35  /* Resource deadlock would occur */
N#define  ENAMETOOLONG 36  /* File name too long */
N#define  ENOLCK       37  /* No record locks available */
N#define  ENOSYS       38  /* Function not implemented */
N#define  ENOTEMPTY    39  /* Directory not empty */
N#define  ELOOP        40  /* Too many symbolic links encountered */
N#define  EWOULDBLOCK  EAGAIN  /* Operation would block */
N#define  ENOMSG       42  /* No message of desired type */
N#define  EIDRM        43  /* Identifier removed */
N#define  ECHRNG       44  /* Channel number out of range */
N#define  EL2NSYNC     45  /* Level 2 not synchronized */
N#define  EL3HLT       46  /* Level 3 halted */
N#define  EL3RST       47  /* Level 3 reset */
N#define  ELNRNG       48  /* Link number out of range */
N#define  EUNATCH      49  /* Protocol driver not attached */
N#define  ENOCSI       50  /* No CSI structure available */
N#define  EL2HLT       51  /* Level 2 halted */
N#define  EBADE        52  /* Invalid exchange */
N#define  EBADR        53  /* Invalid request descriptor */
N#define  EXFULL       54  /* Exchange full */
N#define  ENOANO       55  /* No anode */
N#define  EBADRQC      56  /* Invalid request code */
N#define  EBADSLT      57  /* Invalid slot */
N
N#define  EDEADLOCK    EDEADLK
N
N#define  EBFONT       59  /* Bad font file format */
N#define  ENOSTR       60  /* Device not a stream */
N#define  ENODATA      61  /* No data available */
N#define  ETIME        62  /* Timer expired */
N#define  ENOSR        63  /* Out of streams resources */
N#define  ENONET       64  /* Machine is not on the network */
N#define  ENOPKG       65  /* Package not installed */
N#define  EREMOTE      66  /* Object is remote */
N#define  ENOLINK      67  /* Link has been severed */
N#define  EADV         68  /* Advertise error */
N#define  ESRMNT       69  /* Srmount error */
N#define  ECOMM        70  /* Communication error on send */
N#define  EPROTO       71  /* Protocol error */
N#define  EMULTIHOP    72  /* Multihop attempted */
N#define  EDOTDOT      73  /* RFS specific error */
N#define  EBADMSG      74  /* Not a data message */
N#define  EOVERFLOW    75  /* Value too large for defined data type */
N#define  ENOTUNIQ     76  /* Name not unique on network */
N#define  EBADFD       77  /* File descriptor in bad state */
N#define  EREMCHG      78  /* Remote address changed */
N#define  ELIBACC      79  /* Can not access a needed shared library */
N#define  ELIBBAD      80  /* Accessing a corrupted shared library */
N#define  ELIBSCN      81  /* .lib section in a.out corrupted */
N#define  ELIBMAX      82  /* Attempting to link in too many shared libraries */
N#define  ELIBEXEC     83  /* Cannot exec a shared library directly */
N#define  EILSEQ       84  /* Illegal byte sequence */
N#define  ERESTART     85  /* Interrupted system call should be restarted */
N#define  ESTRPIPE     86  /* Streams pipe error */
N#define  EUSERS       87  /* Too many users */
N#define  ENOTSOCK     88  /* Socket operation on non-socket */
N#define  EDESTADDRREQ 89  /* Destination address required */
N#define  EMSGSIZE     90  /* Message too long */
N#define  EPROTOTYPE   91  /* Protocol wrong type for socket */
N#define  ENOPROTOOPT  92  /* Protocol not available */
N#define  EPROTONOSUPPORT 93  /* Protocol not supported */
N#define  ESOCKTNOSUPPORT 94  /* Socket type not supported */
N#define  EOPNOTSUPP      95  /* Operation not supported on transport endpoint */
N#define  EPFNOSUPPORT    96  /* Protocol family not supported */
N#define  EAFNOSUPPORT    97  /* Address family not supported by protocol */
N#define  EADDRINUSE      98  /* Address already in use */
N#define  EADDRNOTAVAIL   99  /* Cannot assign requested address */
N#define  ENETDOWN       100  /* Network is down */
N#define  ENETUNREACH    101  /* Network is unreachable */
N#define  ENETRESET      102  /* Network dropped connection because of reset */
N#define  ECONNABORTED   103  /* Software caused connection abort */
N#define  ECONNRESET     104  /* Connection reset by peer */
N#define  ENOBUFS        105  /* No buffer space available */
N#define  EISCONN        106  /* Transport endpoint is already connected */
N#define  ENOTCONN       107  /* Transport endpoint is not connected */
N#define  ESHUTDOWN      108  /* Cannot send after transport endpoint shutdown */
N#define  ETOOMANYREFS   109  /* Too many references: cannot splice */
N#define  ETIMEDOUT      110  /* Connection timed out */
N#define  ECONNREFUSED   111  /* Connection refused */
N#define  EHOSTDOWN      112  /* Host is down */
N#define  EHOSTUNREACH   113  /* No route to host */
N#define  EALREADY       114  /* Operation already in progress */
N#define  EINPROGRESS    115  /* Operation now in progress */
N#define  ESTALE         116  /* Stale NFS file handle */
N#define  EUCLEAN        117  /* Structure needs cleaning */
N#define  ENOTNAM        118  /* Not a XENIX named type file */
N#define  ENAVAIL        119  /* No XENIX semaphores available */
N#define  EISNAM         120  /* Is a named type file */
N#define  EREMOTEIO      121  /* Remote I/O error */
N#define  EDQUOT         122  /* Quota exceeded */
N
N#define  ENOMEDIUM      123  /* No medium found */
N#define  EMEDIUMTYPE    124  /* Wrong medium type */
N
N#ifndef errno
Nextern int errno;
N#endif
N
N#endif /* LWIP_PROVIDE_ERRNO */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_ARCH_H__ */
L 36 "..\..\lwip\src\include\lwip/debug.h" 2
N#include "lwip/opt.h"
L 1 "..\..\lwip\src\include\lwip/opt.h" 1
N/**
N * @file
N *
N * lwIP Options Configuration
N */
N
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_OPT_H__
S#define __LWIP_OPT_H__
S
S/*
S * Include user defined options first. Anything not defined in these files
S * will be set to standard values. Override anything you dont like!
S */
S#include "lwipopts.h"
S#include "lwip/debug.h"
S
S/*
S   -----------------------------------------------
S   ---------- Platform specific locking ----------
S   -----------------------------------------------
S*/
S
S/**
S * SYS_LIGHTWEIGHT_PROT==1: if you want inter-task protection for certain
S * critical regions during buffer allocation, deallocation and memory
S * allocation and deallocation.
S */
S#ifndef SYS_LIGHTWEIGHT_PROT
S#define SYS_LIGHTWEIGHT_PROT            0
S#endif
S
S/** 
S * NO_SYS==1: Provides VERY minimal functionality. Otherwise,
S * use lwIP facilities.
S */
S#ifndef NO_SYS
S#define NO_SYS                          0
S#endif
S
S/**
S * NO_SYS_NO_TIMERS==1: Drop support for sys_timeout when NO_SYS==1
S * Mainly for compatibility to old versions.
S */
S#ifndef NO_SYS_NO_TIMERS
S#define NO_SYS_NO_TIMERS                0
S#endif
S
S/**
S * MEMCPY: override this if you have a faster implementation at hand than the
S * one included in your C library
S */
S#ifndef MEMCPY
S#define MEMCPY(dst,src,len)             memcpy(dst,src,len)
S#endif
S
S/**
S * SMEMCPY: override this with care! Some compilers (e.g. gcc) can inline a
S * call to memcpy() if the length is known at compile time and is small.
S */
S#ifndef SMEMCPY
S#define SMEMCPY(dst,src,len)            memcpy(dst,src,len)
S#endif
S
S/*
S   ------------------------------------
S   ---------- Memory options ----------
S   ------------------------------------
S*/
S/**
S * MEM_LIBC_MALLOC==1: Use malloc/free/realloc provided by your C-library
S * instead of the lwip internal allocator. Can save code size if you
S * already use it.
S */
S#ifndef MEM_LIBC_MALLOC
S#define MEM_LIBC_MALLOC                 0
S#endif
S
S/**
S* MEMP_MEM_MALLOC==1: Use mem_malloc/mem_free instead of the lwip pool allocator.
S* Especially useful with MEM_LIBC_MALLOC but handle with care regarding execution
S* speed and usage from interrupts!
S*/
S#ifndef MEMP_MEM_MALLOC
S#define MEMP_MEM_MALLOC                 0
S#endif
S
S/**
S * MEM_ALIGNMENT: should be set to the alignment of the CPU
S *    4 byte alignment -> #define MEM_ALIGNMENT 4
S *    2 byte alignment -> #define MEM_ALIGNMENT 2
S */
S#ifndef MEM_ALIGNMENT
S#define MEM_ALIGNMENT                   1
S#endif
S
S/**
S * MEM_SIZE: the size of the heap memory. If the application will send
S * a lot of data that needs to be copied, this should be set high.
S */
S#ifndef MEM_SIZE
S#define MEM_SIZE                        1600
S#endif
S
S/**
S * MEMP_SEPARATE_POOLS: if defined to 1, each pool is placed in its own array.
S * This can be used to individually change the location of each pool.
S * Default is one big array for all pools
S */
S#ifndef MEMP_SEPARATE_POOLS
S#define MEMP_SEPARATE_POOLS             0
S#endif
S
S/**
S * MEMP_OVERFLOW_CHECK: memp overflow protection reserves a configurable
S * amount of bytes before and after each memp element in every pool and fills
S * it with a prominent default value.
S *    MEMP_OVERFLOW_CHECK == 0 no checking
S *    MEMP_OVERFLOW_CHECK == 1 checks each element when it is freed
S *    MEMP_OVERFLOW_CHECK >= 2 checks each element in every pool every time
S *      memp_malloc() or memp_free() is called (useful but slow!)
S */
S#ifndef MEMP_OVERFLOW_CHECK
S#define MEMP_OVERFLOW_CHECK             0
S#endif
S
S/**
S * MEMP_SANITY_CHECK==1: run a sanity check after each memp_free() to make
S * sure that there are no cycles in the linked lists.
S */
S#ifndef MEMP_SANITY_CHECK
S#define MEMP_SANITY_CHECK               0
S#endif
S
S/**
S * MEM_USE_POOLS==1: Use an alternative to malloc() by allocating from a set
S * of memory pools of various sizes. When mem_malloc is called, an element of
S * the smallest pool that can provide the length needed is returned.
S * To use this, MEMP_USE_CUSTOM_POOLS also has to be enabled.
S */
S#ifndef MEM_USE_POOLS
S#define MEM_USE_POOLS                   0
S#endif
S
S/**
S * MEM_USE_POOLS_TRY_BIGGER_POOL==1: if one malloc-pool is empty, try the next
S * bigger pool - WARNING: THIS MIGHT WASTE MEMORY but it can make a system more
S * reliable. */
S#ifndef MEM_USE_POOLS_TRY_BIGGER_POOL
S#define MEM_USE_POOLS_TRY_BIGGER_POOL   0
S#endif
S
S/**
S * MEMP_USE_CUSTOM_POOLS==1: whether to include a user file lwippools.h
S * that defines additional pools beyond the "standard" ones required
S * by lwIP. If you set this to 1, you must have lwippools.h in your 
S * inlude path somewhere. 
S */
S#ifndef MEMP_USE_CUSTOM_POOLS
S#define MEMP_USE_CUSTOM_POOLS           0
S#endif
S
S/**
S * Set this to 1 if you want to free PBUF_RAM pbufs (or call mem_free()) from
S * interrupt context (or another context that doesn't allow waiting for a
S * semaphore).
S * If set to 1, mem_malloc will be protected by a semaphore and SYS_ARCH_PROTECT,
S * while mem_free will only use SYS_ARCH_PROTECT. mem_malloc SYS_ARCH_UNPROTECTs
S * with each loop so that mem_free can run.
S *
S * ATTENTION: As you can see from the above description, this leads to dis-/
S * enabling interrupts often, which can be slow! Also, on low memory, mem_malloc
S * can need longer.
S *
S * If you don't want that, at least for NO_SYS=0, you can still use the following
S * functions to enqueue a deallocation call which then runs in the tcpip_thread
S * context:
S * - pbuf_free_callback(p);
S * - mem_free_callback(m);
S */
S#ifndef LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
S#define LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT 0
S#endif
S
S/*
S   ------------------------------------------------
S   ---------- Internal Memory Pool Sizes ----------
S   ------------------------------------------------
S*/
S/**
S * MEMP_NUM_PBUF: the number of memp struct pbufs (used for PBUF_ROM and PBUF_REF).
S * If the application sends a lot of data out of ROM (or other static memory),
S * this should be set high.
S */
S#ifndef MEMP_NUM_PBUF
S#define MEMP_NUM_PBUF                   16
S#endif
S
S/**
S * MEMP_NUM_RAW_PCB: Number of raw connection PCBs
S * (requires the LWIP_RAW option)
S */
S#ifndef MEMP_NUM_RAW_PCB
S#define MEMP_NUM_RAW_PCB                4
S#endif
S
S/**
S * MEMP_NUM_UDP_PCB: the number of UDP protocol control blocks. One
S * per active UDP "connection".
S * (requires the LWIP_UDP option)
S */
S#ifndef MEMP_NUM_UDP_PCB
S#define MEMP_NUM_UDP_PCB                4
S#endif
S
S/**
S * MEMP_NUM_TCP_PCB: the number of simulatenously active TCP connections.
S * (requires the LWIP_TCP option)
S */
S#ifndef MEMP_NUM_TCP_PCB
S#define MEMP_NUM_TCP_PCB                5
S#endif
S
S/**
S * MEMP_NUM_TCP_PCB_LISTEN: the number of listening TCP connections.
S * (requires the LWIP_TCP option)
S */
S#ifndef MEMP_NUM_TCP_PCB_LISTEN
S#define MEMP_NUM_TCP_PCB_LISTEN         8
S#endif
S
S/**
S * MEMP_NUM_TCP_SEG: the number of simultaneously queued TCP segments.
S * (requires the LWIP_TCP option)
S */
S#ifndef MEMP_NUM_TCP_SEG
S#define MEMP_NUM_TCP_SEG                16
S#endif
S
S/**
S * MEMP_NUM_REASSDATA: the number of IP packets simultaneously queued for
S * reassembly (whole packets, not fragments!)
S */
S#ifndef MEMP_NUM_REASSDATA
S#define MEMP_NUM_REASSDATA              5
S#endif
S
S/**
S * MEMP_NUM_FRAG_PBUF: the number of IP fragments simultaneously sent
S * (fragments, not whole packets!).
S * This is only used with IP_FRAG_USES_STATIC_BUF==0 and
S * LWIP_NETIF_TX_SINGLE_PBUF==0 and only has to be > 1 with DMA-enabled MACs
S * where the packet is not yet sent when netif->output returns.
S */
S#ifndef MEMP_NUM_FRAG_PBUF
S#define MEMP_NUM_FRAG_PBUF              15
S#endif
S
S/**
S * MEMP_NUM_ARP_QUEUE: the number of simulateously queued outgoing
S * packets (pbufs) that are waiting for an ARP request (to resolve
S * their destination address) to finish.
S * (requires the ARP_QUEUEING option)
S */
S#ifndef MEMP_NUM_ARP_QUEUE
S#define MEMP_NUM_ARP_QUEUE              30
S#endif
S
S/**
S * MEMP_NUM_IGMP_GROUP: The number of multicast groups whose network interfaces
S * can be members et the same time (one per netif - allsystems group -, plus one
S * per netif membership).
S * (requires the LWIP_IGMP option)
S */
S#ifndef MEMP_NUM_IGMP_GROUP
S#define MEMP_NUM_IGMP_GROUP             8
S#endif
S
S/**
S * MEMP_NUM_SYS_TIMEOUT: the number of simulateously active timeouts.
S * (requires NO_SYS==0)
S * The default number of timeouts is calculated here for all enabled modules.
S * The formula expects settings to be either '0' or '1'.
S */
S#ifndef MEMP_NUM_SYS_TIMEOUT
S#define MEMP_NUM_SYS_TIMEOUT            (LWIP_TCP + IP_REASSEMBLY + LWIP_ARP + (2*LWIP_DHCP) + LWIP_AUTOIP + LWIP_IGMP + LWIP_DNS + PPP_SUPPORT)
S#endif
S
S/**
S * MEMP_NUM_NETBUF: the number of struct netbufs.
S * (only needed if you use the sequential API, like api_lib.c)
S */
S#ifndef MEMP_NUM_NETBUF
S#define MEMP_NUM_NETBUF                 2
S#endif
S
S/**
S * MEMP_NUM_NETCONN: the number of struct netconns.
S * (only needed if you use the sequential API, like api_lib.c)
S */
S#ifndef MEMP_NUM_NETCONN
S#define MEMP_NUM_NETCONN                4
S#endif
S
S/**
S * MEMP_NUM_TCPIP_MSG_API: the number of struct tcpip_msg, which are used
S * for callback/timeout API communication. 
S * (only needed if you use tcpip.c)
S */
S#ifndef MEMP_NUM_TCPIP_MSG_API
S#define MEMP_NUM_TCPIP_MSG_API          8
S#endif
S
S/**
S * MEMP_NUM_TCPIP_MSG_INPKT: the number of struct tcpip_msg, which are used
S * for incoming packets. 
S * (only needed if you use tcpip.c)
S */
S#ifndef MEMP_NUM_TCPIP_MSG_INPKT
S#define MEMP_NUM_TCPIP_MSG_INPKT        8
S#endif
S
S/**
S * MEMP_NUM_SNMP_NODE: the number of leafs in the SNMP tree.
S */
S#ifndef MEMP_NUM_SNMP_NODE
S#define MEMP_NUM_SNMP_NODE              50
S#endif
S
S/**
S * MEMP_NUM_SNMP_ROOTNODE: the number of branches in the SNMP tree.
S * Every branch has one leaf (MEMP_NUM_SNMP_NODE) at least!
S */
S#ifndef MEMP_NUM_SNMP_ROOTNODE
S#define MEMP_NUM_SNMP_ROOTNODE          30
S#endif
S
S/**
S * MEMP_NUM_SNMP_VARBIND: the number of concurrent requests (does not have to
S * be changed normally) - 2 of these are used per request (1 for input,
S * 1 for output)
S */
S#ifndef MEMP_NUM_SNMP_VARBIND
S#define MEMP_NUM_SNMP_VARBIND           2
S#endif
S
S/**
S * MEMP_NUM_SNMP_VALUE: the number of OID or values concurrently used
S * (does not have to be changed normally) - 3 of these are used per request
S * (1 for the value read and 2 for OIDs - input and output)
S */
S#ifndef MEMP_NUM_SNMP_VALUE
S#define MEMP_NUM_SNMP_VALUE             3
S#endif
S
S/**
S * MEMP_NUM_NETDB: the number of concurrently running lwip_addrinfo() calls
S * (before freeing the corresponding memory using lwip_freeaddrinfo()).
S */
S#ifndef MEMP_NUM_NETDB
S#define MEMP_NUM_NETDB                  1
S#endif
S
S/**
S * MEMP_NUM_LOCALHOSTLIST: the number of host entries in the local host list
S * if DNS_LOCAL_HOSTLIST_IS_DYNAMIC==1.
S */
S#ifndef MEMP_NUM_LOCALHOSTLIST
S#define MEMP_NUM_LOCALHOSTLIST          1
S#endif
S
S/**
S * MEMP_NUM_PPPOE_INTERFACES: the number of concurrently active PPPoE
S * interfaces (only used with PPPOE_SUPPORT==1)
S */
S#ifndef MEMP_NUM_PPPOE_INTERFACES
S#define MEMP_NUM_PPPOE_INTERFACES       1
S#endif
S
S/**
S * PBUF_POOL_SIZE: the number of buffers in the pbuf pool. 
S */
S#ifndef PBUF_POOL_SIZE
S#define PBUF_POOL_SIZE                  16
S#endif
S
S/*
S   ---------------------------------
S   ---------- ARP options ----------
S   ---------------------------------
S*/
S/**
S * LWIP_ARP==1: Enable ARP functionality.
S */
S#ifndef LWIP_ARP
S#define LWIP_ARP                        1
S#endif
S
S/**
S * ARP_TABLE_SIZE: Number of active MAC-IP address pairs cached.
S */
S#ifndef ARP_TABLE_SIZE
S#define ARP_TABLE_SIZE                  10
S#endif
S
S/**
S * ARP_QUEUEING==1: Multiple outgoing packets are queued during hardware address
S * resolution. By default, only the most recent packet is queued per IP address.
S * This is sufficient for most protocols and mainly reduces TCP connection
S * startup time. Set this to 1 if you know your application sends more than one
S * packet in a row to an IP address that is not in the ARP cache.
S */
S#ifndef ARP_QUEUEING
S#define ARP_QUEUEING                    0
S#endif
S
S/**
S * ETHARP_TRUST_IP_MAC==1: Incoming IP packets cause the ARP table to be
S * updated with the source MAC and IP addresses supplied in the packet.
S * You may want to disable this if you do not trust LAN peers to have the
S * correct addresses, or as a limited approach to attempt to handle
S * spoofing. If disabled, lwIP will need to make a new ARP request if
S * the peer is not already in the ARP table, adding a little latency.
S * The peer *is* in the ARP table if it requested our address before.
S * Also notice that this slows down input processing of every IP packet!
S */
S#ifndef ETHARP_TRUST_IP_MAC
S#define ETHARP_TRUST_IP_MAC             0
S#endif
S
S/**
S * ETHARP_SUPPORT_VLAN==1: support receiving ethernet packets with VLAN header.
S * Additionally, you can define ETHARP_VLAN_CHECK to an u16_t VLAN ID to check.
S * If ETHARP_VLAN_CHECK is defined, only VLAN-traffic for this VLAN is accepted.
S * If ETHARP_VLAN_CHECK is not defined, all traffic is accepted.
S * Alternatively, define a function/define ETHARP_VLAN_CHECK_FN(eth_hdr, vlan)
S * that returns 1 to accept a packet or 0 to drop a packet.
S */
S#ifndef ETHARP_SUPPORT_VLAN
S#define ETHARP_SUPPORT_VLAN             0
S#endif
S
S/** LWIP_ETHERNET==1: enable ethernet support for PPPoE even though ARP
S * might be disabled
S */
S#ifndef LWIP_ETHERNET
S#define LWIP_ETHERNET                   (LWIP_ARP || PPPOE_SUPPORT)
S#endif
S
S/** ETH_PAD_SIZE: number of bytes added before the ethernet header to ensure
S * alignment of payload after that header. Since the header is 14 bytes long,
S * without this padding e.g. addresses in the IP header will not be aligned
S * on a 32-bit boundary, so setting this to 2 can speed up 32-bit-platforms.
S */
S#ifndef ETH_PAD_SIZE
S#define ETH_PAD_SIZE                    0
S#endif
S
S/** ETHARP_SUPPORT_STATIC_ENTRIES==1: enable code to support static ARP table
S * entries (using etharp_add_static_entry/etharp_remove_static_entry).
S */
S#ifndef ETHARP_SUPPORT_STATIC_ENTRIES
S#define ETHARP_SUPPORT_STATIC_ENTRIES   0
S#endif
S
S
S/*
S   --------------------------------
S   ---------- IP options ----------
S   --------------------------------
S*/
S/**
S * IP_FORWARD==1: Enables the ability to forward IP packets across network
S * interfaces. If you are going to run lwIP on a device with only one network
S * interface, define this to 0.
S */
S#ifndef IP_FORWARD
S#define IP_FORWARD                      0
S#endif
S
S/**
S * IP_OPTIONS_ALLOWED: Defines the behavior for IP options.
S *      IP_OPTIONS_ALLOWED==0: All packets with IP options are dropped.
S *      IP_OPTIONS_ALLOWED==1: IP options are allowed (but not parsed).
S */
S#ifndef IP_OPTIONS_ALLOWED
S#define IP_OPTIONS_ALLOWED              1
S#endif
S
S/**
S * IP_REASSEMBLY==1: Reassemble incoming fragmented IP packets. Note that
S * this option does not affect outgoing packet sizes, which can be controlled
S * via IP_FRAG.
S */
S#ifndef IP_REASSEMBLY
S#define IP_REASSEMBLY                   1
S#endif
S
S/**
S * IP_FRAG==1: Fragment outgoing IP packets if their size exceeds MTU. Note
S * that this option does not affect incoming packet sizes, which can be
S * controlled via IP_REASSEMBLY.
S */
S#ifndef IP_FRAG
S#define IP_FRAG                         1
S#endif
S
S/**
S * IP_REASS_MAXAGE: Maximum time (in multiples of IP_TMR_INTERVAL - so seconds, normally)
S * a fragmented IP packet waits for all fragments to arrive. If not all fragments arrived
S * in this time, the whole packet is discarded.
S */
S#ifndef IP_REASS_MAXAGE
S#define IP_REASS_MAXAGE                 3
S#endif
S
S/**
S * IP_REASS_MAX_PBUFS: Total maximum amount of pbufs waiting to be reassembled.
S * Since the received pbufs are enqueued, be sure to configure
S * PBUF_POOL_SIZE > IP_REASS_MAX_PBUFS so that the stack is still able to receive
S * packets even if the maximum amount of fragments is enqueued for reassembly!
S */
S#ifndef IP_REASS_MAX_PBUFS
S#define IP_REASS_MAX_PBUFS              10
S#endif
S
S/**
S * IP_FRAG_USES_STATIC_BUF==1: Use a static MTU-sized buffer for IP
S * fragmentation. Otherwise pbufs are allocated and reference the original
S * packet data to be fragmented (or with LWIP_NETIF_TX_SINGLE_PBUF==1,
S * new PBUF_RAM pbufs are used for fragments).
S * ATTENTION: IP_FRAG_USES_STATIC_BUF==1 may not be used for DMA-enabled MACs!
S */
S#ifndef IP_FRAG_USES_STATIC_BUF
S#define IP_FRAG_USES_STATIC_BUF         0
S#endif
S
S/**
S * IP_FRAG_MAX_MTU: Assumed max MTU on any interface for IP frag buffer
S * (requires IP_FRAG_USES_STATIC_BUF==1)
S */
S#if IP_FRAG_USES_STATIC_BUF && !defined(IP_FRAG_MAX_MTU)
S#define IP_FRAG_MAX_MTU                 1500
S#endif
S
S/**
S * IP_DEFAULT_TTL: Default value for Time-To-Live used by transport layers.
S */
S#ifndef IP_DEFAULT_TTL
S#define IP_DEFAULT_TTL                  255
S#endif
S
S/**
S * IP_SOF_BROADCAST=1: Use the SOF_BROADCAST field to enable broadcast
S * filter per pcb on udp and raw send operations. To enable broadcast filter
S * on recv operations, you also have to set IP_SOF_BROADCAST_RECV=1.
S */
S#ifndef IP_SOF_BROADCAST
S#define IP_SOF_BROADCAST                0
S#endif
S
S/**
S * IP_SOF_BROADCAST_RECV (requires IP_SOF_BROADCAST=1) enable the broadcast
S * filter on recv operations.
S */
S#ifndef IP_SOF_BROADCAST_RECV
S#define IP_SOF_BROADCAST_RECV           0
S#endif
S
S/**
S * IP_FORWARD_ALLOW_TX_ON_RX_NETIF==1: allow ip_forward() to send packets back
S * out on the netif where it was received. This should only be used for
S * wireless networks.
S * ATTENTION: When this is 1, make sure your netif driver correctly marks incoming
S * link-layer-broadcast/multicast packets as such using the corresponding pbuf flags!
S */
S#ifndef IP_FORWARD_ALLOW_TX_ON_RX_NETIF
S#define IP_FORWARD_ALLOW_TX_ON_RX_NETIF 0
S#endif
S
S/**
S * LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS==1: randomize the local port for the first
S * local TCP/UDP pcb (default==0). This can prevent creating predictable port
S * numbers after booting a device.
S */
S#ifndef LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS
S#define LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 0
S#endif
S
S/*
S   ----------------------------------
S   ---------- ICMP options ----------
S   ----------------------------------
S*/
S/**
S * LWIP_ICMP==1: Enable ICMP module inside the IP stack.
S * Be careful, disable that make your product non-compliant to RFC1122
S */
S#ifndef LWIP_ICMP
S#define LWIP_ICMP                       1
S#endif
S
S/**
S * ICMP_TTL: Default value for Time-To-Live used by ICMP packets.
S */
S#ifndef ICMP_TTL
S#define ICMP_TTL                       (IP_DEFAULT_TTL)
S#endif
S
S/**
S * LWIP_BROADCAST_PING==1: respond to broadcast pings (default is unicast only)
S */
S#ifndef LWIP_BROADCAST_PING
S#define LWIP_BROADCAST_PING             0
S#endif
S
S/**
S * LWIP_MULTICAST_PING==1: respond to multicast pings (default is unicast only)
S */
S#ifndef LWIP_MULTICAST_PING
S#define LWIP_MULTICAST_PING             0
S#endif
S
S/*
S   ---------------------------------
S   ---------- RAW options ----------
S   ---------------------------------
S*/
S/**
S * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
S */
S#ifndef LWIP_RAW
S#define LWIP_RAW                        1
S#endif
S
S/**
S * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
S */
S#ifndef RAW_TTL
S#define RAW_TTL                        (IP_DEFAULT_TTL)
S#endif
S
S/*
S   ----------------------------------
S   ---------- DHCP options ----------
S   ----------------------------------
S*/
S/**
S * LWIP_DHCP==1: Enable DHCP module.
S */
S#ifndef LWIP_DHCP
S#define LWIP_DHCP                       0
S#endif
S
S/**
S * DHCP_DOES_ARP_CHECK==1: Do an ARP check on the offered address.
S */
S#ifndef DHCP_DOES_ARP_CHECK
S#define DHCP_DOES_ARP_CHECK             ((LWIP_DHCP) && (LWIP_ARP))
S#endif
S
S/*
S   ------------------------------------
S   ---------- AUTOIP options ----------
S   ------------------------------------
S*/
S/**
S * LWIP_AUTOIP==1: Enable AUTOIP module.
S */
S#ifndef LWIP_AUTOIP
S#define LWIP_AUTOIP                     0
S#endif
S
S/**
S * LWIP_DHCP_AUTOIP_COOP==1: Allow DHCP and AUTOIP to be both enabled on
S * the same interface at the same time.
S */
S#ifndef LWIP_DHCP_AUTOIP_COOP
S#define LWIP_DHCP_AUTOIP_COOP           0
S#endif
S
S/**
S * LWIP_DHCP_AUTOIP_COOP_TRIES: Set to the number of DHCP DISCOVER probes
S * that should be sent before falling back on AUTOIP. This can be set
S * as low as 1 to get an AutoIP address very quickly, but you should
S * be prepared to handle a changing IP address when DHCP overrides
S * AutoIP.
S */
S#ifndef LWIP_DHCP_AUTOIP_COOP_TRIES
S#define LWIP_DHCP_AUTOIP_COOP_TRIES     9
S#endif
S
S/*
S   ----------------------------------
S   ---------- SNMP options ----------
S   ----------------------------------
S*/
S/**
S * LWIP_SNMP==1: Turn on SNMP module. UDP must be available for SNMP
S * transport.
S */
S#ifndef LWIP_SNMP
S#define LWIP_SNMP                       0
S#endif
S
S/**
S * SNMP_CONCURRENT_REQUESTS: Number of concurrent requests the module will
S * allow. At least one request buffer is required.
S * Does not have to be changed unless external MIBs answer request asynchronously
S */
S#ifndef SNMP_CONCURRENT_REQUESTS
S#define SNMP_CONCURRENT_REQUESTS        1
S#endif
S
S/**
S * SNMP_TRAP_DESTINATIONS: Number of trap destinations. At least one trap
S * destination is required
S */
S#ifndef SNMP_TRAP_DESTINATIONS
S#define SNMP_TRAP_DESTINATIONS          1
S#endif
S
S/**
S * SNMP_PRIVATE_MIB: 
S * When using a private MIB, you have to create a file 'private_mib.h' that contains
S * a 'struct mib_array_node mib_private' which contains your MIB.
S */
S#ifndef SNMP_PRIVATE_MIB
S#define SNMP_PRIVATE_MIB                0
S#endif
S
S/**
S * Only allow SNMP write actions that are 'safe' (e.g. disabeling netifs is not
S * a safe action and disabled when SNMP_SAFE_REQUESTS = 1).
S * Unsafe requests are disabled by default!
S */
S#ifndef SNMP_SAFE_REQUESTS
S#define SNMP_SAFE_REQUESTS              1
S#endif
S
S/**
S * The maximum length of strings used. This affects the size of
S * MEMP_SNMP_VALUE elements.
S */
S#ifndef SNMP_MAX_OCTET_STRING_LEN
S#define SNMP_MAX_OCTET_STRING_LEN       127
S#endif
S
S/**
S * The maximum depth of the SNMP tree.
S * With private MIBs enabled, this depends on your MIB!
S * This affects the size of MEMP_SNMP_VALUE elements.
S */
S#ifndef SNMP_MAX_TREE_DEPTH
S#define SNMP_MAX_TREE_DEPTH             15
S#endif
S
S/**
S * The size of the MEMP_SNMP_VALUE elements, normally calculated from
S * SNMP_MAX_OCTET_STRING_LEN and SNMP_MAX_TREE_DEPTH.
S */
S#ifndef SNMP_MAX_VALUE_SIZE
S#define SNMP_MAX_VALUE_SIZE             LWIP_MAX((SNMP_MAX_OCTET_STRING_LEN)+1, sizeof(s32_t)*(SNMP_MAX_TREE_DEPTH))
S#endif
S
S/*
S   ----------------------------------
S   ---------- IGMP options ----------
S   ----------------------------------
S*/
S/**
S * LWIP_IGMP==1: Turn on IGMP module. 
S */
S#ifndef LWIP_IGMP
S#define LWIP_IGMP                       0
S#endif
S
S/*
S   ----------------------------------
S   ---------- DNS options -----------
S   ----------------------------------
S*/
S/**
S * LWIP_DNS==1: Turn on DNS module. UDP must be available for DNS
S * transport.
S */
S#ifndef LWIP_DNS
S#define LWIP_DNS                        0
S#endif
S
S/** DNS maximum number of entries to maintain locally. */
S#ifndef DNS_TABLE_SIZE
S#define DNS_TABLE_SIZE                  4
S#endif
S
S/** DNS maximum host name length supported in the name table. */
S#ifndef DNS_MAX_NAME_LENGTH
S#define DNS_MAX_NAME_LENGTH             256
S#endif
S
S/** The maximum of DNS servers */
S#ifndef DNS_MAX_SERVERS
S#define DNS_MAX_SERVERS                 2
S#endif
S
S/** DNS do a name checking between the query and the response. */
S#ifndef DNS_DOES_NAME_CHECK
S#define DNS_DOES_NAME_CHECK             1
S#endif
S
S/** DNS message max. size. Default value is RFC compliant. */
S#ifndef DNS_MSG_SIZE
S#define DNS_MSG_SIZE                    512
S#endif
S
S/** DNS_LOCAL_HOSTLIST: Implements a local host-to-address list. If enabled,
S *  you have to define
S *    #define DNS_LOCAL_HOSTLIST_INIT {{"host1", 0x123}, {"host2", 0x234}}
S *  (an array of structs name/address, where address is an u32_t in network
S *  byte order).
S *
S *  Instead, you can also use an external function:
S *  #define DNS_LOOKUP_LOCAL_EXTERN(x) extern u32_t my_lookup_function(const char *name)
S *  that returns the IP address or INADDR_NONE if not found.
S */
S#ifndef DNS_LOCAL_HOSTLIST
S#define DNS_LOCAL_HOSTLIST              0
S#endif /* DNS_LOCAL_HOSTLIST */
S
S/** If this is turned on, the local host-list can be dynamically changed
S *  at runtime. */
S#ifndef DNS_LOCAL_HOSTLIST_IS_DYNAMIC
S#define DNS_LOCAL_HOSTLIST_IS_DYNAMIC   0
S#endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
S
S/*
S   ---------------------------------
S   ---------- UDP options ----------
S   ---------------------------------
S*/
S/**
S * LWIP_UDP==1: Turn on UDP.
S */
S#ifndef LWIP_UDP
S#define LWIP_UDP                        1
S#endif
S
S/**
S * LWIP_UDPLITE==1: Turn on UDP-Lite. (Requires LWIP_UDP)
S */
S#ifndef LWIP_UDPLITE
S#define LWIP_UDPLITE                    0
S#endif
S
S/**
S * UDP_TTL: Default Time-To-Live value.
S */
S#ifndef UDP_TTL
S#define UDP_TTL                         (IP_DEFAULT_TTL)
S#endif
S
S/**
S * LWIP_NETBUF_RECVINFO==1: append destination addr and port to every netbuf.
S */
S#ifndef LWIP_NETBUF_RECVINFO
S#define LWIP_NETBUF_RECVINFO            0
S#endif
S
S/*
S   ---------------------------------
S   ---------- TCP options ----------
S   ---------------------------------
S*/
S/**
S * LWIP_TCP==1: Turn on TCP.
S */
S#ifndef LWIP_TCP
S#define LWIP_TCP                        1
S#endif
S
S/**
S * TCP_TTL: Default Time-To-Live value.
S */
S#ifndef TCP_TTL
S#define TCP_TTL                         (IP_DEFAULT_TTL)
S#endif
S
S/**
S * TCP_WND: The size of a TCP window.  This must be at least 
S * (2 * TCP_MSS) for things to work well
S */
S#ifndef TCP_WND
S#define TCP_WND                         (4 * TCP_MSS)
S#endif 
S
S/**
S * TCP_MAXRTX: Maximum number of retransmissions of data segments.
S */
S#ifndef TCP_MAXRTX
S#define TCP_MAXRTX                      12
S#endif
S
S/**
S * TCP_SYNMAXRTX: Maximum number of retransmissions of SYN segments.
S */
S#ifndef TCP_SYNMAXRTX
S#define TCP_SYNMAXRTX                   6
S#endif
S
S/**
S * TCP_QUEUE_OOSEQ==1: TCP will queue segments that arrive out of order.
S * Define to 0 if your device is low on memory.
S */
S#ifndef TCP_QUEUE_OOSEQ
S#define TCP_QUEUE_OOSEQ                 (LWIP_TCP)
S#endif
S
S/**
S * TCP_MSS: TCP Maximum segment size. (default is 536, a conservative default,
S * you might want to increase this.)
S * For the receive side, this MSS is advertised to the remote side
S * when opening a connection. For the transmit size, this MSS sets
S * an upper limit on the MSS advertised by the remote host.
S */
S#ifndef TCP_MSS
S#define TCP_MSS                         536
S#endif
S
S/**
S * TCP_CALCULATE_EFF_SEND_MSS: "The maximum size of a segment that TCP really
S * sends, the 'effective send MSS,' MUST be the smaller of the send MSS (which
S * reflects the available reassembly buffer size at the remote host) and the
S * largest size permitted by the IP layer" (RFC 1122)
S * Setting this to 1 enables code that checks TCP_MSS against the MTU of the
S * netif used for a connection and limits the MSS if it would be too big otherwise.
S */
S#ifndef TCP_CALCULATE_EFF_SEND_MSS
S#define TCP_CALCULATE_EFF_SEND_MSS      1
S#endif
S
S
S/**
S * TCP_SND_BUF: TCP sender buffer space (bytes).
S * To achieve good performance, this should be at least 2 * TCP_MSS.
S */
S#ifndef TCP_SND_BUF
S#define TCP_SND_BUF                     (2 * TCP_MSS)
S#endif
S
S/**
S * TCP_SND_QUEUELEN: TCP sender buffer space (pbufs). This must be at least
S * as much as (2 * TCP_SND_BUF/TCP_MSS) for things to work.
S */
S#ifndef TCP_SND_QUEUELEN
S#define TCP_SND_QUEUELEN                ((4 * (TCP_SND_BUF) + (TCP_MSS - 1))/(TCP_MSS))
S#endif
S
S/**
S * TCP_SNDLOWAT: TCP writable space (bytes). This must be less than
S * TCP_SND_BUF. It is the amount of space which must be available in the
S * TCP snd_buf for select to return writable (combined with TCP_SNDQUEUELOWAT).
S */
S#ifndef TCP_SNDLOWAT
S#define TCP_SNDLOWAT                    LWIP_MIN(LWIP_MAX(((TCP_SND_BUF)/2), (2 * TCP_MSS) + 1), (TCP_SND_BUF) - 1)
S#endif
S
S/**
S * TCP_SNDQUEUELOWAT: TCP writable bufs (pbuf count). This must be less
S * than TCP_SND_QUEUELEN. If the number of pbufs queued on a pcb drops below
S * this number, select returns writable (combined with TCP_SNDLOWAT).
S */
S#ifndef TCP_SNDQUEUELOWAT
S#define TCP_SNDQUEUELOWAT               LWIP_MAX(((TCP_SND_QUEUELEN)/2), 5)
S#endif
S
S/**
S * TCP_OOSEQ_MAX_BYTES: The maximum number of bytes queued on ooseq per pcb.
S * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
S */
S#ifndef TCP_OOSEQ_MAX_BYTES
S#define TCP_OOSEQ_MAX_BYTES             0
S#endif
S
S/**
S * TCP_OOSEQ_MAX_PBUFS: The maximum number of pbufs queued on ooseq per pcb.
S * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
S */
S#ifndef TCP_OOSEQ_MAX_PBUFS
S#define TCP_OOSEQ_MAX_PBUFS             0
S#endif
S
S/**
S * TCP_LISTEN_BACKLOG: Enable the backlog option for tcp listen pcb.
S */
S#ifndef TCP_LISTEN_BACKLOG
S#define TCP_LISTEN_BACKLOG              0
S#endif
S
S/**
S * The maximum allowed backlog for TCP listen netconns.
S * This backlog is used unless another is explicitly specified.
S * 0xff is the maximum (u8_t).
S */
S#ifndef TCP_DEFAULT_LISTEN_BACKLOG
S#define TCP_DEFAULT_LISTEN_BACKLOG      0xff
S#endif
S
S/**
S * TCP_OVERSIZE: The maximum number of bytes that tcp_write may
S * allocate ahead of time in an attempt to create shorter pbuf chains
S * for transmission. The meaningful range is 0 to TCP_MSS. Some
S * suggested values are:
S *
S * 0:         Disable oversized allocation. Each tcp_write() allocates a new
S              pbuf (old behaviour).
S * 1:         Allocate size-aligned pbufs with minimal excess. Use this if your
S *            scatter-gather DMA requires aligned fragments.
S * 128:       Limit the pbuf/memory overhead to 20%.
S * TCP_MSS:   Try to create unfragmented TCP packets.
S * TCP_MSS/4: Try to create 4 fragments or less per TCP packet.
S */
S#ifndef TCP_OVERSIZE
S#define TCP_OVERSIZE                    TCP_MSS
S#endif
S
S/**
S * LWIP_TCP_TIMESTAMPS==1: support the TCP timestamp option.
S */
S#ifndef LWIP_TCP_TIMESTAMPS
S#define LWIP_TCP_TIMESTAMPS             0
S#endif
S
S/**
S * TCP_WND_UPDATE_THRESHOLD: difference in window to trigger an
S * explicit window update
S */
S#ifndef TCP_WND_UPDATE_THRESHOLD
S#define TCP_WND_UPDATE_THRESHOLD   (TCP_WND / 4)
S#endif
S
S/**
S * LWIP_EVENT_API and LWIP_CALLBACK_API: Only one of these should be set to 1.
S *     LWIP_EVENT_API==1: The user defines lwip_tcp_event() to receive all
S *         events (accept, sent, etc) that happen in the system.
S *     LWIP_CALLBACK_API==1: The PCB callback function is called directly
S *         for the event. This is the default.
S */
S#if !defined(LWIP_EVENT_API) && !defined(LWIP_CALLBACK_API)
S#define LWIP_EVENT_API                  0
S#define LWIP_CALLBACK_API               1
S#endif
S
S
S/*
S   ----------------------------------
S   ---------- Pbuf options ----------
S   ----------------------------------
S*/
S/**
S * PBUF_LINK_HLEN: the number of bytes that should be allocated for a
S * link level header. The default is 14, the standard value for
S * Ethernet.
S */
S#ifndef PBUF_LINK_HLEN
S#define PBUF_LINK_HLEN                  (14 + ETH_PAD_SIZE)
S#endif
S
S/**
S * PBUF_POOL_BUFSIZE: the size of each pbuf in the pbuf pool. The default is
S * designed to accomodate single full size TCP frame in one pbuf, including
S * TCP_MSS, IP header, and link header.
S */
S#ifndef PBUF_POOL_BUFSIZE
S#define PBUF_POOL_BUFSIZE               LWIP_MEM_ALIGN_SIZE(TCP_MSS+40+PBUF_LINK_HLEN)
S#endif
S
S/*
S   ------------------------------------------------
S   ---------- Network Interfaces options ----------
S   ------------------------------------------------
S*/
S/**
S * LWIP_NETIF_HOSTNAME==1: use DHCP_OPTION_HOSTNAME with netif's hostname
S * field.
S */
S#ifndef LWIP_NETIF_HOSTNAME
S#define LWIP_NETIF_HOSTNAME             0
S#endif
S
S/**
S * LWIP_NETIF_API==1: Support netif api (in netifapi.c)
S */
S#ifndef LWIP_NETIF_API
S#define LWIP_NETIF_API                  0
S#endif
S
S/**
S * LWIP_NETIF_STATUS_CALLBACK==1: Support a callback function whenever an interface
S * changes its up/down status (i.e., due to DHCP IP acquistion)
S */
S#ifndef LWIP_NETIF_STATUS_CALLBACK
S#define LWIP_NETIF_STATUS_CALLBACK      0
S#endif
S
S/**
S * LWIP_NETIF_LINK_CALLBACK==1: Support a callback function from an interface
S * whenever the link changes (i.e., link down)
S */
S#ifndef LWIP_NETIF_LINK_CALLBACK
S#define LWIP_NETIF_LINK_CALLBACK        0
S#endif
S
S/**
S * LWIP_NETIF_REMOVE_CALLBACK==1: Support a callback function that is called
S * when a netif has been removed
S */
S#ifndef LWIP_NETIF_REMOVE_CALLBACK
S#define LWIP_NETIF_REMOVE_CALLBACK      0
S#endif
S
S/**
S * LWIP_NETIF_HWADDRHINT==1: Cache link-layer-address hints (e.g. table
S * indices) in struct netif. TCP and UDP can make use of this to prevent
S * scanning the ARP table for every sent packet. While this is faster for big
S * ARP tables or many concurrent connections, it might be counterproductive
S * if you have a tiny ARP table or if there never are concurrent connections.
S */
S#ifndef LWIP_NETIF_HWADDRHINT
S#define LWIP_NETIF_HWADDRHINT           0
S#endif
S
S/**
S * LWIP_NETIF_LOOPBACK==1: Support sending packets with a destination IP
S * address equal to the netif IP address, looping them back up the stack.
S */
S#ifndef LWIP_NETIF_LOOPBACK
S#define LWIP_NETIF_LOOPBACK             0
S#endif
S
S/**
S * LWIP_LOOPBACK_MAX_PBUFS: Maximum number of pbufs on queue for loopback
S * sending for each netif (0 = disabled)
S */
S#ifndef LWIP_LOOPBACK_MAX_PBUFS
S#define LWIP_LOOPBACK_MAX_PBUFS         0
S#endif
S
S/**
S * LWIP_NETIF_LOOPBACK_MULTITHREADING: Indicates whether threading is enabled in
S * the system, as netifs must change how they behave depending on this setting
S * for the LWIP_NETIF_LOOPBACK option to work.
S * Setting this is needed to avoid reentering non-reentrant functions like
S * tcp_input().
S *    LWIP_NETIF_LOOPBACK_MULTITHREADING==1: Indicates that the user is using a
S *       multithreaded environment like tcpip.c. In this case, netif->input()
S *       is called directly.
S *    LWIP_NETIF_LOOPBACK_MULTITHREADING==0: Indicates a polling (or NO_SYS) setup.
S *       The packets are put on a list and netif_poll() must be called in
S *       the main application loop.
S */
S#ifndef LWIP_NETIF_LOOPBACK_MULTITHREADING
S#define LWIP_NETIF_LOOPBACK_MULTITHREADING    (!NO_SYS)
S#endif
S
S/**
S * LWIP_NETIF_TX_SINGLE_PBUF: if this is set to 1, lwIP tries to put all data
S * to be sent into one single pbuf. This is for compatibility with DMA-enabled
S * MACs that do not support scatter-gather.
S * Beware that this might involve CPU-memcpy before transmitting that would not
S * be needed without this flag! Use this only if you need to!
S *
S * @todo: TCP and IP-frag do not work with this, yet:
S */
S#ifndef LWIP_NETIF_TX_SINGLE_PBUF
S#define LWIP_NETIF_TX_SINGLE_PBUF             0
S#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
S
S/*
S   ------------------------------------
S   ---------- LOOPIF options ----------
S   ------------------------------------
S*/
S/**
S * LWIP_HAVE_LOOPIF==1: Support loop interface (127.0.0.1) and loopif.c
S */
S#ifndef LWIP_HAVE_LOOPIF
S#define LWIP_HAVE_LOOPIF                0
S#endif
S
S/*
S   ------------------------------------
S   ---------- SLIPIF options ----------
S   ------------------------------------
S*/
S/**
S * LWIP_HAVE_SLIPIF==1: Support slip interface and slipif.c
S */
S#ifndef LWIP_HAVE_SLIPIF
S#define LWIP_HAVE_SLIPIF                0
S#endif
S
S/*
S   ------------------------------------
S   ---------- Thread options ----------
S   ------------------------------------
S*/
S/**
S * TCPIP_THREAD_NAME: The name assigned to the main tcpip thread.
S */
S#ifndef TCPIP_THREAD_NAME
S#define TCPIP_THREAD_NAME              "tcpip_thread"
S#endif
S
S/**
S * TCPIP_THREAD_STACKSIZE: The stack size used by the main tcpip thread.
S * The stack size value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef TCPIP_THREAD_STACKSIZE
S#define TCPIP_THREAD_STACKSIZE          0
S#endif
S
S/**
S * TCPIP_THREAD_PRIO: The priority assigned to the main tcpip thread.
S * The priority value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef TCPIP_THREAD_PRIO
S#define TCPIP_THREAD_PRIO               1
S#endif
S
S/**
S * TCPIP_MBOX_SIZE: The mailbox size for the tcpip thread messages
S * The queue size value itself is platform-dependent, but is passed to
S * sys_mbox_new() when tcpip_init is called.
S */
S#ifndef TCPIP_MBOX_SIZE
S#define TCPIP_MBOX_SIZE                 0
S#endif
S
S/**
S * SLIPIF_THREAD_NAME: The name assigned to the slipif_loop thread.
S */
S#ifndef SLIPIF_THREAD_NAME
S#define SLIPIF_THREAD_NAME             "slipif_loop"
S#endif
S
S/**
S * SLIP_THREAD_STACKSIZE: The stack size used by the slipif_loop thread.
S * The stack size value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef SLIPIF_THREAD_STACKSIZE
S#define SLIPIF_THREAD_STACKSIZE         0
S#endif
S
S/**
S * SLIPIF_THREAD_PRIO: The priority assigned to the slipif_loop thread.
S * The priority value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef SLIPIF_THREAD_PRIO
S#define SLIPIF_THREAD_PRIO              1
S#endif
S
S/**
S * PPP_THREAD_NAME: The name assigned to the pppInputThread.
S */
S#ifndef PPP_THREAD_NAME
S#define PPP_THREAD_NAME                "pppInputThread"
S#endif
S
S/**
S * PPP_THREAD_STACKSIZE: The stack size used by the pppInputThread.
S * The stack size value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef PPP_THREAD_STACKSIZE
S#define PPP_THREAD_STACKSIZE            0
S#endif
S
S/**
S * PPP_THREAD_PRIO: The priority assigned to the pppInputThread.
S * The priority value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef PPP_THREAD_PRIO
S#define PPP_THREAD_PRIO                 1
S#endif
S
S/**
S * DEFAULT_THREAD_NAME: The name assigned to any other lwIP thread.
S */
S#ifndef DEFAULT_THREAD_NAME
S#define DEFAULT_THREAD_NAME            "lwIP"
S#endif
S
S/**
S * DEFAULT_THREAD_STACKSIZE: The stack size used by any other lwIP thread.
S * The stack size value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef DEFAULT_THREAD_STACKSIZE
S#define DEFAULT_THREAD_STACKSIZE        0
S#endif
S
S/**
S * DEFAULT_THREAD_PRIO: The priority assigned to any other lwIP thread.
S * The priority value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef DEFAULT_THREAD_PRIO
S#define DEFAULT_THREAD_PRIO             1
S#endif
S
S/**
S * DEFAULT_RAW_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
S * NETCONN_RAW. The queue size value itself is platform-dependent, but is passed
S * to sys_mbox_new() when the recvmbox is created.
S */
S#ifndef DEFAULT_RAW_RECVMBOX_SIZE
S#define DEFAULT_RAW_RECVMBOX_SIZE       0
S#endif
S
S/**
S * DEFAULT_UDP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
S * NETCONN_UDP. The queue size value itself is platform-dependent, but is passed
S * to sys_mbox_new() when the recvmbox is created.
S */
S#ifndef DEFAULT_UDP_RECVMBOX_SIZE
S#define DEFAULT_UDP_RECVMBOX_SIZE       0
S#endif
S
S/**
S * DEFAULT_TCP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
S * NETCONN_TCP. The queue size value itself is platform-dependent, but is passed
S * to sys_mbox_new() when the recvmbox is created.
S */
S#ifndef DEFAULT_TCP_RECVMBOX_SIZE
S#define DEFAULT_TCP_RECVMBOX_SIZE       0
S#endif
S
S/**
S * DEFAULT_ACCEPTMBOX_SIZE: The mailbox size for the incoming connections.
S * The queue size value itself is platform-dependent, but is passed to
S * sys_mbox_new() when the acceptmbox is created.
S */
S#ifndef DEFAULT_ACCEPTMBOX_SIZE
S#define DEFAULT_ACCEPTMBOX_SIZE         0
S#endif
S
S/*
S   ----------------------------------------------
S   ---------- Sequential layer options ----------
S   ----------------------------------------------
S*/
S/**
S * LWIP_TCPIP_CORE_LOCKING: (EXPERIMENTAL!)
S * Don't use it if you're not an active lwIP project member
S */
S#ifndef LWIP_TCPIP_CORE_LOCKING
S#define LWIP_TCPIP_CORE_LOCKING         0
S#endif
S
S/**
S * LWIP_TCPIP_CORE_LOCKING_INPUT: (EXPERIMENTAL!)
S * Don't use it if you're not an active lwIP project member
S */
S#ifndef LWIP_TCPIP_CORE_LOCKING_INPUT
S#define LWIP_TCPIP_CORE_LOCKING_INPUT   0
S#endif
S
S/**
S * LWIP_NETCONN==1: Enable Netconn API (require to use api_lib.c)
S */
S#ifndef LWIP_NETCONN
S#define LWIP_NETCONN                    1
S#endif
S
S/** LWIP_TCPIP_TIMEOUT==1: Enable tcpip_timeout/tcpip_untimeout tod create
S * timers running in tcpip_thread from another thread.
S */
S#ifndef LWIP_TCPIP_TIMEOUT
S#define LWIP_TCPIP_TIMEOUT              1
S#endif
S
S/*
S   ------------------------------------
S   ---------- Socket options ----------
S   ------------------------------------
S*/
S/**
S * LWIP_SOCKET==1: Enable Socket API (require to use sockets.c)
S */
S#ifndef LWIP_SOCKET
S#define LWIP_SOCKET                     1
S#endif
S
S/**
S * LWIP_COMPAT_SOCKETS==1: Enable BSD-style sockets functions names.
S * (only used if you use sockets.c)
S */
S#ifndef LWIP_COMPAT_SOCKETS
S#define LWIP_COMPAT_SOCKETS             1
S#endif
S
S/**
S * LWIP_POSIX_SOCKETS_IO_NAMES==1: Enable POSIX-style sockets functions names.
S * Disable this option if you use a POSIX operating system that uses the same
S * names (read, write & close). (only used if you use sockets.c)
S */
S#ifndef LWIP_POSIX_SOCKETS_IO_NAMES
S#define LWIP_POSIX_SOCKETS_IO_NAMES     1
S#endif
S
S/**
S * LWIP_TCP_KEEPALIVE==1: Enable TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT
S * options processing. Note that TCP_KEEPIDLE and TCP_KEEPINTVL have to be set
S * in seconds. (does not require sockets.c, and will affect tcp.c)
S */
S#ifndef LWIP_TCP_KEEPALIVE
S#define LWIP_TCP_KEEPALIVE              0
S#endif
S
S/**
S * LWIP_SO_SNDTIMEO==1: Enable send timeout for sockets/netconns and
S * SO_SNDTIMEO processing.
S */
S#ifndef LWIP_SO_SNDTIMEO
S#define LWIP_SO_SNDTIMEO                0
S#endif
S
S/**
S * LWIP_SO_RCVTIMEO==1: Enable receive timeout for sockets/netconns and
S * SO_RCVTIMEO processing.
S */
S#ifndef LWIP_SO_RCVTIMEO
S#define LWIP_SO_RCVTIMEO                0
S#endif
S
S/**
S * LWIP_SO_RCVBUF==1: Enable SO_RCVBUF processing.
S */
S#ifndef LWIP_SO_RCVBUF
S#define LWIP_SO_RCVBUF                  0
S#endif
S
S/**
S * If LWIP_SO_RCVBUF is used, this is the default value for recv_bufsize.
S */
S#ifndef RECV_BUFSIZE_DEFAULT
S#define RECV_BUFSIZE_DEFAULT            INT_MAX
S#endif
S
S/**
S * SO_REUSE==1: Enable SO_REUSEADDR option.
S */
S#ifndef SO_REUSE
S#define SO_REUSE                        0
S#endif
S
S/**
S * SO_REUSE_RXTOALL==1: Pass a copy of incoming broadcast/multicast packets
S * to all local matches if SO_REUSEADDR is turned on.
S * WARNING: Adds a memcpy for every packet if passing to more than one pcb!
S */
S#ifndef SO_REUSE_RXTOALL
S#define SO_REUSE_RXTOALL                0
S#endif
S
S/*
S   ----------------------------------------
S   ---------- Statistics options ----------
S   ----------------------------------------
S*/
S/**
S * LWIP_STATS==1: Enable statistics collection in lwip_stats.
S */
S#ifndef LWIP_STATS
S#define LWIP_STATS                      1
S#endif
S
S#if LWIP_STATS
S
S/**
S * LWIP_STATS_DISPLAY==1: Compile in the statistics output functions.
S */
S#ifndef LWIP_STATS_DISPLAY
S#define LWIP_STATS_DISPLAY              0
S#endif
S
S/**
S * LINK_STATS==1: Enable link stats.
S */
S#ifndef LINK_STATS
S#define LINK_STATS                      1
S#endif
S
S/**
S * ETHARP_STATS==1: Enable etharp stats.
S */
S#ifndef ETHARP_STATS
S#define ETHARP_STATS                    (LWIP_ARP)
S#endif
S
S/**
S * IP_STATS==1: Enable IP stats.
S */
S#ifndef IP_STATS
S#define IP_STATS                        1
S#endif
S
S/**
S * IPFRAG_STATS==1: Enable IP fragmentation stats. Default is
S * on if using either frag or reass.
S */
S#ifndef IPFRAG_STATS
S#define IPFRAG_STATS                    (IP_REASSEMBLY || IP_FRAG)
S#endif
S
S/**
S * ICMP_STATS==1: Enable ICMP stats.
S */
S#ifndef ICMP_STATS
S#define ICMP_STATS                      1
S#endif
S
S/**
S * IGMP_STATS==1: Enable IGMP stats.
S */
S#ifndef IGMP_STATS
S#define IGMP_STATS                      (LWIP_IGMP)
S#endif
S
S/**
S * UDP_STATS==1: Enable UDP stats. Default is on if
S * UDP enabled, otherwise off.
S */
S#ifndef UDP_STATS
S#define UDP_STATS                       (LWIP_UDP)
S#endif
S
S/**
S * TCP_STATS==1: Enable TCP stats. Default is on if TCP
S * enabled, otherwise off.
S */
S#ifndef TCP_STATS
S#define TCP_STATS                       (LWIP_TCP)
S#endif
S
S/**
S * MEM_STATS==1: Enable mem.c stats.
S */
S#ifndef MEM_STATS
S#define MEM_STATS                       ((MEM_LIBC_MALLOC == 0) && (MEM_USE_POOLS == 0))
S#endif
S
S/**
S * MEMP_STATS==1: Enable memp.c pool stats.
S */
S#ifndef MEMP_STATS
S#define MEMP_STATS                      (MEMP_MEM_MALLOC == 0)
S#endif
S
S/**
S * SYS_STATS==1: Enable system stats (sem and mbox counts, etc).
S */
S#ifndef SYS_STATS
S#define SYS_STATS                       (NO_SYS == 0)
S#endif
S
S#else
S
S#define LINK_STATS                      0
S#define IP_STATS                        0
S#define IPFRAG_STATS                    0
S#define ICMP_STATS                      0
S#define IGMP_STATS                      0
S#define UDP_STATS                       0
S#define TCP_STATS                       0
S#define MEM_STATS                       0
S#define MEMP_STATS                      0
S#define SYS_STATS                       0
S#define LWIP_STATS_DISPLAY              0
S
S#endif /* LWIP_STATS */
S
S/*
S   ---------------------------------
S   ---------- PPP options ----------
S   ---------------------------------
S*/
S/**
S * PPP_SUPPORT==1: Enable PPP.
S */
S#ifndef PPP_SUPPORT
S#define PPP_SUPPORT                     0
S#endif
S
S/**
S * PPPOE_SUPPORT==1: Enable PPP Over Ethernet
S */
S#ifndef PPPOE_SUPPORT
S#define PPPOE_SUPPORT                   0
S#endif
S
S/**
S * PPPOS_SUPPORT==1: Enable PPP Over Serial
S */
S#ifndef PPPOS_SUPPORT
S#define PPPOS_SUPPORT                   PPP_SUPPORT
S#endif
S
S#if PPP_SUPPORT
S
S/**
S * NUM_PPP: Max PPP sessions.
S */
S#ifndef NUM_PPP
S#define NUM_PPP                         1
S#endif
S
S/**
S * PAP_SUPPORT==1: Support PAP.
S */
S#ifndef PAP_SUPPORT
S#define PAP_SUPPORT                     0
S#endif
S
S/**
S * CHAP_SUPPORT==1: Support CHAP.
S */
S#ifndef CHAP_SUPPORT
S#define CHAP_SUPPORT                    0
S#endif
S
S/**
S * MSCHAP_SUPPORT==1: Support MSCHAP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef MSCHAP_SUPPORT
S#define MSCHAP_SUPPORT                  0
S#endif
S
S/**
S * CBCP_SUPPORT==1: Support CBCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CBCP_SUPPORT
S#define CBCP_SUPPORT                    0
S#endif
S
S/**
S * CCP_SUPPORT==1: Support CCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CCP_SUPPORT
S#define CCP_SUPPORT                     0
S#endif
S
S/**
S * VJ_SUPPORT==1: Support VJ header compression.
S */
S#ifndef VJ_SUPPORT
S#define VJ_SUPPORT                      0
S#endif
S
S/**
S * MD5_SUPPORT==1: Support MD5 (see also CHAP).
S */
S#ifndef MD5_SUPPORT
S#define MD5_SUPPORT                     0
S#endif
S
S/*
S * Timeouts
S */
S#ifndef FSM_DEFTIMEOUT
S#define FSM_DEFTIMEOUT                  6       /* Timeout time in seconds */
S#endif
S
S#ifndef FSM_DEFMAXTERMREQS
S#define FSM_DEFMAXTERMREQS              2       /* Maximum Terminate-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXCONFREQS
S#define FSM_DEFMAXCONFREQS              10      /* Maximum Configure-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXNAKLOOPS
S#define FSM_DEFMAXNAKLOOPS              5       /* Maximum number of nak loops */
S#endif
S
S#ifndef UPAP_DEFTIMEOUT
S#define UPAP_DEFTIMEOUT                 6       /* Timeout (seconds) for retransmitting req */
S#endif
S
S#ifndef UPAP_DEFREQTIME
S#define UPAP_DEFREQTIME                 30      /* Time to wait for auth-req from peer */
S#endif
S
S#ifndef CHAP_DEFTIMEOUT
S#define CHAP_DEFTIMEOUT                 6       /* Timeout time in seconds */
S#endif
S
S#ifndef CHAP_DEFTRANSMITS
S#define CHAP_DEFTRANSMITS               10      /* max # times to send challenge */
S#endif
S
S/* Interval in seconds between keepalive echo requests, 0 to disable. */
S#ifndef LCP_ECHOINTERVAL
S#define LCP_ECHOINTERVAL                0
S#endif
S
S/* Number of unanswered echo requests before failure. */
S#ifndef LCP_MAXECHOFAILS
S#define LCP_MAXECHOFAILS                3
S#endif
S
S/* Max Xmit idle time (in jiffies) before resend flag char. */
S#ifndef PPP_MAXIDLEFLAG
S#define PPP_MAXIDLEFLAG                 100
S#endif
S
S/*
S * Packet sizes
S *
S * Note - lcp shouldn't be allowed to negotiate stuff outside these
S *    limits.  See lcp.h in the pppd directory.
S * (XXX - these constants should simply be shared by lcp.c instead
S *    of living in lcp.h)
S */
S#define PPP_MTU                         1500     /* Default MTU (size of Info field) */
S#ifndef PPP_MAXMTU
S/* #define PPP_MAXMTU  65535 - (PPP_HDRLEN + PPP_FCSLEN) */
S#define PPP_MAXMTU                      1500 /* Largest MTU we allow */
S#endif
S#define PPP_MINMTU                      64
S#define PPP_MRU                         1500     /* default MRU = max length of info field */
S#define PPP_MAXMRU                      1500     /* Largest MRU we allow */
S#ifndef PPP_DEFMRU
S#define PPP_DEFMRU                      296             /* Try for this */
S#endif
S#define PPP_MINMRU                      128             /* No MRUs below this */
S
S#ifndef MAXNAMELEN
S#define MAXNAMELEN                      256     /* max length of hostname or name for auth */
S#endif
S#ifndef MAXSECRETLEN
S#define MAXSECRETLEN                    256     /* max length of password or secret */
S#endif
S
S#endif /* PPP_SUPPORT */
S
S/*
S   --------------------------------------
S   ---------- Checksum options ----------
S   --------------------------------------
S*/
S/**
S * CHECKSUM_GEN_IP==1: Generate checksums in software for outgoing IP packets.
S */
S#ifndef CHECKSUM_GEN_IP
S#define CHECKSUM_GEN_IP                 1
S#endif
S 
S/**
S * CHECKSUM_GEN_UDP==1: Generate checksums in software for outgoing UDP packets.
S */
S#ifndef CHECKSUM_GEN_UDP
S#define CHECKSUM_GEN_UDP                1
S#endif
S 
S/**
S * CHECKSUM_GEN_TCP==1: Generate checksums in software for outgoing TCP packets.
S */
S#ifndef CHECKSUM_GEN_TCP
S#define CHECKSUM_GEN_TCP                1
S#endif
S
S/**
S * CHECKSUM_GEN_ICMP==1: Generate checksums in software for outgoing ICMP packets.
S */
S#ifndef CHECKSUM_GEN_ICMP
S#define CHECKSUM_GEN_ICMP               1
S#endif
S 
S/**
S * CHECKSUM_CHECK_IP==1: Check checksums in software for incoming IP packets.
S */
S#ifndef CHECKSUM_CHECK_IP
S#define CHECKSUM_CHECK_IP               1
S#endif
S 
S/**
S * CHECKSUM_CHECK_UDP==1: Check checksums in software for incoming UDP packets.
S */
S#ifndef CHECKSUM_CHECK_UDP
S#define CHECKSUM_CHECK_UDP              1
S#endif
S
S/**
S * CHECKSUM_CHECK_TCP==1: Check checksums in software for incoming TCP packets.
S */
S#ifndef CHECKSUM_CHECK_TCP
S#define CHECKSUM_CHECK_TCP              1
S#endif
S
S/**
S * LWIP_CHECKSUM_ON_COPY==1: Calculate checksum when copying data from
S * application buffers to pbufs.
S */
S#ifndef LWIP_CHECKSUM_ON_COPY
S#define LWIP_CHECKSUM_ON_COPY           0
S#endif
S
S/*
S   ---------------------------------------
S   ---------- Hook options ---------------
S   ---------------------------------------
S*/
S
S/* Hooks are undefined by default, define them to a function if you need them. */
S
S/**
S * LWIP_HOOK_IP4_INPUT(pbuf, input_netif):
S * - called from ip_input() (IPv4)
S * - pbuf: received struct pbuf passed to ip_input()
S * - input_netif: struct netif on which the packet has been received
S * Return values:
S * - 0: Hook has not consumed the packet, packet is processed as normal
S * - != 0: Hook has consumed the packet.
S * If the hook consumed the packet, 'pbuf' is in the responsibility of the hook
S * (i.e. free it when done).
S */
S
S/**
S * LWIP_HOOK_IP4_ROUTE(dest):
S * - called from ip_route() (IPv4)
S * - dest: destination IPv4 address
S * Returns the destination netif or NULL if no destination netif is found. In
S * that case, ip_route() continues as normal.
S */
S
S/*
S   ---------------------------------------
S   ---------- Debugging options ----------
S   ---------------------------------------
S*/
S/**
S * LWIP_DBG_MIN_LEVEL: After masking, the value of the debug is
S * compared against this value. If it is smaller, then debugging
S * messages are written.
S */
S#ifndef LWIP_DBG_MIN_LEVEL
S#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_ALL
S#endif
S
S/**
S * LWIP_DBG_TYPES_ON: A mask that can be used to globally enable/disable
S * debug messages of certain types.
S */
S#ifndef LWIP_DBG_TYPES_ON
S#define LWIP_DBG_TYPES_ON               LWIP_DBG_ON
S#endif
S
S/**
S * ETHARP_DEBUG: Enable debugging in etharp.c.
S */
S#ifndef ETHARP_DEBUG
S#define ETHARP_DEBUG                    LWIP_DBG_OFF
S#endif
S
S/**
S * NETIF_DEBUG: Enable debugging in netif.c.
S */
S#ifndef NETIF_DEBUG
S#define NETIF_DEBUG                     LWIP_DBG_OFF
S#endif
S
S/**
S * PBUF_DEBUG: Enable debugging in pbuf.c.
S */
S#ifndef PBUF_DEBUG
S#define PBUF_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * API_LIB_DEBUG: Enable debugging in api_lib.c.
S */
S#ifndef API_LIB_DEBUG
S#define API_LIB_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * API_MSG_DEBUG: Enable debugging in api_msg.c.
S */
S#ifndef API_MSG_DEBUG
S#define API_MSG_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * SOCKETS_DEBUG: Enable debugging in sockets.c.
S */
S#ifndef SOCKETS_DEBUG
S#define SOCKETS_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * ICMP_DEBUG: Enable debugging in icmp.c.
S */
S#ifndef ICMP_DEBUG
S#define ICMP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * IGMP_DEBUG: Enable debugging in igmp.c.
S */
S#ifndef IGMP_DEBUG
S#define IGMP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * INET_DEBUG: Enable debugging in inet.c.
S */
S#ifndef INET_DEBUG
S#define INET_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * IP_DEBUG: Enable debugging for IP.
S */
S#ifndef IP_DEBUG
S#define IP_DEBUG                        LWIP_DBG_OFF
S#endif
S
S/**
S * IP_REASS_DEBUG: Enable debugging in ip_frag.c for both frag & reass.
S */
S#ifndef IP_REASS_DEBUG
S#define IP_REASS_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * RAW_DEBUG: Enable debugging in raw.c.
S */
S#ifndef RAW_DEBUG
S#define RAW_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * MEM_DEBUG: Enable debugging in mem.c.
S */
S#ifndef MEM_DEBUG
S#define MEM_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * MEMP_DEBUG: Enable debugging in memp.c.
S */
S#ifndef MEMP_DEBUG
S#define MEMP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * SYS_DEBUG: Enable debugging in sys.c.
S */
S#ifndef SYS_DEBUG
S#define SYS_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * TIMERS_DEBUG: Enable debugging in timers.c.
S */
S#ifndef TIMERS_DEBUG
S#define TIMERS_DEBUG                    LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_DEBUG: Enable debugging for TCP.
S */
S#ifndef TCP_DEBUG
S#define TCP_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_INPUT_DEBUG: Enable debugging in tcp_in.c for incoming debug.
S */
S#ifndef TCP_INPUT_DEBUG
S#define TCP_INPUT_DEBUG                 LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_FR_DEBUG: Enable debugging in tcp_in.c for fast retransmit.
S */
S#ifndef TCP_FR_DEBUG
S#define TCP_FR_DEBUG                    LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_RTO_DEBUG: Enable debugging in TCP for retransmit
S * timeout.
S */
S#ifndef TCP_RTO_DEBUG
S#define TCP_RTO_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_CWND_DEBUG: Enable debugging for TCP congestion window.
S */
S#ifndef TCP_CWND_DEBUG
S#define TCP_CWND_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_WND_DEBUG: Enable debugging in tcp_in.c for window updating.
S */
S#ifndef TCP_WND_DEBUG
S#define TCP_WND_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_OUTPUT_DEBUG: Enable debugging in tcp_out.c output functions.
S */
S#ifndef TCP_OUTPUT_DEBUG
S#define TCP_OUTPUT_DEBUG                LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_RST_DEBUG: Enable debugging for TCP with the RST message.
S */
S#ifndef TCP_RST_DEBUG
S#define TCP_RST_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_QLEN_DEBUG: Enable debugging for TCP queue lengths.
S */
S#ifndef TCP_QLEN_DEBUG
S#define TCP_QLEN_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * UDP_DEBUG: Enable debugging in UDP.
S */
S#ifndef UDP_DEBUG
S#define UDP_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * TCPIP_DEBUG: Enable debugging in tcpip.c.
S */
S#ifndef TCPIP_DEBUG
S#define TCPIP_DEBUG                     LWIP_DBG_OFF
S#endif
S
S/**
S * PPP_DEBUG: Enable debugging for PPP.
S */
S#ifndef PPP_DEBUG
S#define PPP_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * SLIP_DEBUG: Enable debugging in slipif.c.
S */
S#ifndef SLIP_DEBUG
S#define SLIP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * DHCP_DEBUG: Enable debugging in dhcp.c.
S */
S#ifndef DHCP_DEBUG
S#define DHCP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * AUTOIP_DEBUG: Enable debugging in autoip.c.
S */
S#ifndef AUTOIP_DEBUG
S#define AUTOIP_DEBUG                    LWIP_DBG_OFF
S#endif
S
S/**
S * SNMP_MSG_DEBUG: Enable debugging for SNMP messages.
S */
S#ifndef SNMP_MSG_DEBUG
S#define SNMP_MSG_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * SNMP_MIB_DEBUG: Enable debugging for SNMP MIBs.
S */
S#ifndef SNMP_MIB_DEBUG
S#define SNMP_MIB_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * DNS_DEBUG: Enable debugging for DNS.
S */
S#ifndef DNS_DEBUG
S#define DNS_DEBUG                       LWIP_DBG_OFF
S#endif
S
N#endif /* __LWIP_OPT_H__ */
L 37 "..\..\lwip\src\include\lwip/debug.h" 2
N
N/** lower two bits indicate debug level
N * - 0 all
N * - 1 warning
N * - 2 serious
N * - 3 severe
N */
N#define LWIP_DBG_LEVEL_ALL     0x00
N#define LWIP_DBG_LEVEL_OFF     LWIP_DBG_LEVEL_ALL /* compatibility define only */
N#define LWIP_DBG_LEVEL_WARNING 0x01 /* bad checksums, dropped packets, ... */
N#define LWIP_DBG_LEVEL_SERIOUS 0x02 /* memory allocation failures, ... */
N#define LWIP_DBG_LEVEL_SEVERE  0x03
N#define LWIP_DBG_MASK_LEVEL    0x03
N
N/** flag for LWIP_DEBUGF to enable that debug message */
N#define LWIP_DBG_ON            0x80U
N/** flag for LWIP_DEBUGF to disable that debug message */
N#define LWIP_DBG_OFF           0x00U
N
N/** flag for LWIP_DEBUGF indicating a tracing message (to follow program flow) */
N#define LWIP_DBG_TRACE         0x40U
N/** flag for LWIP_DEBUGF indicating a state debug message (to follow module states) */
N#define LWIP_DBG_STATE         0x20U
N/** flag for LWIP_DEBUGF indicating newly added code, not thoroughly tested yet */
N#define LWIP_DBG_FRESH         0x10U
N/** flag for LWIP_DEBUGF to halt after printing this debug message */
N#define LWIP_DBG_HALT          0x08U
N
N#ifndef LWIP_NOASSERT
N#define LWIP_ASSERT(message, assertion) do { if(!(assertion)) \
N  LWIP_PLATFORM_ASSERT(message); } while(0)
X#define LWIP_ASSERT(message, assertion) do { if(!(assertion))   LWIP_PLATFORM_ASSERT(message); } while(0)
N#else  /* LWIP_NOASSERT */
S#define LWIP_ASSERT(message, assertion) 
N#endif /* LWIP_NOASSERT */
N
N/** if "expression" isn't true, then print "message" and execute "handler" expression */
N#ifndef LWIP_ERROR
S#define LWIP_ERROR(message, expression, handler) do { if (!(expression)) { \
S  LWIP_PLATFORM_ASSERT(message); handler;}} while(0)
X#define LWIP_ERROR(message, expression, handler) do { if (!(expression)) {   LWIP_PLATFORM_ASSERT(message); handler;}} while(0)
N#endif /* LWIP_ERROR */
N
N#ifdef LWIP_DEBUG
N/** print debug message only if debug message type is enabled...
N *  AND is of correct type AND is at least LWIP_DBG_LEVEL
N */
N#define LWIP_DEBUGF(debug, message) do { \
N                               if ( \
N                                   ((debug) & LWIP_DBG_ON) && \
N                                   ((debug) & LWIP_DBG_TYPES_ON) && \
N                                   ((s16_t)((debug) & LWIP_DBG_MASK_LEVEL) >= LWIP_DBG_MIN_LEVEL)) { \
N                                 LWIP_PLATFORM_DIAG(message); \
N                                 if ((debug) & LWIP_DBG_HALT) { \
N                                   while(1); \
N                                 } \
N                               } \
N                             } while(0)
X#define LWIP_DEBUGF(debug, message) do {                                if (                                    ((debug) & LWIP_DBG_ON) &&                                    ((debug) & LWIP_DBG_TYPES_ON) &&                                    ((s16_t)((debug) & LWIP_DBG_MASK_LEVEL) >= LWIP_DBG_MIN_LEVEL)) {                                  LWIP_PLATFORM_DIAG(message);                                  if ((debug) & LWIP_DBG_HALT) {                                    while(1);                                  }                                }                              } while(0)
N
N#else  /* LWIP_DEBUG */
S#define LWIP_DEBUGF(debug, message) 
N#endif /* LWIP_DEBUG */
N
N#endif /* __LWIP_DEBUG_H__ */
N
L 47 "..\..\lwip\src\include\lwip/opt.h" 2
N
N/*
N   -----------------------------------------------
N   ---------- Platform specific locking ----------
N   -----------------------------------------------
N*/
N
N/**
N * SYS_LIGHTWEIGHT_PROT==1: if you want inter-task protection for certain
N * critical regions during buffer allocation, deallocation and memory
N * allocation and deallocation.
N */
N#ifndef SYS_LIGHTWEIGHT_PROT
N#define SYS_LIGHTWEIGHT_PROT            0
N#endif
N
N/** 
N * NO_SYS==1: Provides VERY minimal functionality. Otherwise,
N * use lwIP facilities.
N */
N#ifndef NO_SYS
S#define NO_SYS                          0
N#endif
N
N/**
N * NO_SYS_NO_TIMERS==1: Drop support for sys_timeout when NO_SYS==1
N * Mainly for compatibility to old versions.
N */
N#ifndef NO_SYS_NO_TIMERS
N#define NO_SYS_NO_TIMERS                0
N#endif
N
N/**
N * MEMCPY: override this if you have a faster implementation at hand than the
N * one included in your C library
N */
N#ifndef MEMCPY
N#define MEMCPY(dst,src,len)             memcpy(dst,src,len)
N#endif
N
N/**
N * SMEMCPY: override this with care! Some compilers (e.g. gcc) can inline a
N * call to memcpy() if the length is known at compile time and is small.
N */
N#ifndef SMEMCPY
N#define SMEMCPY(dst,src,len)            memcpy(dst,src,len)
N#endif
N
N/*
N   ------------------------------------
N   ---------- Memory options ----------
N   ------------------------------------
N*/
N/**
N * MEM_LIBC_MALLOC==1: Use malloc/free/realloc provided by your C-library
N * instead of the lwip internal allocator. Can save code size if you
N * already use it.
N */
N#ifndef MEM_LIBC_MALLOC
N#define MEM_LIBC_MALLOC                 0
N#endif
N
N/**
N* MEMP_MEM_MALLOC==1: Use mem_malloc/mem_free instead of the lwip pool allocator.
N* Especially useful with MEM_LIBC_MALLOC but handle with care regarding execution
N* speed and usage from interrupts!
N*/
N#ifndef MEMP_MEM_MALLOC
N#define MEMP_MEM_MALLOC                 0
N#endif
N
N/**
N * MEM_ALIGNMENT: should be set to the alignment of the CPU
N *    4 byte alignment -> #define MEM_ALIGNMENT 4
N *    2 byte alignment -> #define MEM_ALIGNMENT 2
N */
N#ifndef MEM_ALIGNMENT
S#define MEM_ALIGNMENT                   1
N#endif
N
N/**
N * MEM_SIZE: the size of the heap memory. If the application will send
N * a lot of data that needs to be copied, this should be set high.
N */
N#ifndef MEM_SIZE
S#define MEM_SIZE                        1600
N#endif
N
N/**
N * MEMP_SEPARATE_POOLS: if defined to 1, each pool is placed in its own array.
N * This can be used to individually change the location of each pool.
N * Default is one big array for all pools
N */
N#ifndef MEMP_SEPARATE_POOLS
N#define MEMP_SEPARATE_POOLS             0
N#endif
N
N/**
N * MEMP_OVERFLOW_CHECK: memp overflow protection reserves a configurable
N * amount of bytes before and after each memp element in every pool and fills
N * it with a prominent default value.
N *    MEMP_OVERFLOW_CHECK == 0 no checking
N *    MEMP_OVERFLOW_CHECK == 1 checks each element when it is freed
N *    MEMP_OVERFLOW_CHECK >= 2 checks each element in every pool every time
N *      memp_malloc() or memp_free() is called (useful but slow!)
N */
N#ifndef MEMP_OVERFLOW_CHECK
N#define MEMP_OVERFLOW_CHECK             0
N#endif
N
N/**
N * MEMP_SANITY_CHECK==1: run a sanity check after each memp_free() to make
N * sure that there are no cycles in the linked lists.
N */
N#ifndef MEMP_SANITY_CHECK
N#define MEMP_SANITY_CHECK               0
N#endif
N
N/**
N * MEM_USE_POOLS==1: Use an alternative to malloc() by allocating from a set
N * of memory pools of various sizes. When mem_malloc is called, an element of
N * the smallest pool that can provide the length needed is returned.
N * To use this, MEMP_USE_CUSTOM_POOLS also has to be enabled.
N */
N#ifndef MEM_USE_POOLS
N#define MEM_USE_POOLS                   0
N#endif
N
N/**
N * MEM_USE_POOLS_TRY_BIGGER_POOL==1: if one malloc-pool is empty, try the next
N * bigger pool - WARNING: THIS MIGHT WASTE MEMORY but it can make a system more
N * reliable. */
N#ifndef MEM_USE_POOLS_TRY_BIGGER_POOL
N#define MEM_USE_POOLS_TRY_BIGGER_POOL   0
N#endif
N
N/**
N * MEMP_USE_CUSTOM_POOLS==1: whether to include a user file lwippools.h
N * that defines additional pools beyond the "standard" ones required
N * by lwIP. If you set this to 1, you must have lwippools.h in your 
N * inlude path somewhere. 
N */
N#ifndef MEMP_USE_CUSTOM_POOLS
N#define MEMP_USE_CUSTOM_POOLS           0
N#endif
N
N/**
N * Set this to 1 if you want to free PBUF_RAM pbufs (or call mem_free()) from
N * interrupt context (or another context that doesn't allow waiting for a
N * semaphore).
N * If set to 1, mem_malloc will be protected by a semaphore and SYS_ARCH_PROTECT,
N * while mem_free will only use SYS_ARCH_PROTECT. mem_malloc SYS_ARCH_UNPROTECTs
N * with each loop so that mem_free can run.
N *
N * ATTENTION: As you can see from the above description, this leads to dis-/
N * enabling interrupts often, which can be slow! Also, on low memory, mem_malloc
N * can need longer.
N *
N * If you don't want that, at least for NO_SYS=0, you can still use the following
N * functions to enqueue a deallocation call which then runs in the tcpip_thread
N * context:
N * - pbuf_free_callback(p);
N * - mem_free_callback(m);
N */
N#ifndef LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
N#define LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT 0
N#endif
N
N/*
N   ------------------------------------------------
N   ---------- Internal Memory Pool Sizes ----------
N   ------------------------------------------------
N*/
N/**
N * MEMP_NUM_PBUF: the number of memp struct pbufs (used for PBUF_ROM and PBUF_REF).
N * If the application sends a lot of data out of ROM (or other static memory),
N * this should be set high.
N */
N#ifndef MEMP_NUM_PBUF
N#define MEMP_NUM_PBUF                   16
N#endif
N
N/**
N * MEMP_NUM_RAW_PCB: Number of raw connection PCBs
N * (requires the LWIP_RAW option)
N */
N#ifndef MEMP_NUM_RAW_PCB
N#define MEMP_NUM_RAW_PCB                4
N#endif
N
N/**
N * MEMP_NUM_UDP_PCB: the number of UDP protocol control blocks. One
N * per active UDP "connection".
N * (requires the LWIP_UDP option)
N */
N#ifndef MEMP_NUM_UDP_PCB
N#define MEMP_NUM_UDP_PCB                4
N#endif
N
N/**
N * MEMP_NUM_TCP_PCB: the number of simulatenously active TCP connections.
N * (requires the LWIP_TCP option)
N */
N#ifndef MEMP_NUM_TCP_PCB
N#define MEMP_NUM_TCP_PCB                5
N#endif
N
N/**
N * MEMP_NUM_TCP_PCB_LISTEN: the number of listening TCP connections.
N * (requires the LWIP_TCP option)
N */
N#ifndef MEMP_NUM_TCP_PCB_LISTEN
N#define MEMP_NUM_TCP_PCB_LISTEN         8
N#endif
N
N/**
N * MEMP_NUM_TCP_SEG: the number of simultaneously queued TCP segments.
N * (requires the LWIP_TCP option)
N */
N#ifndef MEMP_NUM_TCP_SEG
N#define MEMP_NUM_TCP_SEG                16
N#endif
N
N/**
N * MEMP_NUM_REASSDATA: the number of IP packets simultaneously queued for
N * reassembly (whole packets, not fragments!)
N */
N#ifndef MEMP_NUM_REASSDATA
N#define MEMP_NUM_REASSDATA              5
N#endif
N
N/**
N * MEMP_NUM_FRAG_PBUF: the number of IP fragments simultaneously sent
N * (fragments, not whole packets!).
N * This is only used with IP_FRAG_USES_STATIC_BUF==0 and
N * LWIP_NETIF_TX_SINGLE_PBUF==0 and only has to be > 1 with DMA-enabled MACs
N * where the packet is not yet sent when netif->output returns.
N */
N#ifndef MEMP_NUM_FRAG_PBUF
N#define MEMP_NUM_FRAG_PBUF              15
N#endif
N
N/**
N * MEMP_NUM_ARP_QUEUE: the number of simulateously queued outgoing
N * packets (pbufs) that are waiting for an ARP request (to resolve
N * their destination address) to finish.
N * (requires the ARP_QUEUEING option)
N */
N#ifndef MEMP_NUM_ARP_QUEUE
N#define MEMP_NUM_ARP_QUEUE              30
N#endif
N
N/**
N * MEMP_NUM_IGMP_GROUP: The number of multicast groups whose network interfaces
N * can be members et the same time (one per netif - allsystems group -, plus one
N * per netif membership).
N * (requires the LWIP_IGMP option)
N */
N#ifndef MEMP_NUM_IGMP_GROUP
N#define MEMP_NUM_IGMP_GROUP             8
N#endif
N
N/**
N * MEMP_NUM_SYS_TIMEOUT: the number of simulateously active timeouts.
N * (requires NO_SYS==0)
N * The default number of timeouts is calculated here for all enabled modules.
N * The formula expects settings to be either '0' or '1'.
N */
N#ifndef MEMP_NUM_SYS_TIMEOUT
N#define MEMP_NUM_SYS_TIMEOUT            (LWIP_TCP + IP_REASSEMBLY + LWIP_ARP + (2*LWIP_DHCP) + LWIP_AUTOIP + LWIP_IGMP + LWIP_DNS + PPP_SUPPORT)
N#endif
N
N/**
N * MEMP_NUM_NETBUF: the number of struct netbufs.
N * (only needed if you use the sequential API, like api_lib.c)
N */
N#ifndef MEMP_NUM_NETBUF
N#define MEMP_NUM_NETBUF                 2
N#endif
N
N/**
N * MEMP_NUM_NETCONN: the number of struct netconns.
N * (only needed if you use the sequential API, like api_lib.c)
N */
N#ifndef MEMP_NUM_NETCONN
N#define MEMP_NUM_NETCONN                4
N#endif
N
N/**
N * MEMP_NUM_TCPIP_MSG_API: the number of struct tcpip_msg, which are used
N * for callback/timeout API communication. 
N * (only needed if you use tcpip.c)
N */
N#ifndef MEMP_NUM_TCPIP_MSG_API
N#define MEMP_NUM_TCPIP_MSG_API          8
N#endif
N
N/**
N * MEMP_NUM_TCPIP_MSG_INPKT: the number of struct tcpip_msg, which are used
N * for incoming packets. 
N * (only needed if you use tcpip.c)
N */
N#ifndef MEMP_NUM_TCPIP_MSG_INPKT
N#define MEMP_NUM_TCPIP_MSG_INPKT        8
N#endif
N
N/**
N * MEMP_NUM_SNMP_NODE: the number of leafs in the SNMP tree.
N */
N#ifndef MEMP_NUM_SNMP_NODE
N#define MEMP_NUM_SNMP_NODE              50
N#endif
N
N/**
N * MEMP_NUM_SNMP_ROOTNODE: the number of branches in the SNMP tree.
N * Every branch has one leaf (MEMP_NUM_SNMP_NODE) at least!
N */
N#ifndef MEMP_NUM_SNMP_ROOTNODE
N#define MEMP_NUM_SNMP_ROOTNODE          30
N#endif
N
N/**
N * MEMP_NUM_SNMP_VARBIND: the number of concurrent requests (does not have to
N * be changed normally) - 2 of these are used per request (1 for input,
N * 1 for output)
N */
N#ifndef MEMP_NUM_SNMP_VARBIND
N#define MEMP_NUM_SNMP_VARBIND           2
N#endif
N
N/**
N * MEMP_NUM_SNMP_VALUE: the number of OID or values concurrently used
N * (does not have to be changed normally) - 3 of these are used per request
N * (1 for the value read and 2 for OIDs - input and output)
N */
N#ifndef MEMP_NUM_SNMP_VALUE
N#define MEMP_NUM_SNMP_VALUE             3
N#endif
N
N/**
N * MEMP_NUM_NETDB: the number of concurrently running lwip_addrinfo() calls
N * (before freeing the corresponding memory using lwip_freeaddrinfo()).
N */
N#ifndef MEMP_NUM_NETDB
N#define MEMP_NUM_NETDB                  1
N#endif
N
N/**
N * MEMP_NUM_LOCALHOSTLIST: the number of host entries in the local host list
N * if DNS_LOCAL_HOSTLIST_IS_DYNAMIC==1.
N */
N#ifndef MEMP_NUM_LOCALHOSTLIST
N#define MEMP_NUM_LOCALHOSTLIST          1
N#endif
N
N/**
N * MEMP_NUM_PPPOE_INTERFACES: the number of concurrently active PPPoE
N * interfaces (only used with PPPOE_SUPPORT==1)
N */
N#ifndef MEMP_NUM_PPPOE_INTERFACES
N#define MEMP_NUM_PPPOE_INTERFACES       1
N#endif
N
N/**
N * PBUF_POOL_SIZE: the number of buffers in the pbuf pool. 
N */
N#ifndef PBUF_POOL_SIZE
N#define PBUF_POOL_SIZE                  16
N#endif
N
N/*
N   ---------------------------------
N   ---------- ARP options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_ARP==1: Enable ARP functionality.
N */
N#ifndef LWIP_ARP
N#define LWIP_ARP                        1
N#endif
N
N/**
N * ARP_TABLE_SIZE: Number of active MAC-IP address pairs cached.
N */
N#ifndef ARP_TABLE_SIZE
N#define ARP_TABLE_SIZE                  10
N#endif
N
N/**
N * ARP_QUEUEING==1: Multiple outgoing packets are queued during hardware address
N * resolution. By default, only the most recent packet is queued per IP address.
N * This is sufficient for most protocols and mainly reduces TCP connection
N * startup time. Set this to 1 if you know your application sends more than one
N * packet in a row to an IP address that is not in the ARP cache.
N */
N#ifndef ARP_QUEUEING
N#define ARP_QUEUEING                    0
N#endif
N
N/**
N * ETHARP_TRUST_IP_MAC==1: Incoming IP packets cause the ARP table to be
N * updated with the source MAC and IP addresses supplied in the packet.
N * You may want to disable this if you do not trust LAN peers to have the
N * correct addresses, or as a limited approach to attempt to handle
N * spoofing. If disabled, lwIP will need to make a new ARP request if
N * the peer is not already in the ARP table, adding a little latency.
N * The peer *is* in the ARP table if it requested our address before.
N * Also notice that this slows down input processing of every IP packet!
N */
N#ifndef ETHARP_TRUST_IP_MAC
N#define ETHARP_TRUST_IP_MAC             0
N#endif
N
N/**
N * ETHARP_SUPPORT_VLAN==1: support receiving ethernet packets with VLAN header.
N * Additionally, you can define ETHARP_VLAN_CHECK to an u16_t VLAN ID to check.
N * If ETHARP_VLAN_CHECK is defined, only VLAN-traffic for this VLAN is accepted.
N * If ETHARP_VLAN_CHECK is not defined, all traffic is accepted.
N * Alternatively, define a function/define ETHARP_VLAN_CHECK_FN(eth_hdr, vlan)
N * that returns 1 to accept a packet or 0 to drop a packet.
N */
N#ifndef ETHARP_SUPPORT_VLAN
N#define ETHARP_SUPPORT_VLAN             0
N#endif
N
N/** LWIP_ETHERNET==1: enable ethernet support for PPPoE even though ARP
N * might be disabled
N */
N#ifndef LWIP_ETHERNET
N#define LWIP_ETHERNET                   (LWIP_ARP || PPPOE_SUPPORT)
N#endif
N
N/** ETH_PAD_SIZE: number of bytes added before the ethernet header to ensure
N * alignment of payload after that header. Since the header is 14 bytes long,
N * without this padding e.g. addresses in the IP header will not be aligned
N * on a 32-bit boundary, so setting this to 2 can speed up 32-bit-platforms.
N */
N#ifndef ETH_PAD_SIZE
S#define ETH_PAD_SIZE                    0
N#endif
N
N/** ETHARP_SUPPORT_STATIC_ENTRIES==1: enable code to support static ARP table
N * entries (using etharp_add_static_entry/etharp_remove_static_entry).
N */
N#ifndef ETHARP_SUPPORT_STATIC_ENTRIES
N#define ETHARP_SUPPORT_STATIC_ENTRIES   0
N#endif
N
N
N/*
N   --------------------------------
N   ---------- IP options ----------
N   --------------------------------
N*/
N/**
N * IP_FORWARD==1: Enables the ability to forward IP packets across network
N * interfaces. If you are going to run lwIP on a device with only one network
N * interface, define this to 0.
N */
N#ifndef IP_FORWARD
N#define IP_FORWARD                      0
N#endif
N
N/**
N * IP_OPTIONS_ALLOWED: Defines the behavior for IP options.
N *      IP_OPTIONS_ALLOWED==0: All packets with IP options are dropped.
N *      IP_OPTIONS_ALLOWED==1: IP options are allowed (but not parsed).
N */
N#ifndef IP_OPTIONS_ALLOWED
N#define IP_OPTIONS_ALLOWED              1
N#endif
N
N/**
N * IP_REASSEMBLY==1: Reassemble incoming fragmented IP packets. Note that
N * this option does not affect outgoing packet sizes, which can be controlled
N * via IP_FRAG.
N */
N#ifndef IP_REASSEMBLY
N#define IP_REASSEMBLY                   1
N#endif
N
N/**
N * IP_FRAG==1: Fragment outgoing IP packets if their size exceeds MTU. Note
N * that this option does not affect incoming packet sizes, which can be
N * controlled via IP_REASSEMBLY.
N */
N#ifndef IP_FRAG
N#define IP_FRAG                         1
N#endif
N
N/**
N * IP_REASS_MAXAGE: Maximum time (in multiples of IP_TMR_INTERVAL - so seconds, normally)
N * a fragmented IP packet waits for all fragments to arrive. If not all fragments arrived
N * in this time, the whole packet is discarded.
N */
N#ifndef IP_REASS_MAXAGE
N#define IP_REASS_MAXAGE                 3
N#endif
N
N/**
N * IP_REASS_MAX_PBUFS: Total maximum amount of pbufs waiting to be reassembled.
N * Since the received pbufs are enqueued, be sure to configure
N * PBUF_POOL_SIZE > IP_REASS_MAX_PBUFS so that the stack is still able to receive
N * packets even if the maximum amount of fragments is enqueued for reassembly!
N */
N#ifndef IP_REASS_MAX_PBUFS
N#define IP_REASS_MAX_PBUFS              10
N#endif
N
N/**
N * IP_FRAG_USES_STATIC_BUF==1: Use a static MTU-sized buffer for IP
N * fragmentation. Otherwise pbufs are allocated and reference the original
N * packet data to be fragmented (or with LWIP_NETIF_TX_SINGLE_PBUF==1,
N * new PBUF_RAM pbufs are used for fragments).
N * ATTENTION: IP_FRAG_USES_STATIC_BUF==1 may not be used for DMA-enabled MACs!
N */
N#ifndef IP_FRAG_USES_STATIC_BUF
N#define IP_FRAG_USES_STATIC_BUF         0
N#endif
N
N/**
N * IP_FRAG_MAX_MTU: Assumed max MTU on any interface for IP frag buffer
N * (requires IP_FRAG_USES_STATIC_BUF==1)
N */
N#if IP_FRAG_USES_STATIC_BUF && !defined(IP_FRAG_MAX_MTU)
X#if 0 && !0L
S#define IP_FRAG_MAX_MTU                 1500
N#endif
N
N/**
N * IP_DEFAULT_TTL: Default value for Time-To-Live used by transport layers.
N */
N#ifndef IP_DEFAULT_TTL
N#define IP_DEFAULT_TTL                  255
N#endif
N
N/**
N * IP_SOF_BROADCAST=1: Use the SOF_BROADCAST field to enable broadcast
N * filter per pcb on udp and raw send operations. To enable broadcast filter
N * on recv operations, you also have to set IP_SOF_BROADCAST_RECV=1.
N */
N#ifndef IP_SOF_BROADCAST
N#define IP_SOF_BROADCAST                0
N#endif
N
N/**
N * IP_SOF_BROADCAST_RECV (requires IP_SOF_BROADCAST=1) enable the broadcast
N * filter on recv operations.
N */
N#ifndef IP_SOF_BROADCAST_RECV
N#define IP_SOF_BROADCAST_RECV           0
N#endif
N
N/**
N * IP_FORWARD_ALLOW_TX_ON_RX_NETIF==1: allow ip_forward() to send packets back
N * out on the netif where it was received. This should only be used for
N * wireless networks.
N * ATTENTION: When this is 1, make sure your netif driver correctly marks incoming
N * link-layer-broadcast/multicast packets as such using the corresponding pbuf flags!
N */
N#ifndef IP_FORWARD_ALLOW_TX_ON_RX_NETIF
N#define IP_FORWARD_ALLOW_TX_ON_RX_NETIF 0
N#endif
N
N/**
N * LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS==1: randomize the local port for the first
N * local TCP/UDP pcb (default==0). This can prevent creating predictable port
N * numbers after booting a device.
N */
N#ifndef LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS
N#define LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 0
N#endif
N
N/*
N   ----------------------------------
N   ---------- ICMP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_ICMP==1: Enable ICMP module inside the IP stack.
N * Be careful, disable that make your product non-compliant to RFC1122
N */
N#ifndef LWIP_ICMP
N#define LWIP_ICMP                       1
N#endif
N
N/**
N * ICMP_TTL: Default value for Time-To-Live used by ICMP packets.
N */
N#ifndef ICMP_TTL
N#define ICMP_TTL                       (IP_DEFAULT_TTL)
N#endif
N
N/**
N * LWIP_BROADCAST_PING==1: respond to broadcast pings (default is unicast only)
N */
N#ifndef LWIP_BROADCAST_PING
N#define LWIP_BROADCAST_PING             0
N#endif
N
N/**
N * LWIP_MULTICAST_PING==1: respond to multicast pings (default is unicast only)
N */
N#ifndef LWIP_MULTICAST_PING
N#define LWIP_MULTICAST_PING             0
N#endif
N
N/*
N   ---------------------------------
N   ---------- RAW options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
N */
N#ifndef LWIP_RAW
N#define LWIP_RAW                        1
N#endif
N
N/**
N * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
N */
N#ifndef RAW_TTL
N#define RAW_TTL                        (IP_DEFAULT_TTL)
N#endif
N
N/*
N   ----------------------------------
N   ---------- DHCP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_DHCP==1: Enable DHCP module.
N */
N#ifndef LWIP_DHCP
N#define LWIP_DHCP                       0
N#endif
N
N/**
N * DHCP_DOES_ARP_CHECK==1: Do an ARP check on the offered address.
N */
N#ifndef DHCP_DOES_ARP_CHECK
N#define DHCP_DOES_ARP_CHECK             ((LWIP_DHCP) && (LWIP_ARP))
N#endif
N
N/*
N   ------------------------------------
N   ---------- AUTOIP options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_AUTOIP==1: Enable AUTOIP module.
N */
N#ifndef LWIP_AUTOIP
N#define LWIP_AUTOIP                     0
N#endif
N
N/**
N * LWIP_DHCP_AUTOIP_COOP==1: Allow DHCP and AUTOIP to be both enabled on
N * the same interface at the same time.
N */
N#ifndef LWIP_DHCP_AUTOIP_COOP
N#define LWIP_DHCP_AUTOIP_COOP           0
N#endif
N
N/**
N * LWIP_DHCP_AUTOIP_COOP_TRIES: Set to the number of DHCP DISCOVER probes
N * that should be sent before falling back on AUTOIP. This can be set
N * as low as 1 to get an AutoIP address very quickly, but you should
N * be prepared to handle a changing IP address when DHCP overrides
N * AutoIP.
N */
N#ifndef LWIP_DHCP_AUTOIP_COOP_TRIES
N#define LWIP_DHCP_AUTOIP_COOP_TRIES     9
N#endif
N
N/*
N   ----------------------------------
N   ---------- SNMP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_SNMP==1: Turn on SNMP module. UDP must be available for SNMP
N * transport.
N */
N#ifndef LWIP_SNMP
N#define LWIP_SNMP                       0
N#endif
N
N/**
N * SNMP_CONCURRENT_REQUESTS: Number of concurrent requests the module will
N * allow. At least one request buffer is required.
N * Does not have to be changed unless external MIBs answer request asynchronously
N */
N#ifndef SNMP_CONCURRENT_REQUESTS
N#define SNMP_CONCURRENT_REQUESTS        1
N#endif
N
N/**
N * SNMP_TRAP_DESTINATIONS: Number of trap destinations. At least one trap
N * destination is required
N */
N#ifndef SNMP_TRAP_DESTINATIONS
N#define SNMP_TRAP_DESTINATIONS          1
N#endif
N
N/**
N * SNMP_PRIVATE_MIB: 
N * When using a private MIB, you have to create a file 'private_mib.h' that contains
N * a 'struct mib_array_node mib_private' which contains your MIB.
N */
N#ifndef SNMP_PRIVATE_MIB
N#define SNMP_PRIVATE_MIB                0
N#endif
N
N/**
N * Only allow SNMP write actions that are 'safe' (e.g. disabeling netifs is not
N * a safe action and disabled when SNMP_SAFE_REQUESTS = 1).
N * Unsafe requests are disabled by default!
N */
N#ifndef SNMP_SAFE_REQUESTS
N#define SNMP_SAFE_REQUESTS              1
N#endif
N
N/**
N * The maximum length of strings used. This affects the size of
N * MEMP_SNMP_VALUE elements.
N */
N#ifndef SNMP_MAX_OCTET_STRING_LEN
N#define SNMP_MAX_OCTET_STRING_LEN       127
N#endif
N
N/**
N * The maximum depth of the SNMP tree.
N * With private MIBs enabled, this depends on your MIB!
N * This affects the size of MEMP_SNMP_VALUE elements.
N */
N#ifndef SNMP_MAX_TREE_DEPTH
N#define SNMP_MAX_TREE_DEPTH             15
N#endif
N
N/**
N * The size of the MEMP_SNMP_VALUE elements, normally calculated from
N * SNMP_MAX_OCTET_STRING_LEN and SNMP_MAX_TREE_DEPTH.
N */
N#ifndef SNMP_MAX_VALUE_SIZE
N#define SNMP_MAX_VALUE_SIZE             LWIP_MAX((SNMP_MAX_OCTET_STRING_LEN)+1, sizeof(s32_t)*(SNMP_MAX_TREE_DEPTH))
N#endif
N
N/*
N   ----------------------------------
N   ---------- IGMP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_IGMP==1: Turn on IGMP module. 
N */
N#ifndef LWIP_IGMP
N#define LWIP_IGMP                       0
N#endif
N
N/*
N   ----------------------------------
N   ---------- DNS options -----------
N   ----------------------------------
N*/
N/**
N * LWIP_DNS==1: Turn on DNS module. UDP must be available for DNS
N * transport.
N */
N#ifndef LWIP_DNS
N#define LWIP_DNS                        0
N#endif
N
N/** DNS maximum number of entries to maintain locally. */
N#ifndef DNS_TABLE_SIZE
N#define DNS_TABLE_SIZE                  4
N#endif
N
N/** DNS maximum host name length supported in the name table. */
N#ifndef DNS_MAX_NAME_LENGTH
N#define DNS_MAX_NAME_LENGTH             256
N#endif
N
N/** The maximum of DNS servers */
N#ifndef DNS_MAX_SERVERS
N#define DNS_MAX_SERVERS                 2
N#endif
N
N/** DNS do a name checking between the query and the response. */
N#ifndef DNS_DOES_NAME_CHECK
N#define DNS_DOES_NAME_CHECK             1
N#endif
N
N/** DNS message max. size. Default value is RFC compliant. */
N#ifndef DNS_MSG_SIZE
N#define DNS_MSG_SIZE                    512
N#endif
N
N/** DNS_LOCAL_HOSTLIST: Implements a local host-to-address list. If enabled,
N *  you have to define
N *    #define DNS_LOCAL_HOSTLIST_INIT {{"host1", 0x123}, {"host2", 0x234}}
N *  (an array of structs name/address, where address is an u32_t in network
N *  byte order).
N *
N *  Instead, you can also use an external function:
N *  #define DNS_LOOKUP_LOCAL_EXTERN(x) extern u32_t my_lookup_function(const char *name)
N *  that returns the IP address or INADDR_NONE if not found.
N */
N#ifndef DNS_LOCAL_HOSTLIST
N#define DNS_LOCAL_HOSTLIST              0
N#endif /* DNS_LOCAL_HOSTLIST */
N
N/** If this is turned on, the local host-list can be dynamically changed
N *  at runtime. */
N#ifndef DNS_LOCAL_HOSTLIST_IS_DYNAMIC
N#define DNS_LOCAL_HOSTLIST_IS_DYNAMIC   0
N#endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
N
N/*
N   ---------------------------------
N   ---------- UDP options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_UDP==1: Turn on UDP.
N */
N#ifndef LWIP_UDP
N#define LWIP_UDP                        1
N#endif
N
N/**
N * LWIP_UDPLITE==1: Turn on UDP-Lite. (Requires LWIP_UDP)
N */
N#ifndef LWIP_UDPLITE
N#define LWIP_UDPLITE                    0
N#endif
N
N/**
N * UDP_TTL: Default Time-To-Live value.
N */
N#ifndef UDP_TTL
N#define UDP_TTL                         (IP_DEFAULT_TTL)
N#endif
N
N/**
N * LWIP_NETBUF_RECVINFO==1: append destination addr and port to every netbuf.
N */
N#ifndef LWIP_NETBUF_RECVINFO
N#define LWIP_NETBUF_RECVINFO            0
N#endif
N
N/*
N   ---------------------------------
N   ---------- TCP options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_TCP==1: Turn on TCP.
N */
N#ifndef LWIP_TCP
N#define LWIP_TCP                        1
N#endif
N
N/**
N * TCP_TTL: Default Time-To-Live value.
N */
N#ifndef TCP_TTL
N#define TCP_TTL                         (IP_DEFAULT_TTL)
N#endif
N
N/**
N * TCP_WND: The size of a TCP window.  This must be at least 
N * (2 * TCP_MSS) for things to work well
N */
N#ifndef TCP_WND
N#define TCP_WND                         (4 * TCP_MSS)
N#endif 
N
N/**
N * TCP_MAXRTX: Maximum number of retransmissions of data segments.
N */
N#ifndef TCP_MAXRTX
N#define TCP_MAXRTX                      12
N#endif
N
N/**
N * TCP_SYNMAXRTX: Maximum number of retransmissions of SYN segments.
N */
N#ifndef TCP_SYNMAXRTX
N#define TCP_SYNMAXRTX                   6
N#endif
N
N/**
N * TCP_QUEUE_OOSEQ==1: TCP will queue segments that arrive out of order.
N * Define to 0 if your device is low on memory.
N */
N#ifndef TCP_QUEUE_OOSEQ
N#define TCP_QUEUE_OOSEQ                 (LWIP_TCP)
N#endif
N
N/**
N * TCP_MSS: TCP Maximum segment size. (default is 536, a conservative default,
N * you might want to increase this.)
N * For the receive side, this MSS is advertised to the remote side
N * when opening a connection. For the transmit size, this MSS sets
N * an upper limit on the MSS advertised by the remote host.
N */
N#ifndef TCP_MSS
S#define TCP_MSS                         536
N#endif
N
N/**
N * TCP_CALCULATE_EFF_SEND_MSS: "The maximum size of a segment that TCP really
N * sends, the 'effective send MSS,' MUST be the smaller of the send MSS (which
N * reflects the available reassembly buffer size at the remote host) and the
N * largest size permitted by the IP layer" (RFC 1122)
N * Setting this to 1 enables code that checks TCP_MSS against the MTU of the
N * netif used for a connection and limits the MSS if it would be too big otherwise.
N */
N#ifndef TCP_CALCULATE_EFF_SEND_MSS
N#define TCP_CALCULATE_EFF_SEND_MSS      1
N#endif
N
N
N/**
N * TCP_SND_BUF: TCP sender buffer space (bytes).
N * To achieve good performance, this should be at least 2 * TCP_MSS.
N */
N#ifndef TCP_SND_BUF
S#define TCP_SND_BUF                     (2 * TCP_MSS)
N#endif
N
N/**
N * TCP_SND_QUEUELEN: TCP sender buffer space (pbufs). This must be at least
N * as much as (2 * TCP_SND_BUF/TCP_MSS) for things to work.
N */
N#ifndef TCP_SND_QUEUELEN
N#define TCP_SND_QUEUELEN                ((4 * (TCP_SND_BUF) + (TCP_MSS - 1))/(TCP_MSS))
N#endif
N
N/**
N * TCP_SNDLOWAT: TCP writable space (bytes). This must be less than
N * TCP_SND_BUF. It is the amount of space which must be available in the
N * TCP snd_buf for select to return writable (combined with TCP_SNDQUEUELOWAT).
N */
N#ifndef TCP_SNDLOWAT
N#define TCP_SNDLOWAT                    LWIP_MIN(LWIP_MAX(((TCP_SND_BUF)/2), (2 * TCP_MSS) + 1), (TCP_SND_BUF) - 1)
N#endif
N
N/**
N * TCP_SNDQUEUELOWAT: TCP writable bufs (pbuf count). This must be less
N * than TCP_SND_QUEUELEN. If the number of pbufs queued on a pcb drops below
N * this number, select returns writable (combined with TCP_SNDLOWAT).
N */
N#ifndef TCP_SNDQUEUELOWAT
N#define TCP_SNDQUEUELOWAT               LWIP_MAX(((TCP_SND_QUEUELEN)/2), 5)
N#endif
N
N/**
N * TCP_OOSEQ_MAX_BYTES: The maximum number of bytes queued on ooseq per pcb.
N * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
N */
N#ifndef TCP_OOSEQ_MAX_BYTES
N#define TCP_OOSEQ_MAX_BYTES             0
N#endif
N
N/**
N * TCP_OOSEQ_MAX_PBUFS: The maximum number of pbufs queued on ooseq per pcb.
N * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
N */
N#ifndef TCP_OOSEQ_MAX_PBUFS
N#define TCP_OOSEQ_MAX_PBUFS             0
N#endif
N
N/**
N * TCP_LISTEN_BACKLOG: Enable the backlog option for tcp listen pcb.
N */
N#ifndef TCP_LISTEN_BACKLOG
N#define TCP_LISTEN_BACKLOG              0
N#endif
N
N/**
N * The maximum allowed backlog for TCP listen netconns.
N * This backlog is used unless another is explicitly specified.
N * 0xff is the maximum (u8_t).
N */
N#ifndef TCP_DEFAULT_LISTEN_BACKLOG
N#define TCP_DEFAULT_LISTEN_BACKLOG      0xff
N#endif
N
N/**
N * TCP_OVERSIZE: The maximum number of bytes that tcp_write may
N * allocate ahead of time in an attempt to create shorter pbuf chains
N * for transmission. The meaningful range is 0 to TCP_MSS. Some
N * suggested values are:
N *
N * 0:         Disable oversized allocation. Each tcp_write() allocates a new
N              pbuf (old behaviour).
N * 1:         Allocate size-aligned pbufs with minimal excess. Use this if your
N *            scatter-gather DMA requires aligned fragments.
N * 128:       Limit the pbuf/memory overhead to 20%.
N * TCP_MSS:   Try to create unfragmented TCP packets.
N * TCP_MSS/4: Try to create 4 fragments or less per TCP packet.
N */
N#ifndef TCP_OVERSIZE
N#define TCP_OVERSIZE                    TCP_MSS
N#endif
N
N/**
N * LWIP_TCP_TIMESTAMPS==1: support the TCP timestamp option.
N */
N#ifndef LWIP_TCP_TIMESTAMPS
N#define LWIP_TCP_TIMESTAMPS             0
N#endif
N
N/**
N * TCP_WND_UPDATE_THRESHOLD: difference in window to trigger an
N * explicit window update
N */
N#ifndef TCP_WND_UPDATE_THRESHOLD
N#define TCP_WND_UPDATE_THRESHOLD   (TCP_WND / 4)
N#endif
N
N/**
N * LWIP_EVENT_API and LWIP_CALLBACK_API: Only one of these should be set to 1.
N *     LWIP_EVENT_API==1: The user defines lwip_tcp_event() to receive all
N *         events (accept, sent, etc) that happen in the system.
N *     LWIP_CALLBACK_API==1: The PCB callback function is called directly
N *         for the event. This is the default.
N */
N#if !defined(LWIP_EVENT_API) && !defined(LWIP_CALLBACK_API)
X#if !0L && !0L
N#define LWIP_EVENT_API                  0
N#define LWIP_CALLBACK_API               1
N#endif
N
N
N/*
N   ----------------------------------
N   ---------- Pbuf options ----------
N   ----------------------------------
N*/
N/**
N * PBUF_LINK_HLEN: the number of bytes that should be allocated for a
N * link level header. The default is 14, the standard value for
N * Ethernet.
N */
N#ifndef PBUF_LINK_HLEN
N#define PBUF_LINK_HLEN                  (14 + ETH_PAD_SIZE)
N#endif
N
N/**
N * PBUF_POOL_BUFSIZE: the size of each pbuf in the pbuf pool. The default is
N * designed to accomodate single full size TCP frame in one pbuf, including
N * TCP_MSS, IP header, and link header.
N */
N#ifndef PBUF_POOL_BUFSIZE
N#define PBUF_POOL_BUFSIZE               LWIP_MEM_ALIGN_SIZE(TCP_MSS+40+PBUF_LINK_HLEN)
N#endif
N
N/*
N   ------------------------------------------------
N   ---------- Network Interfaces options ----------
N   ------------------------------------------------
N*/
N/**
N * LWIP_NETIF_HOSTNAME==1: use DHCP_OPTION_HOSTNAME with netif's hostname
N * field.
N */
N#ifndef LWIP_NETIF_HOSTNAME
N#define LWIP_NETIF_HOSTNAME             0
N#endif
N
N/**
N * LWIP_NETIF_API==1: Support netif api (in netifapi.c)
N */
N#ifndef LWIP_NETIF_API
N#define LWIP_NETIF_API                  0
N#endif
N
N/**
N * LWIP_NETIF_STATUS_CALLBACK==1: Support a callback function whenever an interface
N * changes its up/down status (i.e., due to DHCP IP acquistion)
N */
N#ifndef LWIP_NETIF_STATUS_CALLBACK
N#define LWIP_NETIF_STATUS_CALLBACK      0
N#endif
N
N/**
N * LWIP_NETIF_LINK_CALLBACK==1: Support a callback function from an interface
N * whenever the link changes (i.e., link down)
N */
N#ifndef LWIP_NETIF_LINK_CALLBACK
N#define LWIP_NETIF_LINK_CALLBACK        0
N#endif
N
N/**
N * LWIP_NETIF_REMOVE_CALLBACK==1: Support a callback function that is called
N * when a netif has been removed
N */
N#ifndef LWIP_NETIF_REMOVE_CALLBACK
N#define LWIP_NETIF_REMOVE_CALLBACK      0
N#endif
N
N/**
N * LWIP_NETIF_HWADDRHINT==1: Cache link-layer-address hints (e.g. table
N * indices) in struct netif. TCP and UDP can make use of this to prevent
N * scanning the ARP table for every sent packet. While this is faster for big
N * ARP tables or many concurrent connections, it might be counterproductive
N * if you have a tiny ARP table or if there never are concurrent connections.
N */
N#ifndef LWIP_NETIF_HWADDRHINT
N#define LWIP_NETIF_HWADDRHINT           0
N#endif
N
N/**
N * LWIP_NETIF_LOOPBACK==1: Support sending packets with a destination IP
N * address equal to the netif IP address, looping them back up the stack.
N */
N#ifndef LWIP_NETIF_LOOPBACK
N#define LWIP_NETIF_LOOPBACK             0
N#endif
N
N/**
N * LWIP_LOOPBACK_MAX_PBUFS: Maximum number of pbufs on queue for loopback
N * sending for each netif (0 = disabled)
N */
N#ifndef LWIP_LOOPBACK_MAX_PBUFS
N#define LWIP_LOOPBACK_MAX_PBUFS         0
N#endif
N
N/**
N * LWIP_NETIF_LOOPBACK_MULTITHREADING: Indicates whether threading is enabled in
N * the system, as netifs must change how they behave depending on this setting
N * for the LWIP_NETIF_LOOPBACK option to work.
N * Setting this is needed to avoid reentering non-reentrant functions like
N * tcp_input().
N *    LWIP_NETIF_LOOPBACK_MULTITHREADING==1: Indicates that the user is using a
N *       multithreaded environment like tcpip.c. In this case, netif->input()
N *       is called directly.
N *    LWIP_NETIF_LOOPBACK_MULTITHREADING==0: Indicates a polling (or NO_SYS) setup.
N *       The packets are put on a list and netif_poll() must be called in
N *       the main application loop.
N */
N#ifndef LWIP_NETIF_LOOPBACK_MULTITHREADING
N#define LWIP_NETIF_LOOPBACK_MULTITHREADING    (!NO_SYS)
N#endif
N
N/**
N * LWIP_NETIF_TX_SINGLE_PBUF: if this is set to 1, lwIP tries to put all data
N * to be sent into one single pbuf. This is for compatibility with DMA-enabled
N * MACs that do not support scatter-gather.
N * Beware that this might involve CPU-memcpy before transmitting that would not
N * be needed without this flag! Use this only if you need to!
N *
N * @todo: TCP and IP-frag do not work with this, yet:
N */
N#ifndef LWIP_NETIF_TX_SINGLE_PBUF
N#define LWIP_NETIF_TX_SINGLE_PBUF             0
N#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
N
N/*
N   ------------------------------------
N   ---------- LOOPIF options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_HAVE_LOOPIF==1: Support loop interface (127.0.0.1) and loopif.c
N */
N#ifndef LWIP_HAVE_LOOPIF
S#define LWIP_HAVE_LOOPIF                0
N#endif
N
N/*
N   ------------------------------------
N   ---------- SLIPIF options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_HAVE_SLIPIF==1: Support slip interface and slipif.c
N */
N#ifndef LWIP_HAVE_SLIPIF
N#define LWIP_HAVE_SLIPIF                0
N#endif
N
N/*
N   ------------------------------------
N   ---------- Thread options ----------
N   ------------------------------------
N*/
N/**
N * TCPIP_THREAD_NAME: The name assigned to the main tcpip thread.
N */
N#ifndef TCPIP_THREAD_NAME
N#define TCPIP_THREAD_NAME              "tcpip_thread"
N#endif
N
N/**
N * TCPIP_THREAD_STACKSIZE: The stack size used by the main tcpip thread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef TCPIP_THREAD_STACKSIZE
N#define TCPIP_THREAD_STACKSIZE          0
N#endif
N
N/**
N * TCPIP_THREAD_PRIO: The priority assigned to the main tcpip thread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef TCPIP_THREAD_PRIO
N#define TCPIP_THREAD_PRIO               1
N#endif
N
N/**
N * TCPIP_MBOX_SIZE: The mailbox size for the tcpip thread messages
N * The queue size value itself is platform-dependent, but is passed to
N * sys_mbox_new() when tcpip_init is called.
N */
N#ifndef TCPIP_MBOX_SIZE
N#define TCPIP_MBOX_SIZE                 0
N#endif
N
N/**
N * SLIPIF_THREAD_NAME: The name assigned to the slipif_loop thread.
N */
N#ifndef SLIPIF_THREAD_NAME
N#define SLIPIF_THREAD_NAME             "slipif_loop"
N#endif
N
N/**
N * SLIP_THREAD_STACKSIZE: The stack size used by the slipif_loop thread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef SLIPIF_THREAD_STACKSIZE
N#define SLIPIF_THREAD_STACKSIZE         0
N#endif
N
N/**
N * SLIPIF_THREAD_PRIO: The priority assigned to the slipif_loop thread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef SLIPIF_THREAD_PRIO
N#define SLIPIF_THREAD_PRIO              1
N#endif
N
N/**
N * PPP_THREAD_NAME: The name assigned to the pppInputThread.
N */
N#ifndef PPP_THREAD_NAME
N#define PPP_THREAD_NAME                "pppInputThread"
N#endif
N
N/**
N * PPP_THREAD_STACKSIZE: The stack size used by the pppInputThread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef PPP_THREAD_STACKSIZE
N#define PPP_THREAD_STACKSIZE            0
N#endif
N
N/**
N * PPP_THREAD_PRIO: The priority assigned to the pppInputThread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef PPP_THREAD_PRIO
N#define PPP_THREAD_PRIO                 1
N#endif
N
N/**
N * DEFAULT_THREAD_NAME: The name assigned to any other lwIP thread.
N */
N#ifndef DEFAULT_THREAD_NAME
N#define DEFAULT_THREAD_NAME            "lwIP"
N#endif
N
N/**
N * DEFAULT_THREAD_STACKSIZE: The stack size used by any other lwIP thread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef DEFAULT_THREAD_STACKSIZE
N#define DEFAULT_THREAD_STACKSIZE        0
N#endif
N
N/**
N * DEFAULT_THREAD_PRIO: The priority assigned to any other lwIP thread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef DEFAULT_THREAD_PRIO
N#define DEFAULT_THREAD_PRIO             1
N#endif
N
N/**
N * DEFAULT_RAW_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
N * NETCONN_RAW. The queue size value itself is platform-dependent, but is passed
N * to sys_mbox_new() when the recvmbox is created.
N */
N#ifndef DEFAULT_RAW_RECVMBOX_SIZE
N#define DEFAULT_RAW_RECVMBOX_SIZE       0
N#endif
N
N/**
N * DEFAULT_UDP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
N * NETCONN_UDP. The queue size value itself is platform-dependent, but is passed
N * to sys_mbox_new() when the recvmbox is created.
N */
N#ifndef DEFAULT_UDP_RECVMBOX_SIZE
N#define DEFAULT_UDP_RECVMBOX_SIZE       0
N#endif
N
N/**
N * DEFAULT_TCP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
N * NETCONN_TCP. The queue size value itself is platform-dependent, but is passed
N * to sys_mbox_new() when the recvmbox is created.
N */
N#ifndef DEFAULT_TCP_RECVMBOX_SIZE
N#define DEFAULT_TCP_RECVMBOX_SIZE       0
N#endif
N
N/**
N * DEFAULT_ACCEPTMBOX_SIZE: The mailbox size for the incoming connections.
N * The queue size value itself is platform-dependent, but is passed to
N * sys_mbox_new() when the acceptmbox is created.
N */
N#ifndef DEFAULT_ACCEPTMBOX_SIZE
N#define DEFAULT_ACCEPTMBOX_SIZE         0
N#endif
N
N/*
N   ----------------------------------------------
N   ---------- Sequential layer options ----------
N   ----------------------------------------------
N*/
N/**
N * LWIP_TCPIP_CORE_LOCKING: (EXPERIMENTAL!)
N * Don't use it if you're not an active lwIP project member
N */
N#ifndef LWIP_TCPIP_CORE_LOCKING
N#define LWIP_TCPIP_CORE_LOCKING         0
N#endif
N
N/**
N * LWIP_TCPIP_CORE_LOCKING_INPUT: (EXPERIMENTAL!)
N * Don't use it if you're not an active lwIP project member
N */
N#ifndef LWIP_TCPIP_CORE_LOCKING_INPUT
N#define LWIP_TCPIP_CORE_LOCKING_INPUT   0
N#endif
N
N/**
N * LWIP_NETCONN==1: Enable Netconn API (require to use api_lib.c)
N */
N#ifndef LWIP_NETCONN
S#define LWIP_NETCONN                    1
N#endif
N
N/** LWIP_TCPIP_TIMEOUT==1: Enable tcpip_timeout/tcpip_untimeout tod create
N * timers running in tcpip_thread from another thread.
N */
N#ifndef LWIP_TCPIP_TIMEOUT
N#define LWIP_TCPIP_TIMEOUT              1
N#endif
N
N/*
N   ------------------------------------
N   ---------- Socket options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_SOCKET==1: Enable Socket API (require to use sockets.c)
N */
N#ifndef LWIP_SOCKET
S#define LWIP_SOCKET                     1
N#endif
N
N/**
N * LWIP_COMPAT_SOCKETS==1: Enable BSD-style sockets functions names.
N * (only used if you use sockets.c)
N */
N#ifndef LWIP_COMPAT_SOCKETS
N#define LWIP_COMPAT_SOCKETS             1
N#endif
N
N/**
N * LWIP_POSIX_SOCKETS_IO_NAMES==1: Enable POSIX-style sockets functions names.
N * Disable this option if you use a POSIX operating system that uses the same
N * names (read, write & close). (only used if you use sockets.c)
N */
N#ifndef LWIP_POSIX_SOCKETS_IO_NAMES
N#define LWIP_POSIX_SOCKETS_IO_NAMES     1
N#endif
N
N/**
N * LWIP_TCP_KEEPALIVE==1: Enable TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT
N * options processing. Note that TCP_KEEPIDLE and TCP_KEEPINTVL have to be set
N * in seconds. (does not require sockets.c, and will affect tcp.c)
N */
N#ifndef LWIP_TCP_KEEPALIVE
N#define LWIP_TCP_KEEPALIVE              0
N#endif
N
N/**
N * LWIP_SO_SNDTIMEO==1: Enable send timeout for sockets/netconns and
N * SO_SNDTIMEO processing.
N */
N#ifndef LWIP_SO_SNDTIMEO
N#define LWIP_SO_SNDTIMEO                0
N#endif
N
N/**
N * LWIP_SO_RCVTIMEO==1: Enable receive timeout for sockets/netconns and
N * SO_RCVTIMEO processing.
N */
N#ifndef LWIP_SO_RCVTIMEO
N#define LWIP_SO_RCVTIMEO                0
N#endif
N
N/**
N * LWIP_SO_RCVBUF==1: Enable SO_RCVBUF processing.
N */
N#ifndef LWIP_SO_RCVBUF
N#define LWIP_SO_RCVBUF                  0
N#endif
N
N/**
N * If LWIP_SO_RCVBUF is used, this is the default value for recv_bufsize.
N */
N#ifndef RECV_BUFSIZE_DEFAULT
N#define RECV_BUFSIZE_DEFAULT            INT_MAX
N#endif
N
N/**
N * SO_REUSE==1: Enable SO_REUSEADDR option.
N */
N#ifndef SO_REUSE
N#define SO_REUSE                        0
N#endif
N
N/**
N * SO_REUSE_RXTOALL==1: Pass a copy of incoming broadcast/multicast packets
N * to all local matches if SO_REUSEADDR is turned on.
N * WARNING: Adds a memcpy for every packet if passing to more than one pcb!
N */
N#ifndef SO_REUSE_RXTOALL
N#define SO_REUSE_RXTOALL                0
N#endif
N
N/*
N   ----------------------------------------
N   ---------- Statistics options ----------
N   ----------------------------------------
N*/
N/**
N * LWIP_STATS==1: Enable statistics collection in lwip_stats.
N */
N#ifndef LWIP_STATS
N#define LWIP_STATS                      1
N#endif
N
N#if LWIP_STATS
X#if 1
N
N/**
N * LWIP_STATS_DISPLAY==1: Compile in the statistics output functions.
N */
N#ifndef LWIP_STATS_DISPLAY
N#define LWIP_STATS_DISPLAY              0
N#endif
N
N/**
N * LINK_STATS==1: Enable link stats.
N */
N#ifndef LINK_STATS
N#define LINK_STATS                      1
N#endif
N
N/**
N * ETHARP_STATS==1: Enable etharp stats.
N */
N#ifndef ETHARP_STATS
N#define ETHARP_STATS                    (LWIP_ARP)
N#endif
N
N/**
N * IP_STATS==1: Enable IP stats.
N */
N#ifndef IP_STATS
N#define IP_STATS                        1
N#endif
N
N/**
N * IPFRAG_STATS==1: Enable IP fragmentation stats. Default is
N * on if using either frag or reass.
N */
N#ifndef IPFRAG_STATS
N#define IPFRAG_STATS                    (IP_REASSEMBLY || IP_FRAG)
N#endif
N
N/**
N * ICMP_STATS==1: Enable ICMP stats.
N */
N#ifndef ICMP_STATS
N#define ICMP_STATS                      1
N#endif
N
N/**
N * IGMP_STATS==1: Enable IGMP stats.
N */
N#ifndef IGMP_STATS
N#define IGMP_STATS                      (LWIP_IGMP)
N#endif
N
N/**
N * UDP_STATS==1: Enable UDP stats. Default is on if
N * UDP enabled, otherwise off.
N */
N#ifndef UDP_STATS
N#define UDP_STATS                       (LWIP_UDP)
N#endif
N
N/**
N * TCP_STATS==1: Enable TCP stats. Default is on if TCP
N * enabled, otherwise off.
N */
N#ifndef TCP_STATS
N#define TCP_STATS                       (LWIP_TCP)
N#endif
N
N/**
N * MEM_STATS==1: Enable mem.c stats.
N */
N#ifndef MEM_STATS
N#define MEM_STATS                       ((MEM_LIBC_MALLOC == 0) && (MEM_USE_POOLS == 0))
N#endif
N
N/**
N * MEMP_STATS==1: Enable memp.c pool stats.
N */
N#ifndef MEMP_STATS
N#define MEMP_STATS                      (MEMP_MEM_MALLOC == 0)
N#endif
N
N/**
N * SYS_STATS==1: Enable system stats (sem and mbox counts, etc).
N */
N#ifndef SYS_STATS
N#define SYS_STATS                       (NO_SYS == 0)
N#endif
N
N#else
S
S#define LINK_STATS                      0
S#define IP_STATS                        0
S#define IPFRAG_STATS                    0
S#define ICMP_STATS                      0
S#define IGMP_STATS                      0
S#define UDP_STATS                       0
S#define TCP_STATS                       0
S#define MEM_STATS                       0
S#define MEMP_STATS                      0
S#define SYS_STATS                       0
S#define LWIP_STATS_DISPLAY              0
S
N#endif /* LWIP_STATS */
N
N/*
N   ---------------------------------
N   ---------- PPP options ----------
N   ---------------------------------
N*/
N/**
N * PPP_SUPPORT==1: Enable PPP.
N */
N#ifndef PPP_SUPPORT
N#define PPP_SUPPORT                     0
N#endif
N
N/**
N * PPPOE_SUPPORT==1: Enable PPP Over Ethernet
N */
N#ifndef PPPOE_SUPPORT
N#define PPPOE_SUPPORT                   0
N#endif
N
N/**
N * PPPOS_SUPPORT==1: Enable PPP Over Serial
N */
N#ifndef PPPOS_SUPPORT
N#define PPPOS_SUPPORT                   PPP_SUPPORT
N#endif
N
N#if PPP_SUPPORT
X#if 0
S
S/**
S * NUM_PPP: Max PPP sessions.
S */
S#ifndef NUM_PPP
S#define NUM_PPP                         1
S#endif
S
S/**
S * PAP_SUPPORT==1: Support PAP.
S */
S#ifndef PAP_SUPPORT
S#define PAP_SUPPORT                     0
S#endif
S
S/**
S * CHAP_SUPPORT==1: Support CHAP.
S */
S#ifndef CHAP_SUPPORT
S#define CHAP_SUPPORT                    0
S#endif
S
S/**
S * MSCHAP_SUPPORT==1: Support MSCHAP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef MSCHAP_SUPPORT
S#define MSCHAP_SUPPORT                  0
S#endif
S
S/**
S * CBCP_SUPPORT==1: Support CBCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CBCP_SUPPORT
S#define CBCP_SUPPORT                    0
S#endif
S
S/**
S * CCP_SUPPORT==1: Support CCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CCP_SUPPORT
S#define CCP_SUPPORT                     0
S#endif
S
S/**
S * VJ_SUPPORT==1: Support VJ header compression.
S */
S#ifndef VJ_SUPPORT
S#define VJ_SUPPORT                      0
S#endif
S
S/**
S * MD5_SUPPORT==1: Support MD5 (see also CHAP).
S */
S#ifndef MD5_SUPPORT
S#define MD5_SUPPORT                     0
S#endif
S
S/*
S * Timeouts
S */
S#ifndef FSM_DEFTIMEOUT
S#define FSM_DEFTIMEOUT                  6       /* Timeout time in seconds */
S#endif
S
S#ifndef FSM_DEFMAXTERMREQS
S#define FSM_DEFMAXTERMREQS              2       /* Maximum Terminate-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXCONFREQS
S#define FSM_DEFMAXCONFREQS              10      /* Maximum Configure-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXNAKLOOPS
S#define FSM_DEFMAXNAKLOOPS              5       /* Maximum number of nak loops */
S#endif
S
S#ifndef UPAP_DEFTIMEOUT
S#define UPAP_DEFTIMEOUT                 6       /* Timeout (seconds) for retransmitting req */
S#endif
S
S#ifndef UPAP_DEFREQTIME
S#define UPAP_DEFREQTIME                 30      /* Time to wait for auth-req from peer */
S#endif
S
S#ifndef CHAP_DEFTIMEOUT
S#define CHAP_DEFTIMEOUT                 6       /* Timeout time in seconds */
S#endif
S
S#ifndef CHAP_DEFTRANSMITS
S#define CHAP_DEFTRANSMITS               10      /* max # times to send challenge */
S#endif
S
S/* Interval in seconds between keepalive echo requests, 0 to disable. */
S#ifndef LCP_ECHOINTERVAL
S#define LCP_ECHOINTERVAL                0
S#endif
S
S/* Number of unanswered echo requests before failure. */
S#ifndef LCP_MAXECHOFAILS
S#define LCP_MAXECHOFAILS                3
S#endif
S
S/* Max Xmit idle time (in jiffies) before resend flag char. */
S#ifndef PPP_MAXIDLEFLAG
S#define PPP_MAXIDLEFLAG                 100
S#endif
S
S/*
S * Packet sizes
S *
S * Note - lcp shouldn't be allowed to negotiate stuff outside these
S *    limits.  See lcp.h in the pppd directory.
S * (XXX - these constants should simply be shared by lcp.c instead
S *    of living in lcp.h)
S */
S#define PPP_MTU                         1500     /* Default MTU (size of Info field) */
S#ifndef PPP_MAXMTU
S/* #define PPP_MAXMTU  65535 - (PPP_HDRLEN + PPP_FCSLEN) */
S#define PPP_MAXMTU                      1500 /* Largest MTU we allow */
S#endif
S#define PPP_MINMTU                      64
S#define PPP_MRU                         1500     /* default MRU = max length of info field */
S#define PPP_MAXMRU                      1500     /* Largest MRU we allow */
S#ifndef PPP_DEFMRU
S#define PPP_DEFMRU                      296             /* Try for this */
S#endif
S#define PPP_MINMRU                      128             /* No MRUs below this */
S
S#ifndef MAXNAMELEN
S#define MAXNAMELEN                      256     /* max length of hostname or name for auth */
S#endif
S#ifndef MAXSECRETLEN
S#define MAXSECRETLEN                    256     /* max length of password or secret */
S#endif
S
N#endif /* PPP_SUPPORT */
N
N/*
N   --------------------------------------
N   ---------- Checksum options ----------
N   --------------------------------------
N*/
N/**
N * CHECKSUM_GEN_IP==1: Generate checksums in software for outgoing IP packets.
N */
N#ifndef CHECKSUM_GEN_IP
N#define CHECKSUM_GEN_IP                 1
N#endif
N 
N/**
N * CHECKSUM_GEN_UDP==1: Generate checksums in software for outgoing UDP packets.
N */
N#ifndef CHECKSUM_GEN_UDP
N#define CHECKSUM_GEN_UDP                1
N#endif
N 
N/**
N * CHECKSUM_GEN_TCP==1: Generate checksums in software for outgoing TCP packets.
N */
N#ifndef CHECKSUM_GEN_TCP
N#define CHECKSUM_GEN_TCP                1
N#endif
N
N/**
N * CHECKSUM_GEN_ICMP==1: Generate checksums in software for outgoing ICMP packets.
N */
N#ifndef CHECKSUM_GEN_ICMP
N#define CHECKSUM_GEN_ICMP               1
N#endif
N 
N/**
N * CHECKSUM_CHECK_IP==1: Check checksums in software for incoming IP packets.
N */
N#ifndef CHECKSUM_CHECK_IP
N#define CHECKSUM_CHECK_IP               1
N#endif
N 
N/**
N * CHECKSUM_CHECK_UDP==1: Check checksums in software for incoming UDP packets.
N */
N#ifndef CHECKSUM_CHECK_UDP
N#define CHECKSUM_CHECK_UDP              1
N#endif
N
N/**
N * CHECKSUM_CHECK_TCP==1: Check checksums in software for incoming TCP packets.
N */
N#ifndef CHECKSUM_CHECK_TCP
N#define CHECKSUM_CHECK_TCP              1
N#endif
N
N/**
N * LWIP_CHECKSUM_ON_COPY==1: Calculate checksum when copying data from
N * application buffers to pbufs.
N */
N#ifndef LWIP_CHECKSUM_ON_COPY
N#define LWIP_CHECKSUM_ON_COPY           0
N#endif
N
N/*
N   ---------------------------------------
N   ---------- Hook options ---------------
N   ---------------------------------------
N*/
N
N/* Hooks are undefined by default, define them to a function if you need them. */
N
N/**
N * LWIP_HOOK_IP4_INPUT(pbuf, input_netif):
N * - called from ip_input() (IPv4)
N * - pbuf: received struct pbuf passed to ip_input()
N * - input_netif: struct netif on which the packet has been received
N * Return values:
N * - 0: Hook has not consumed the packet, packet is processed as normal
N * - != 0: Hook has consumed the packet.
N * If the hook consumed the packet, 'pbuf' is in the responsibility of the hook
N * (i.e. free it when done).
N */
N
N/**
N * LWIP_HOOK_IP4_ROUTE(dest):
N * - called from ip_route() (IPv4)
N * - dest: destination IPv4 address
N * Returns the destination netif or NULL if no destination netif is found. In
N * that case, ip_route() continues as normal.
N */
N
N/*
N   ---------------------------------------
N   ---------- Debugging options ----------
N   ---------------------------------------
N*/
N/**
N * LWIP_DBG_MIN_LEVEL: After masking, the value of the debug is
N * compared against this value. If it is smaller, then debugging
N * messages are written.
N */
N#ifndef LWIP_DBG_MIN_LEVEL
N#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_ALL
N#endif
N
N/**
N * LWIP_DBG_TYPES_ON: A mask that can be used to globally enable/disable
N * debug messages of certain types.
N */
N#ifndef LWIP_DBG_TYPES_ON
N#define LWIP_DBG_TYPES_ON               LWIP_DBG_ON
N#endif
N
N/**
N * ETHARP_DEBUG: Enable debugging in etharp.c.
N */
N#ifndef ETHARP_DEBUG
N#define ETHARP_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * NETIF_DEBUG: Enable debugging in netif.c.
N */
N#ifndef NETIF_DEBUG
N#define NETIF_DEBUG                     LWIP_DBG_OFF
N#endif
N
N/**
N * PBUF_DEBUG: Enable debugging in pbuf.c.
N */
N#ifndef PBUF_DEBUG
N#define PBUF_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * API_LIB_DEBUG: Enable debugging in api_lib.c.
N */
N#ifndef API_LIB_DEBUG
N#define API_LIB_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * API_MSG_DEBUG: Enable debugging in api_msg.c.
N */
N#ifndef API_MSG_DEBUG
N#define API_MSG_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * SOCKETS_DEBUG: Enable debugging in sockets.c.
N */
N#ifndef SOCKETS_DEBUG
N#define SOCKETS_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * ICMP_DEBUG: Enable debugging in icmp.c.
N */
N#ifndef ICMP_DEBUG
N#define ICMP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * IGMP_DEBUG: Enable debugging in igmp.c.
N */
N#ifndef IGMP_DEBUG
N#define IGMP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * INET_DEBUG: Enable debugging in inet.c.
N */
N#ifndef INET_DEBUG
N#define INET_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * IP_DEBUG: Enable debugging for IP.
N */
N#ifndef IP_DEBUG
N#define IP_DEBUG                        LWIP_DBG_OFF
N#endif
N
N/**
N * IP_REASS_DEBUG: Enable debugging in ip_frag.c for both frag & reass.
N */
N#ifndef IP_REASS_DEBUG
N#define IP_REASS_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * RAW_DEBUG: Enable debugging in raw.c.
N */
N#ifndef RAW_DEBUG
N#define RAW_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * MEM_DEBUG: Enable debugging in mem.c.
N */
N#ifndef MEM_DEBUG
N#define MEM_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * MEMP_DEBUG: Enable debugging in memp.c.
N */
N#ifndef MEMP_DEBUG
N#define MEMP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * SYS_DEBUG: Enable debugging in sys.c.
N */
N#ifndef SYS_DEBUG
N#define SYS_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * TIMERS_DEBUG: Enable debugging in timers.c.
N */
N#ifndef TIMERS_DEBUG
N#define TIMERS_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_DEBUG: Enable debugging for TCP.
N */
N#ifndef TCP_DEBUG
N#define TCP_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_INPUT_DEBUG: Enable debugging in tcp_in.c for incoming debug.
N */
N#ifndef TCP_INPUT_DEBUG
N#define TCP_INPUT_DEBUG                 LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_FR_DEBUG: Enable debugging in tcp_in.c for fast retransmit.
N */
N#ifndef TCP_FR_DEBUG
N#define TCP_FR_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_RTO_DEBUG: Enable debugging in TCP for retransmit
N * timeout.
N */
N#ifndef TCP_RTO_DEBUG
N#define TCP_RTO_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_CWND_DEBUG: Enable debugging for TCP congestion window.
N */
N#ifndef TCP_CWND_DEBUG
N#define TCP_CWND_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_WND_DEBUG: Enable debugging in tcp_in.c for window updating.
N */
N#ifndef TCP_WND_DEBUG
N#define TCP_WND_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_OUTPUT_DEBUG: Enable debugging in tcp_out.c output functions.
N */
N#ifndef TCP_OUTPUT_DEBUG
N#define TCP_OUTPUT_DEBUG                LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_RST_DEBUG: Enable debugging for TCP with the RST message.
N */
N#ifndef TCP_RST_DEBUG
N#define TCP_RST_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_QLEN_DEBUG: Enable debugging for TCP queue lengths.
N */
N#ifndef TCP_QLEN_DEBUG
N#define TCP_QLEN_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * UDP_DEBUG: Enable debugging in UDP.
N */
N#ifndef UDP_DEBUG
N#define UDP_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * TCPIP_DEBUG: Enable debugging in tcpip.c.
N */
N#ifndef TCPIP_DEBUG
N#define TCPIP_DEBUG                     LWIP_DBG_OFF
N#endif
N
N/**
N * PPP_DEBUG: Enable debugging for PPP.
N */
N#ifndef PPP_DEBUG
N#define PPP_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * SLIP_DEBUG: Enable debugging in slipif.c.
N */
N#ifndef SLIP_DEBUG
N#define SLIP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * DHCP_DEBUG: Enable debugging in dhcp.c.
N */
N#ifndef DHCP_DEBUG
N#define DHCP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * AUTOIP_DEBUG: Enable debugging in autoip.c.
N */
N#ifndef AUTOIP_DEBUG
N#define AUTOIP_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * SNMP_MSG_DEBUG: Enable debugging for SNMP messages.
N */
N#ifndef SNMP_MSG_DEBUG
N#define SNMP_MSG_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * SNMP_MIB_DEBUG: Enable debugging for SNMP MIBs.
N */
N#ifndef SNMP_MIB_DEBUG
N#define SNMP_MIB_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * DNS_DEBUG: Enable debugging for DNS.
N */
N#ifndef DNS_DEBUG
N#define DNS_DEBUG                       LWIP_DBG_OFF
N#endif
N
N#endif /* __LWIP_OPT_H__ */
L 70 "..\..\lwip\src\core\dhcp.c" 2
N
N#if LWIP_DHCP /* don't build if not configured for use in lwipopts.h */
X#if 0  
S
S#include "lwip/stats.h"
S#include "lwip/mem.h"
S#include "lwip/udp.h"
S#include "lwip/ip_addr.h"
S#include "lwip/netif.h"
S#include "lwip/def.h"
S#include "lwip/dhcp.h"
S#include "lwip/autoip.h"
S#include "lwip/dns.h"
S#include "netif/etharp.h"
S
S#include <string.h>
S
S/** DHCP_CREATE_RAND_XID: if this is set to 1, the xid is created using
S * LWIP_RAND() (this overrides DHCP_GLOBAL_XID)
S */
S#ifndef DHCP_CREATE_RAND_XID
S#define DHCP_CREATE_RAND_XID 1
S#endif
S
S/** Default for DHCP_GLOBAL_XID is 0xABCD0000
S * This can be changed by defining DHCP_GLOBAL_XID and DHCP_GLOBAL_XID_HEADER, e.g.
S *  #define DHCP_GLOBAL_XID_HEADER "stdlib.h"
S *  #define DHCP_GLOBAL_XID rand()
S */
S#ifdef DHCP_GLOBAL_XID_HEADER
S#include DHCP_GLOBAL_XID_HEADER /* include optional starting XID generation prototypes */
S#endif
S
S/** DHCP_OPTION_MAX_MSG_SIZE is set to the MTU
S * MTU is checked to be big enough in dhcp_start */
S#define DHCP_MAX_MSG_LEN(netif)        (netif->mtu)
S#define DHCP_MAX_MSG_LEN_MIN_REQUIRED  576
S/** Minimum length for reply before packet is parsed */
S#define DHCP_MIN_REPLY_LEN             44
S
S#define REBOOT_TRIES 2
S
S/** Option handling: options are parsed in dhcp_parse_reply
S * and saved in an array where other functions can load them from.
S * This might be moved into the struct dhcp (not necessarily since
S * lwIP is single-threaded and the array is only used while in recv
S * callback). */
S#define DHCP_OPTION_IDX_OVERLOAD    0
S#define DHCP_OPTION_IDX_MSG_TYPE    1
S#define DHCP_OPTION_IDX_SERVER_ID   2
S#define DHCP_OPTION_IDX_LEASE_TIME  3
S#define DHCP_OPTION_IDX_T1          4
S#define DHCP_OPTION_IDX_T2          5
S#define DHCP_OPTION_IDX_SUBNET_MASK 6
S#define DHCP_OPTION_IDX_ROUTER      7
S#define DHCP_OPTION_IDX_DNS_SERVER  8
S#define DHCP_OPTION_IDX_MAX         (DHCP_OPTION_IDX_DNS_SERVER + DNS_MAX_SERVERS)
S
S/** Holds the decoded option values, only valid while in dhcp_recv.
S    @todo: move this into struct dhcp? */
Su32_t dhcp_rx_options_val[DHCP_OPTION_IDX_MAX];
S/** Holds a flag which option was received and is contained in dhcp_rx_options_val,
S    only valid while in dhcp_recv.
S    @todo: move this into struct dhcp? */
Su8_t  dhcp_rx_options_given[DHCP_OPTION_IDX_MAX];
S
S#ifdef DHCP_GLOBAL_XID
Sstatic u32_t xid;
Sstatic u8_t xid_initialised;
S#endif /* DHCP_GLOBAL_XID */
S
S#define dhcp_option_given(dhcp, idx)          (dhcp_rx_options_given[idx] != 0)
S#define dhcp_got_option(dhcp, idx)            (dhcp_rx_options_given[idx] = 1)
S#define dhcp_clear_option(dhcp, idx)          (dhcp_rx_options_given[idx] = 0)
S#define dhcp_clear_all_options(dhcp)          (memset(dhcp_rx_options_given, 0, sizeof(dhcp_rx_options_given)))
S#define dhcp_get_option_value(dhcp, idx)      (dhcp_rx_options_val[idx])
S#define dhcp_set_option_value(dhcp, idx, val) (dhcp_rx_options_val[idx] = (val))
S
S
S/* DHCP client state machine functions */
Sstatic err_t dhcp_discover(struct netif *netif);
Sstatic err_t dhcp_select(struct netif *netif);
Sstatic void dhcp_bind(struct netif *netif);
S#if DHCP_DOES_ARP_CHECK
Sstatic err_t dhcp_decline(struct netif *netif);
S#endif /* DHCP_DOES_ARP_CHECK */
Sstatic err_t dhcp_rebind(struct netif *netif);
Sstatic err_t dhcp_reboot(struct netif *netif);
Sstatic void dhcp_set_state(struct dhcp *dhcp, u8_t new_state);
S
S/* receive, unfold, parse and free incoming messages */
Sstatic void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port);
S
S/* set the DHCP timers */
Sstatic void dhcp_timeout(struct netif *netif);
Sstatic void dhcp_t1_timeout(struct netif *netif);
Sstatic void dhcp_t2_timeout(struct netif *netif);
S
S/* build outgoing messages */
S/* create a DHCP message, fill in common headers */
Sstatic err_t dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type);
S/* free a DHCP request */
Sstatic void dhcp_delete_msg(struct dhcp *dhcp);
S/* add a DHCP option (type, then length in bytes) */
Sstatic void dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len);
S/* add option values */
Sstatic void dhcp_option_byte(struct dhcp *dhcp, u8_t value);
Sstatic void dhcp_option_short(struct dhcp *dhcp, u16_t value);
Sstatic void dhcp_option_long(struct dhcp *dhcp, u32_t value);
S#if LWIP_NETIF_HOSTNAME
Sstatic void dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif);
S#endif /* LWIP_NETIF_HOSTNAME */
S/* always add the DHCP options trailer to end and pad */
Sstatic void dhcp_option_trailer(struct dhcp *dhcp);
S
S/**
S * Back-off the DHCP client (because of a received NAK response).
S *
S * Back-off the DHCP client because of a received NAK. Receiving a
S * NAK means the client asked for something non-sensible, for
S * example when it tries to renew a lease obtained on another network.
S *
S * We clear any existing set IP address and restart DHCP negotiation
S * afresh (as per RFC2131 3.2.3).
S *
S * @param netif the netif under DHCP control
S */
Sstatic void
Sdhcp_handle_nak(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
S    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
S  /* Set the interface down since the address must no longer be used, as per RFC2131 */
S  netif_set_down(netif);
S  /* remove IP address from interface */
S  netif_set_ipaddr(netif, IP_ADDR_ANY);
S  netif_set_gw(netif, IP_ADDR_ANY);
S  netif_set_netmask(netif, IP_ADDR_ANY); 
S  /* Change to a defined state */
S  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
S  /* We can immediately restart discovery */
S  dhcp_discover(netif);
S}
S
S#if DHCP_DOES_ARP_CHECK
S/**
S * Checks if the offered IP address is already in use.
S *
S * It does so by sending an ARP request for the offered address and
S * entering CHECKING state. If no ARP reply is received within a small
S * interval, the address is assumed to be free for use by us.
S *
S * @param netif the netif under DHCP control
S */
Sstatic void
Sdhcp_check(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  err_t result;
S  u16_t msecs;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
S    (s16_t)netif->name[1]));
S  dhcp_set_state(dhcp, DHCP_CHECKING);
S  /* create an ARP query for the offered IP address, expecting that no host
S     responds, as the IP address should not be in use. */
S  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
S  if (result != ERR_OK) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
S  }
S  dhcp->tries++;
S  msecs = 500;
S  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
S}
S#endif /* DHCP_DOES_ARP_CHECK */
S
S/**
S * Remember the configuration offered by a DHCP server.
S *
S * @param netif the netif under DHCP control
S */
Sstatic void
Sdhcp_handle_offer(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
S    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
S  /* obtain the server address */
S  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
S    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
S      ip4_addr_get_u32(&dhcp->server_ip_addr)));
S    /* remember offered address */
S    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
S      ip4_addr_get_u32(&dhcp->offered_ip_addr)));
S
S    dhcp_select(netif);
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
S      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
S  }
S}
S
S/**
S * Select a DHCP server offer out of all offers.
S *
S * Simply select the first offer received.
S *
S * @param netif the netif under DHCP control
S * @return lwIP specific error (see error.h)
S */
Sstatic err_t
Sdhcp_select(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  err_t result;
S  u16_t msecs;
S
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
S  dhcp_set_state(dhcp, DHCP_REQUESTING);
S
S  /* create and initialize the DHCP message header */
S  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
S  if (result == ERR_OK) {
S    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
S    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
S
S    /* MUST request the offered IP address */
S    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
S    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
S
S    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
S    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
S
S    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
S    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
S    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
S    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
S    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
S
S#if LWIP_NETIF_HOSTNAME
S    dhcp_option_hostname(dhcp, netif);
S#endif /* LWIP_NETIF_HOSTNAME */
S
S    dhcp_option_trailer(dhcp);
S    /* shrink the pbuf to the actual content length */
S    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
S
S    /* send broadcast to any DHCP server */
S    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
S    dhcp_delete_msg(dhcp);
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
S  }
S  dhcp->tries++;
S  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
S  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
S  return result;
S}
S
S/**
S * The DHCP timer that checks for lease renewal/rebind timeouts.
S */
Svoid
Sdhcp_coarse_tmr()
S{
S  struct netif *netif = netif_list;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
S  /* iterate through all network interfaces */
S  while (netif != NULL) {
S    /* only act on DHCP configured interfaces */
S    if (netif->dhcp != NULL) {
S      /* timer is active (non zero), and triggers (zeroes) now? */
S      if (netif->dhcp->t2_timeout-- == 1) {
S        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
S        /* this clients' rebind timeout triggered */
S        dhcp_t2_timeout(netif);
S      /* timer is active (non zero), and triggers (zeroes) now */
S      } else if (netif->dhcp->t1_timeout-- == 1) {
S        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
S        /* this clients' renewal timeout triggered */
S        dhcp_t1_timeout(netif);
S      }
S    }
S    /* proceed to next netif */
S    netif = netif->next;
S  }
S}
S
S/**
S * DHCP transaction timeout handling
S *
S * A DHCP server is expected to respond within a short period of time.
S * This timer checks whether an outstanding DHCP request is timed out.
S */
Svoid
Sdhcp_fine_tmr()
S{
S  struct netif *netif = netif_list;
S  /* loop through netif's */
S  while (netif != NULL) {
S    /* only act on DHCP configured interfaces */
S    if (netif->dhcp != NULL) {
S      /* timer is active (non zero), and is about to trigger now */      
S      if (netif->dhcp->request_timeout > 1) {
S        netif->dhcp->request_timeout--;
S      }
S      else if (netif->dhcp->request_timeout == 1) {
S        netif->dhcp->request_timeout--;
S        /* { netif->dhcp->request_timeout == 0 } */
S        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
S        /* this client's request timeout triggered */
S        dhcp_timeout(netif);
S      }
S    }
S    /* proceed to next network interface */
S    netif = netif->next;
S  }
S}
S
S/**
S * A DHCP negotiation transaction, or ARP request, has timed out.
S *
S * The timer that was started with the DHCP or ARP request has
S * timed out, indicating no response was received in time.
S *
S * @param netif the netif under DHCP control
S */
Sstatic void
Sdhcp_timeout(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
S  /* back-off period has passed, or server selection timed out */
S  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
S    dhcp_discover(netif);
S  /* receiving the requested lease timed out */
S  } else if (dhcp->state == DHCP_REQUESTING) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
S    if (dhcp->tries <= 5) {
S      dhcp_select(netif);
S    } else {
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
S      dhcp_release(netif);
S      dhcp_discover(netif);
S    }
S#if DHCP_DOES_ARP_CHECK
S  /* received no ARP reply for the offered address (which is good) */
S  } else if (dhcp->state == DHCP_CHECKING) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
S    if (dhcp->tries <= 1) {
S      dhcp_check(netif);
S    /* no ARP replies on the offered address,
S       looks like the IP address is indeed free */
S    } else {
S      /* bind the interface to the offered address */
S      dhcp_bind(netif);
S    }
S#endif /* DHCP_DOES_ARP_CHECK */
S  }
S  /* did not get response to renew request? */
S  else if (dhcp->state == DHCP_RENEWING) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
S    /* just retry renewal */
S    /* note that the rebind timer will eventually time-out if renew does not work */
S    dhcp_renew(netif);
S  /* did not get response to rebind request? */
S  } else if (dhcp->state == DHCP_REBINDING) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
S    if (dhcp->tries <= 8) {
S      dhcp_rebind(netif);
S    } else {
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
S      dhcp_release(netif);
S      dhcp_discover(netif);
S    }
S  } else if (dhcp->state == DHCP_REBOOTING) {
S    if (dhcp->tries < REBOOT_TRIES) {
S      dhcp_reboot(netif);
S    } else {
S      dhcp_discover(netif);
S    }
S  }
S}
S
S/**
S * The renewal period has timed out.
S *
S * @param netif the netif under DHCP control
S */
Sstatic void
Sdhcp_t1_timeout(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
S  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
S      (dhcp->state == DHCP_RENEWING)) {
S    /* just retry to renew - note that the rebind timer (t2) will
S     * eventually time-out if renew tries fail. */
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
S                ("dhcp_t1_timeout(): must renew\n"));
S    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
S       DHCP_RENEWING, not DHCP_BOUND */
S    dhcp_renew(netif);
S  }
S}
S
S/**
S * The rebind period has timed out.
S *
S * @param netif the netif under DHCP control
S */
Sstatic void
Sdhcp_t2_timeout(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
S  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
S      (dhcp->state == DHCP_RENEWING)) {
S    /* just retry to rebind */
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
S                ("dhcp_t2_timeout(): must rebind\n"));
S    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
S       DHCP_REBINDING, not DHCP_BOUND */
S    dhcp_rebind(netif);
S  }
S}
S
S/**
S * Handle a DHCP ACK packet
S *
S * @param netif the netif under DHCP control
S */
Sstatic void
Sdhcp_handle_ack(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S#if LWIP_DNS
S  u8_t n;
S#endif /* LWIP_DNS */
S
S  /* clear options we might not get from the ACK */
S  ip_addr_set_zero(&dhcp->offered_sn_mask);
S  ip_addr_set_zero(&dhcp->offered_gw_addr);
S#if LWIP_DHCP_BOOTP_FILE
S  ip_addr_set_zero(&dhcp->offered_si_addr);
S#endif /* LWIP_DHCP_BOOTP_FILE */
S
S  /* lease time given? */
S  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
S    /* remember offered lease time */
S    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
S  }
S  /* renewal period given? */
S  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
S    /* remember given renewal period */
S    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
S  } else {
S    /* calculate safe periods for renewal */
S    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
S  }
S
S  /* renewal period given? */
S  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
S    /* remember given rebind period */
S    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
S  } else {
S    /* calculate safe periods for rebinding */
S    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
S  }
S
S  /* (y)our internet address */
S  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
S
S#if LWIP_DHCP_BOOTP_FILE
S  /* copy boot server address,
S     boot file name copied in dhcp_parse_reply if not overloaded */
S  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
S#endif /* LWIP_DHCP_BOOTP_FILE */
S
S  /* subnet mask given? */
S  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
S    /* remember given subnet mask */
S    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
S    dhcp->subnet_mask_given = 1;
S  } else {
S    dhcp->subnet_mask_given = 0;
S  }
S
S  /* gateway router */
S  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
S    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
S  }
S  
S#if LWIP_DNS
S  /* DNS servers */
S  n = 0;
S  while(dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n) && (n < DNS_MAX_SERVERS)) {
S    ip_addr_t dns_addr;
S    ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
S    dns_setserver(n, &dns_addr);
S    n++;
S  }
S#endif /* LWIP_DNS */
S}
S
S/** Set a statically allocated struct dhcp to work with.
S * Using this prevents dhcp_start to allocate it using mem_malloc.
S *
S * @param netif the netif for which to set the struct dhcp
S * @param dhcp (uninitialised) dhcp struct allocated by the application
S */
Svoid
Sdhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
S{
S  LWIP_ASSERT("netif != NULL", netif != NULL);
S  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
S  LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);
S
S  /* clear data structure */
S  memset(dhcp, 0, sizeof(struct dhcp));
S  /* dhcp_set_state(&dhcp, DHCP_OFF); */
S  netif->dhcp = dhcp;
S}
S
S/** Removes a struct dhcp from a netif.
S *
S * ATTENTION: Only use this when not using dhcp_set_struct() to allocate the
S *            struct dhcp since the memory is passed back to the heap.
S *
S * @param netif the netif from which to remove the struct dhcp
S */
Svoid dhcp_cleanup(struct netif *netif)
S{
S  LWIP_ASSERT("netif != NULL", netif != NULL);
S
S  if (netif->dhcp != NULL) {
S    mem_free(netif->dhcp);
S    netif->dhcp = NULL;
S  }
S}
S
S/**
S * Start DHCP negotiation for a network interface.
S *
S * If no DHCP client instance was attached to this interface,
S * a new client is created first. If a DHCP client instance
S * was already present, it restarts negotiation.
S *
S * @param netif The lwIP network interface
S * @return lwIP error code
S * - ERR_OK - No error
S * - ERR_MEM - Out of memory
S */
Serr_t
Sdhcp_start(struct netif *netif)
S{
S  struct dhcp *dhcp;
S  err_t result = ERR_OK;
S
S  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
S  dhcp = netif->dhcp;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
S  /* Remove the flag that says this netif is handled by DHCP,
S     it is set when we succeeded starting. */
S  netif->flags &= ~NETIF_FLAG_DHCP;
S
S  /* check hwtype of the netif */
S  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
S    return ERR_ARG;
S  }
S
S  /* check MTU of the netif */
S  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
S    return ERR_MEM;
S  }
S
S  /* no DHCP client attached yet? */
S  if (dhcp == NULL) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
S    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
S    if (dhcp == NULL) {
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
S      return ERR_MEM;
S    }
S    /* store this dhcp client in the netif */
S    netif->dhcp = dhcp;
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
S  /* already has DHCP client attached */
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
S    if (dhcp->pcb != NULL) {
S      udp_remove(dhcp->pcb);
S    }
S    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
S    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
S  }
S    
S  /* clear data structure */
S  memset(dhcp, 0, sizeof(struct dhcp));
S  /* dhcp_set_state(&dhcp, DHCP_OFF); */
S  /* allocate UDP PCB */
S  dhcp->pcb = udp_new();
S  if (dhcp->pcb == NULL) {
S    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
S    return ERR_MEM;
S  }
S  ip_set_option(dhcp->pcb, SOF_BROADCAST);
S  /* set up local and remote port for the pcb */
S  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
S  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
S  /* set up the recv callback and argument */
S  udp_recv(dhcp->pcb, dhcp_recv, netif);
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
S  /* (re)start the DHCP negotiation */
S  result = dhcp_discover(netif);
S  if (result != ERR_OK) {
S    /* free resources allocated above */
S    dhcp_stop(netif);
S    return ERR_MEM;
S  }
S  /* Set the flag that says this netif is handled by DHCP. */
S  netif->flags |= NETIF_FLAG_DHCP;
S  return result;
S}
S
S/**
S * Inform a DHCP server of our manual configuration.
S *
S * This informs DHCP servers of our fixed IP address configuration
S * by sending an INFORM message. It does not involve DHCP address
S * configuration, it is just here to be nice to the network.
S *
S * @param netif The lwIP network interface
S */
Svoid
Sdhcp_inform(struct netif *netif)
S{
S  struct dhcp dhcp;
S  err_t result = ERR_OK;
S  struct udp_pcb *pcb;
S
S  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
S
S  memset(&dhcp, 0, sizeof(struct dhcp));
S  dhcp_set_state(&dhcp, DHCP_INFORM);
S
S  if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
S    /* re-use existing pcb */
S    pcb = netif->dhcp->pcb;
S  } else {
S    pcb = udp_new();
S    if (pcb == NULL) {
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
S      return;
S    }
S    dhcp.pcb = pcb;
S    ip_set_option(dhcp.pcb, SOF_BROADCAST);
S    udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
S  }
S  /* create and initialize the DHCP message header */
S  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
S  if (result == ERR_OK) {
S    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
S    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
S
S    dhcp_option_trailer(&dhcp);
S
S    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
S
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
S    udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
S    dhcp_delete_msg(&dhcp);
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
S  }
S
S  if (dhcp.pcb != NULL) {
S    /* otherwise, the existing pcb was used */
S    udp_remove(dhcp.pcb);
S  }
S}
S
S/** Handle a possible change in the network configuration.
S *
S * This enters the REBOOTING state to verify that the currently bound
S * address is still valid.
S */
Svoid
Sdhcp_network_changed(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  if (!dhcp)
S    return;
S  switch (dhcp->state) {
S  case DHCP_REBINDING:
S  case DHCP_RENEWING:
S  case DHCP_BOUND:
S  case DHCP_REBOOTING:
S    netif_set_down(netif);
S    dhcp->tries = 0;
S    dhcp_reboot(netif);
S    break;
S  case DHCP_OFF:
S    /* stay off */
S    break;
S  default:
S    dhcp->tries = 0;
S#if LWIP_DHCP_AUTOIP_COOP
S    if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
S      autoip_stop(netif);
S      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
S    }
S#endif /* LWIP_DHCP_AUTOIP_COOP */
S    dhcp_discover(netif);
S    break;
S  }
S}
S
S#if DHCP_DOES_ARP_CHECK
S/**
S * Match an ARP reply with the offered IP address.
S *
S * @param netif the network interface on which the reply was received
S * @param addr The IP address we received a reply from
S */
Svoid dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
S{
S  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
S  /* is a DHCP client doing an ARP check? */
S  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
S      ip4_addr_get_u32(addr)));
S    /* did a host respond with the address we
S       were offered by the DHCP server? */
S    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
S      /* we will not accept the offered address */
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
S        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
S      dhcp_decline(netif);
S    }
S  }
S}
S
S/**
S * Decline an offered lease.
S *
S * Tell the DHCP server we do not accept the offered address.
S * One reason to decline the lease is when we find out the address
S * is already in use by another host (through ARP).
S *
S * @param netif the netif under DHCP control
S */
Sstatic err_t
Sdhcp_decline(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  err_t result = ERR_OK;
S  u16_t msecs;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
S  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
S  /* create and initialize the DHCP message header */
S  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
S  if (result == ERR_OK) {
S    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
S    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
S
S    dhcp_option_trailer(dhcp);
S    /* resize pbuf to reflect true size of options */
S    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
S
S    /* per section 4.4.4, broadcast DECLINE messages */
S    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
S    dhcp_delete_msg(dhcp);
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
S      ("dhcp_decline: could not allocate DHCP request\n"));
S  }
S  dhcp->tries++;
S  msecs = 10*1000;
S  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
S  return result;
S}
S#endif /* DHCP_DOES_ARP_CHECK */
S
S
S/**
S * Start the DHCP process, discover a DHCP server.
S *
S * @param netif the netif under DHCP control
S */
Sstatic err_t
Sdhcp_discover(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  err_t result = ERR_OK;
S  u16_t msecs;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
S  ip_addr_set_any(&dhcp->offered_ip_addr);
S  dhcp_set_state(dhcp, DHCP_SELECTING);
S  /* create and initialize the DHCP message header */
S  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
S  if (result == ERR_OK) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
S
S    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
S    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
S
S    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
S    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
S    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
S    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
S    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
S
S    dhcp_option_trailer(dhcp);
S
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
S    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
S
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
S    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
S    dhcp_delete_msg(dhcp);
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
S  }
S  dhcp->tries++;
S#if LWIP_DHCP_AUTOIP_COOP
S  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
S    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
S    autoip_start(netif);
S  }
S#endif /* LWIP_DHCP_AUTOIP_COOP */
S  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
S  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
S  return result;
S}
S
S
S/**
S * Bind the interface to the offered IP address.
S *
S * @param netif network interface to bind to the offered address
S */
Sstatic void
Sdhcp_bind(struct netif *netif)
S{
S  u32_t timeout;
S  struct dhcp *dhcp;
S  ip_addr_t sn_mask, gw_addr;
S  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
S  dhcp = netif->dhcp;
S  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
S
S  /* temporary DHCP lease? */
S  if (dhcp->offered_t1_renew != 0xffffffffUL) {
S    /* set renewal period timer */
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
S    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
S    if(timeout > 0xffff) {
S      timeout = 0xffff;
S    }
S    dhcp->t1_timeout = (u16_t)timeout;
S    if (dhcp->t1_timeout == 0) {
S      dhcp->t1_timeout = 1;
S    }
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
S  }
S  /* set renewal period timer */
S  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
S    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
S    if(timeout > 0xffff) {
S      timeout = 0xffff;
S    }
S    dhcp->t2_timeout = (u16_t)timeout;
S    if (dhcp->t2_timeout == 0) {
S      dhcp->t2_timeout = 1;
S    }
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
S  }
S
S  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
S  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
S    dhcp->t1_timeout = 0;
S  }
S
S  if (dhcp->subnet_mask_given) {
S    /* copy offered network mask */
S    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
S  } else {
S    /* subnet mask not given, choose a safe subnet mask given the network class */
S    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
S    if (first_octet <= 127) {
S      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
S    } else if (first_octet >= 192) {
S      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
S    } else {
S      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
S    }
S  }
S
S  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
S  /* gateway address not given? */
S  if (ip_addr_isany(&gw_addr)) {
S    /* copy network address */
S    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
S    /* use first host address on network as gateway */
S    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
S  }
S
S#if LWIP_DHCP_AUTOIP_COOP
S  if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
S    autoip_stop(netif);
S    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
S  }
S#endif /* LWIP_DHCP_AUTOIP_COOP */
S
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
S    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
S  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
S    ip4_addr_get_u32(&sn_mask)));
S  netif_set_netmask(netif, &sn_mask);
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
S    ip4_addr_get_u32(&gw_addr)));
S  netif_set_gw(netif, &gw_addr);
S  /* bring the interface up */
S  netif_set_up(netif);
S  /* netif is now bound to DHCP leased address */
S  dhcp_set_state(dhcp, DHCP_BOUND);
S}
S
S/**
S * Renew an existing DHCP lease at the involved DHCP server.
S *
S * @param netif network interface which must renew its lease
S */
Serr_t
Sdhcp_renew(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  err_t result;
S  u16_t msecs;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
S  dhcp_set_state(dhcp, DHCP_RENEWING);
S
S  /* create and initialize the DHCP message header */
S  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
S  if (result == ERR_OK) {
S    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
S    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
S
S#if 0
S    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
S    dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
S#endif
S
S#if 0
S    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
S    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
S#endif
S
S#if LWIP_NETIF_HOSTNAME
S    dhcp_option_hostname(dhcp, netif);
S#endif /* LWIP_NETIF_HOSTNAME */
S
S    /* append DHCP message trailer */
S    dhcp_option_trailer(dhcp);
S
S    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
S
S    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
S    dhcp_delete_msg(dhcp);
S
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
S  }
S  dhcp->tries++;
S  /* back-off on retries, but to a maximum of 20 seconds */
S  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
S  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
S  return result;
S}
S
S/**
S * Rebind with a DHCP server for an existing DHCP lease.
S *
S * @param netif network interface which must rebind with a DHCP server
S */
Sstatic err_t
Sdhcp_rebind(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  err_t result;
S  u16_t msecs;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
S  dhcp_set_state(dhcp, DHCP_REBINDING);
S
S  /* create and initialize the DHCP message header */
S  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
S  if (result == ERR_OK) {
S    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
S    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
S
S#if LWIP_NETIF_HOSTNAME
S    dhcp_option_hostname(dhcp, netif);
S#endif /* LWIP_NETIF_HOSTNAME */
S
S#if 0
S    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
S    dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
S
S    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
S    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
S#endif
S
S    dhcp_option_trailer(dhcp);
S
S    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
S
S    /* broadcast to server */
S    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
S    dhcp_delete_msg(dhcp);
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
S  }
S  dhcp->tries++;
S  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
S  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
S  return result;
S}
S
S/**
S * Enter REBOOTING state to verify an existing lease
S *
S * @param netif network interface which must reboot
S */
Sstatic err_t
Sdhcp_reboot(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  err_t result;
S  u16_t msecs;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
S  dhcp_set_state(dhcp, DHCP_REBOOTING);
S
S  /* create and initialize the DHCP message header */
S  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
S  if (result == ERR_OK) {
S    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
S    dhcp_option_short(dhcp, 576);
S
S    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
S    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
S
S    dhcp_option_trailer(dhcp);
S
S    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
S
S    /* broadcast to server */
S    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
S    dhcp_delete_msg(dhcp);
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
S  }
S  dhcp->tries++;
S  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
S  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
S  return result;
S}
S
S
S/**
S * Release a DHCP lease.
S *
S * @param netif network interface which must release its lease
S */
Serr_t
Sdhcp_release(struct netif *netif)
S{
S  struct dhcp *dhcp = netif->dhcp;
S  err_t result;
S  u16_t msecs;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
S
S  /* idle DHCP client */
S  dhcp_set_state(dhcp, DHCP_OFF);
S  /* clean old DHCP offer */
S  ip_addr_set_zero(&dhcp->server_ip_addr);
S  ip_addr_set_zero(&dhcp->offered_ip_addr);
S  ip_addr_set_zero(&dhcp->offered_sn_mask);
S  ip_addr_set_zero(&dhcp->offered_gw_addr);
S#if LWIP_DHCP_BOOTP_FILE
S  ip_addr_set_zero(&dhcp->offered_si_addr);
S#endif /* LWIP_DHCP_BOOTP_FILE */
S  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
S  
S  /* create and initialize the DHCP message header */
S  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
S  if (result == ERR_OK) {
S    dhcp_option_trailer(dhcp);
S
S    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
S
S    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
S    dhcp_delete_msg(dhcp);
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
S  } else {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
S  }
S  dhcp->tries++;
S  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
S  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
S  /* bring the interface down */
S  netif_set_down(netif);
S  /* remove IP address from interface */
S  netif_set_ipaddr(netif, IP_ADDR_ANY);
S  netif_set_gw(netif, IP_ADDR_ANY);
S  netif_set_netmask(netif, IP_ADDR_ANY);
S  
S  return result;
S}
S
S/**
S * Remove the DHCP client from the interface.
S *
S * @param netif The network interface to stop DHCP on
S */
Svoid
Sdhcp_stop(struct netif *netif)
S{
S  struct dhcp *dhcp;
S  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
S  dhcp = netif->dhcp;
S  /* Remove the flag that says this netif is handled by DHCP. */
S  netif->flags &= ~NETIF_FLAG_DHCP;
S
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
S  /* netif is DHCP configured? */
S  if (dhcp != NULL) {
S#if LWIP_DHCP_AUTOIP_COOP
S    if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
S      autoip_stop(netif);
S      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
S    }
S#endif /* LWIP_DHCP_AUTOIP_COOP */
S
S    if (dhcp->pcb != NULL) {
S      udp_remove(dhcp->pcb);
S      dhcp->pcb = NULL;
S    }
S    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
S    dhcp_set_state(dhcp, DHCP_OFF);
S  }
S}
S
S/*
S * Set the DHCP state of a DHCP client.
S *
S * If the state changed, reset the number of tries.
S */
Sstatic void
Sdhcp_set_state(struct dhcp *dhcp, u8_t new_state)
S{
S  if (new_state != dhcp->state) {
S    dhcp->state = new_state;
S    dhcp->tries = 0;
S    dhcp->request_timeout = 0;
S  }
S}
S
S/*
S * Concatenate an option type and length field to the outgoing
S * DHCP message.
S *
S */
Sstatic void
Sdhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
S{
S  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
S  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
S  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
S}
S/*
S * Concatenate a single byte to the outgoing DHCP message.
S *
S */
Sstatic void
Sdhcp_option_byte(struct dhcp *dhcp, u8_t value)
S{
S  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
S  dhcp->msg_out->options[dhcp->options_out_len++] = value;
S}
S
Sstatic void
Sdhcp_option_short(struct dhcp *dhcp, u16_t value)
S{
S  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
S  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
S  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
S}
S
Sstatic void
Sdhcp_option_long(struct dhcp *dhcp, u32_t value)
S{
S  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
S  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
S  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
S  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
S  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
S}
S
S#if LWIP_NETIF_HOSTNAME
Sstatic void
Sdhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
S{
S  if (netif->hostname != NULL) {
S    size_t namelen = strlen(netif->hostname);
S    if (namelen > 0) {
S      u8_t len;
S      const char *p = netif->hostname;
S      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
S         and 1 byte for trailer) */
S      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
S      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
S      len = LWIP_MIN(namelen, available);
S      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, len);
S      while (len--) {
S        dhcp_option_byte(dhcp, *p++);
S      }
S    }
S  }
S}
S#endif /* LWIP_NETIF_HOSTNAME */
S
S/**
S * Extract the DHCP message and the DHCP options.
S *
S * Extract the DHCP message and the DHCP options, each into a contiguous
S * piece of memory. As a DHCP message is variable sized by its options,
S * and also allows overriding some fields for options, the easy approach
S * is to first unfold the options into a conitguous piece of memory, and
S * use that further on.
S *
S */
Sstatic err_t
Sdhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
S{
S  u8_t *options;
S  u16_t offset;
S  u16_t offset_max;
S  u16_t options_idx;
S  u16_t options_idx_max;
S  struct pbuf *q;
S  int parse_file_as_options = 0;
S  int parse_sname_as_options = 0;
S
S  /* clear received options */
S  dhcp_clear_all_options(dhcp);
S  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
S  if (p->len < DHCP_SNAME_OFS) {
S    return ERR_BUF;
S  }
S  dhcp->msg_in = (struct dhcp_msg *)p->payload;
S#if LWIP_DHCP_BOOTP_FILE
S  /* clear boot file name */
S  dhcp->boot_file_name[0] = 0;
S#endif /* LWIP_DHCP_BOOTP_FILE */
S
S  /* parse options */
S
S  /* start with options field */
S  options_idx = DHCP_OPTIONS_OFS;
S  /* parse options to the end of the received packet */
S  options_idx_max = p->tot_len;
Sagain:
S  q = p;
S  while((q != NULL) && (options_idx >= q->len)) {
S    options_idx -= q->len;
S    options_idx_max -= q->len;
S    q = q->next;
S  }
S  if (q == NULL) {
S    return ERR_BUF;
S  }
S  offset = options_idx;
S  offset_max = options_idx_max;
S  options = (u8_t*)q->payload;
S  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
S  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
S    u8_t op = options[offset];
S    u8_t len;
S    u8_t decode_len = 0;
S    int decode_idx = -1;
S    u16_t val_offset = offset + 2;
S    /* len byte might be in the next pbuf */
S    if (offset + 1 < q->len) {
S      len = options[offset + 1];
S    } else {
S      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
S    }
S    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
S    decode_len = len;
S    switch(op) {
S      /* case(DHCP_OPTION_END): handled above */
S      case(DHCP_OPTION_PAD):
S        /* special option: no len encoded */
S        decode_len = len = 0;
S        /* will be increased below */
S        offset--;
S        break;
S      case(DHCP_OPTION_SUBNET_MASK):
S        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
S        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
S        break;
S      case(DHCP_OPTION_ROUTER):
S        decode_len = 4; /* only copy the first given router */
S        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
S        decode_idx = DHCP_OPTION_IDX_ROUTER;
S        break;
S      case(DHCP_OPTION_DNS_SERVER):
S        /* special case: there might be more than one server */
S        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
S        /* limit number of DNS servers */
S        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
S        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
S        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
S        break;
S      case(DHCP_OPTION_LEASE_TIME):
S        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
S        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
S        break;
S      case(DHCP_OPTION_OVERLOAD):
S        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
S        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
S        break;
S      case(DHCP_OPTION_MESSAGE_TYPE):
S        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
S        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
S        break;
S      case(DHCP_OPTION_SERVER_ID):
S        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
S        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
S        break;
S      case(DHCP_OPTION_T1):
S        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
S        decode_idx = DHCP_OPTION_IDX_T1;
S        break;
S      case(DHCP_OPTION_T2):
S        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
S        decode_idx = DHCP_OPTION_IDX_T2;
S        break;
S      default:
S        decode_len = 0;
S        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
S        break;
S    }
S    offset += len + 2;
S    if (decode_len > 0) {
S      u32_t value = 0;
S      u16_t copy_len;
Sdecode_next:
S      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
S      if (!dhcp_option_given(dhcp, decode_idx)) {
S        copy_len = LWIP_MIN(decode_len, 4);
S        pbuf_copy_partial(q, &value, copy_len, val_offset);
S        if (decode_len > 4) {
S          /* decode more than one u32_t */
S          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
S          dhcp_got_option(dhcp, decode_idx);
S          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
S          decode_len -= 4;
S          val_offset += 4;
S          decode_idx++;
S          goto decode_next;
S        } else if (decode_len == 4) {
S          value = ntohl(value);
S        } else {
S          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
S          value = ((u8_t*)&value)[0];
S        }
S        dhcp_got_option(dhcp, decode_idx);
S        dhcp_set_option_value(dhcp, decode_idx, value);
S      }
S    }
S    if (offset >= q->len) {
S      offset -= q->len;
S      offset_max -= q->len;
S      if ((offset < offset_max) && offset_max) {
S        q = q->next;
S        LWIP_ASSERT("next pbuf was null", q);
S        options = (u8_t*)q->payload;
S      } else {
S        // We've run out of bytes, probably no end marker. Don't proceed.
S        break;
S      }
S    }
S  }
S  /* is this an overloaded message? */
S  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
S    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
S    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
S    if (overload == DHCP_OVERLOAD_FILE) {
S      parse_file_as_options = 1;
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
S    } else if (overload == DHCP_OVERLOAD_SNAME) {
S      parse_sname_as_options = 1;
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
S    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
S      parse_sname_as_options = 1;
S      parse_file_as_options = 1;
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
S    } else {
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
S    }
S#if LWIP_DHCP_BOOTP_FILE
S    if (!parse_file_as_options) {
S      /* only do this for ACK messages */
S      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) &&
S        (dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) == DHCP_ACK))
S      /* copy bootp file name, don't care for sname (server hostname) */
S      pbuf_copy_partial(p, dhcp->boot_file_name, DHCP_FILE_LEN-1, DHCP_FILE_OFS);
S      /* make sure the string is really NULL-terminated */
S      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
S    }
S#endif /* LWIP_DHCP_BOOTP_FILE */
S  }
S  if (parse_file_as_options) {
S    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
S    parse_file_as_options = 0;
S    options_idx = DHCP_FILE_OFS;
S    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
S    goto again;
S  } else if (parse_sname_as_options) {
S    parse_sname_as_options = 0;
S    options_idx = DHCP_SNAME_OFS;
S    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
S    goto again;
S  }
S  return ERR_OK;
S}
S
S/**
S * If an incoming DHCP message is in response to us, then trigger the state machine
S */
Sstatic void
Sdhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
S{
S  struct netif *netif = (struct netif *)arg;
S  struct dhcp *dhcp = netif->dhcp;
S  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
S  u8_t msg_type;
S  u8_t i;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
S    ip4_addr1_16(addr), ip4_addr2_16(addr), ip4_addr3_16(addr), ip4_addr4_16(addr), port));
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
S  /* prevent warnings about unused arguments */
S  LWIP_UNUSED_ARG(pcb);
S  LWIP_UNUSED_ARG(addr);
S  LWIP_UNUSED_ARG(port);
S
S  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
S
S  if (p->len < DHCP_MIN_REPLY_LEN) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
S    goto free_pbuf_and_return;
S  }
S
S  if (reply_msg->op != DHCP_BOOTREPLY) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
S    goto free_pbuf_and_return;
S  }
S  /* iterate through hardware address and match against DHCP message */
S  for (i = 0; i < netif->hwaddr_len; i++) {
S    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
S      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
S        ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
S        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
S      goto free_pbuf_and_return;
S    }
S  }
S  /* match transaction ID against what we expected */
S  if (ntohl(reply_msg->xid) != dhcp->xid) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
S      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
S    goto free_pbuf_and_return;
S  }
S  /* option fields could be unfold? */
S  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
S      ("problem unfolding DHCP message - too short on memory?\n"));
S    goto free_pbuf_and_return;
S  }
S
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
S  /* obtain pointer to DHCP message type */
S  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
S    goto free_pbuf_and_return;
S  }
S
S  /* read DHCP message type */
S  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
S  /* message type is DHCP ACK? */
S  if (msg_type == DHCP_ACK) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
S    /* in requesting state? */
S    if (dhcp->state == DHCP_REQUESTING) {
S      dhcp_handle_ack(netif);
S#if DHCP_DOES_ARP_CHECK
S      /* check if the acknowledged lease address is already in use */
S      dhcp_check(netif);
S#else
S      /* bind interface to the acknowledged lease address */
S      dhcp_bind(netif);
S#endif
S    }
S    /* already bound to the given lease address? */
S    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
S      dhcp_bind(netif);
S    }
S  }
S  /* received a DHCP_NAK in appropriate state? */
S  else if ((msg_type == DHCP_NAK) &&
S    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
S     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
S    dhcp_handle_nak(netif);
S  }
S  /* received a DHCP_OFFER in DHCP_SELECTING state? */
S  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
S    dhcp->request_timeout = 0;
S    /* remember offered lease */
S    dhcp_handle_offer(netif);
S  }
Sfree_pbuf_and_return:
S  dhcp->msg_in = NULL;
S  pbuf_free(p);
S}
S
S/**
S * Create a DHCP request, fill in common headers
S *
S * @param netif the netif under DHCP control
S * @param dhcp dhcp control struct
S * @param message_type message type of the request
S */
Sstatic err_t
Sdhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
S{
S  u16_t i;
S#ifndef DHCP_GLOBAL_XID
S  /** default global transaction identifier starting value (easy to match
S   *  with a packet analyser). We simply increment for each new request.
S   *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
S   *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
S#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
S  static u32_t xid;
S#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
S  static u32_t xid = 0xABCD0000;
S#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
S#else
S  if (!xid_initialised) {
S    xid = DHCP_GLOBAL_XID;
S    xid_initialised = !xid_initialised;
S  }
S#endif
S  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
S  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
S  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
S  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
S  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
S  if (dhcp->p_out == NULL) {
S    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
S      ("dhcp_create_msg(): could not allocate pbuf\n"));
S    return ERR_MEM;
S  }
S  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
S           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
S
S  /* reuse transaction identifier in retransmissions */
S  if (dhcp->tries == 0) {
S#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
S    xid = LWIP_RAND();
S#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
S    xid++;
S#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
S  }
S  dhcp->xid = xid;
S  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
S              ("transaction id xid(%"X32_F")\n", xid));
S
S  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
S
S  dhcp->msg_out->op = DHCP_BOOTREQUEST;
S  /* TODO: make link layer independent */
S  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
S  dhcp->msg_out->hlen = netif->hwaddr_len;
S  dhcp->msg_out->hops = 0;
S  dhcp->msg_out->xid = htonl(dhcp->xid);
S  dhcp->msg_out->secs = 0;
S  /* we don't need the broadcast flag since we can receive unicast traffic
S     before being fully configured! */
S  dhcp->msg_out->flags = 0;
S  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
S  /* set ciaddr to netif->ip_addr based on message_type and state */
S  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
S      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
S       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
S    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
S  }
S  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
S  ip_addr_set_zero(&dhcp->msg_out->siaddr);
S  ip_addr_set_zero(&dhcp->msg_out->giaddr);
S  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
S    /* copy netif hardware address, pad with zeroes */
S    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
S  }
S  for (i = 0; i < DHCP_SNAME_LEN; i++) {
S    dhcp->msg_out->sname[i] = 0;
S  }
S  for (i = 0; i < DHCP_FILE_LEN; i++) {
S    dhcp->msg_out->file[i] = 0;
S  }
S  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
S  dhcp->options_out_len = 0;
S  /* fill options field with an incrementing array (for debugging purposes) */
S  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
S    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
S  }
S  /* Add option MESSAGE_TYPE */
S  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
S  dhcp_option_byte(dhcp, message_type);
S  return ERR_OK;
S}
S
S/**
S * Free previously allocated memory used to send a DHCP request.
S *
S * @param dhcp the dhcp struct to free the request from
S */
Sstatic void
Sdhcp_delete_msg(struct dhcp *dhcp)
S{
S  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
S  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
S  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
S  if (dhcp->p_out != NULL) {
S    pbuf_free(dhcp->p_out);
S  }
S  dhcp->p_out = NULL;
S  dhcp->msg_out = NULL;
S}
S
S/**
S * Add a DHCP message trailer
S *
S * Adds the END option to the DHCP message, and if
S * necessary, up to three padding bytes.
S *
S * @param dhcp DHCP state structure
S */
Sstatic void
Sdhcp_option_trailer(struct dhcp *dhcp)
S{
S  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
S  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
S  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
S  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
S  /* packet is too small, or not 4 byte aligned? */
S  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
S         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
S    /* add a fill/padding byte */
S    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
S  }
S}
S
N#endif /* LWIP_DHCP */
