; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\tcp_client_demo.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\tcp_client_demo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\ -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\lwip\src\api -I..\..\lwip\src\arch -I..\..\lwip\src\include -I..\..\lwip\src\netif -I..\..\lwip\src\include\ipv4 -I..\..\Source\inc -I..\..\lwip\src -I..\..\Source\uIP-1.0\uip -I..\..\Source\uIP-APP -I..\..\Source\uIP-1.0\apps\webserver -IE:\git_projects\enc28j60-for-uip\Project\RVMDK\RTE -I"D:\Program Files\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=518 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\tcp_client_demo.crf ..\..\Source\uIP-APP\tcp_client_demo.c]
                          THUMB

                          AREA ||i.tcp_client_aborted||, CODE, READONLY, ALIGN=2

                  tcp_client_aborted PROC
;;;65     //终止连接				    
;;;66     void tcp_client_aborted(void)
000000  b510              PUSH     {r4,lr}
;;;67     {
;;;68     	tcp_client_sta&=~(1<<7);	//标志没有连接
000002  4806              LDR      r0,|L1.28|
000004  7800              LDRB     r0,[r0,#0]  ; tcp_client_sta
000006  f0200080          BIC      r0,r0,#0x80
00000a  4904              LDR      r1,|L1.28|
00000c  7008              STRB     r0,[r1,#0]
;;;69     	tcp_client_reconnect();		//尝试重新连接
00000e  f7fffffe          BL       tcp_client_reconnect
;;;70     	uip_log("tcp_client aborted!\r\n");//打印log
000012  a003              ADR      r0,|L1.32|
000014  f7fffffe          BL       uip_log
;;;71     }
000018  bd10              POP      {r4,pc}
;;;72     //连接超时
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      tcp_client_sta
                  |L1.32|
000020  7463705f          DCB      "tcp_client aborted!\r\n",0
000024  636c6965
000028  6e742061
00002c  626f7274
000030  6564210d
000034  0a00    
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.tcp_client_acked||, CODE, READONLY, ALIGN=2

                  tcp_client_acked PROC
;;;96     //发送的数据成功送达
;;;97     void tcp_client_acked(void)
000000  b510              PUSH     {r4,lr}
;;;98     {											    
;;;99     	struct tcp_demo_appstate *s=(struct tcp_demo_appstate *)&uip_conn->appstate;
000002  4805              LDR      r0,|L2.24|
000004  6800              LDR      r0,[r0,#0]  ; uip_conn
000006  f100041c          ADD      r4,r0,#0x1c
;;;100    	s->textlen=0;//发送清零
00000a  2000              MOVS     r0,#0
00000c  60a0              STR      r0,[r4,#8]
;;;101    	uip_log("tcp_client acked!\r\n");//表示成功发送		 
00000e  a003              ADR      r0,|L2.28|
000010  f7fffffe          BL       uip_log
;;;102    }
000014  bd10              POP      {r4,pc}
;;;103    //发送数据给服务端
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      uip_conn
                  |L2.28|
00001c  7463705f          DCB      "tcp_client acked!\r\n",0
000020  636c6965
000024  6e742061
000028  636b6564
00002c  210d0a00

                          AREA ||i.tcp_client_closed||, CODE, READONLY, ALIGN=2

                  tcp_client_closed PROC
;;;78     //连接关闭
;;;79     void tcp_client_closed(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81     	tcp_client_sta&=~(1<<7);	//标志没有连接
000002  4806              LDR      r0,|L3.28|
000004  7800              LDRB     r0,[r0,#0]  ; tcp_client_sta
000006  f0200080          BIC      r0,r0,#0x80
00000a  4904              LDR      r1,|L3.28|
00000c  7008              STRB     r0,[r1,#0]
;;;82     	tcp_client_reconnect();		//尝试重新连接
00000e  f7fffffe          BL       tcp_client_reconnect
;;;83     	uip_log("tcp_client closed!\r\n");//打印log
000012  a003              ADR      r0,|L3.32|
000014  f7fffffe          BL       uip_log
;;;84     }	 
000018  bd10              POP      {r4,pc}
;;;85     //连接建立
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      tcp_client_sta
                  |L3.32|
000020  7463705f          DCB      "tcp_client closed!\r\n",0
000024  636c6965
000028  6e742063
00002c  6c6f7365
000030  64210d0a
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.tcp_client_connected||, CODE, READONLY, ALIGN=2

                  tcp_client_connected PROC
;;;85     //连接建立
;;;86     void tcp_client_connected(void)
000000  b510              PUSH     {r4,lr}
;;;87     { 
;;;88     	struct tcp_demo_appstate *s=(struct tcp_demo_appstate *)&uip_conn->appstate;
000002  480b              LDR      r0,|L4.48|
000004  6800              LDR      r0,[r0,#0]  ; uip_conn
000006  f100041c          ADD      r4,r0,#0x1c
;;;89      	tcp_client_sta|=1<<7;		//标志连接成功
00000a  480a              LDR      r0,|L4.52|
00000c  7800              LDRB     r0,[r0,#0]  ; tcp_client_sta
00000e  f0400080          ORR      r0,r0,#0x80
000012  4908              LDR      r1,|L4.52|
000014  7008              STRB     r0,[r1,#0]
;;;90       	uip_log("tcp_client connected!\r\n");//打印log
000016  a008              ADR      r0,|L4.56|
000018  f7fffffe          BL       uip_log
;;;91     	s->state=STATE_CMD; 		//指令状态
00001c  2000              MOVS     r0,#0
00001e  7020              STRB     r0,[r4,#0]
;;;92     	s->textlen=0;
000020  60a0              STR      r0,[r4,#8]
;;;93     	s->textptr="ALIENTEK STM32 Board Connected Successfully!\r\n";//回应消息
000022  a00b              ADR      r0,|L4.80|
000024  6060              STR      r0,[r4,#4]
;;;94     	s->textlen=strlen((char *)s->textptr);	  
000026  6860              LDR      r0,[r4,#4]
000028  f7fffffe          BL       strlen
00002c  60a0              STR      r0,[r4,#8]
;;;95     }
00002e  bd10              POP      {r4,pc}
;;;96     //发送的数据成功送达
                          ENDP

                  |L4.48|
                          DCD      uip_conn
                  |L4.52|
                          DCD      tcp_client_sta
                  |L4.56|
000038  7463705f          DCB      "tcp_client connected!\r\n",0
00003c  636c6965
000040  6e742063
000044  6f6e6e65
000048  63746564
00004c  210d0a00
                  |L4.80|
000050  414c4945          DCB      "ALIENTEK STM32 Board Connected Successfully!\r\n",0
000054  4e54454b
000058  2053544d
00005c  33322042
000060  6f617264
000064  20436f6e
000068  6e656374
00006c  65642053
000070  75636365
000074  73736675
000078  6c6c7921
00007c  0d0a00  
00007f  00                DCB      0

                          AREA ||i.tcp_client_demo_appcall||, CODE, READONLY, ALIGN=2

                  tcp_client_demo_appcall PROC
;;;23     //例如 : 当一个TCP连接被创建时、有新的数据到达、数据已经被应答、数据需要重发等事件
;;;24     void tcp_client_demo_appcall(void)
000000  b510              PUSH     {r4,lr}
;;;25     {		  
;;;26      	struct tcp_demo_appstate *s = (struct tcp_demo_appstate *)&uip_conn->appstate;
000002  4839              LDR      r0,|L5.232|
000004  6800              LDR      r0,[r0,#0]  ; uip_conn
000006  f100041c          ADD      r4,r0,#0x1c
;;;27     	if(uip_aborted())tcp_client_aborted();		//连接终止	   
00000a  4838              LDR      r0,|L5.236|
00000c  7800              LDRB     r0,[r0,#0]  ; uip_flags
00000e  f0000020          AND      r0,r0,#0x20
000012  b108              CBZ      r0,|L5.24|
000014  f7fffffe          BL       tcp_client_aborted
                  |L5.24|
;;;28     	if(uip_timedout())tcp_client_timedout();	//连接超时   
000018  4834              LDR      r0,|L5.236|
00001a  7800              LDRB     r0,[r0,#0]  ; uip_flags
00001c  f0000080          AND      r0,r0,#0x80
000020  b108              CBZ      r0,|L5.38|
000022  f7fffffe          BL       tcp_client_timedout
                  |L5.38|
;;;29     	if(uip_closed())tcp_client_closed();		//连接关闭	   
000026  4831              LDR      r0,|L5.236|
000028  7800              LDRB     r0,[r0,#0]  ; uip_flags
00002a  f0000010          AND      r0,r0,#0x10
00002e  b108              CBZ      r0,|L5.52|
000030  f7fffffe          BL       tcp_client_closed
                  |L5.52|
;;;30      	if(uip_connected())tcp_client_connected();	//连接成功	    
000034  482d              LDR      r0,|L5.236|
000036  7800              LDRB     r0,[r0,#0]  ; uip_flags
000038  f0000040          AND      r0,r0,#0x40
00003c  b108              CBZ      r0,|L5.66|
00003e  f7fffffe          BL       tcp_client_connected
                  |L5.66|
;;;31     	if(uip_acked())tcp_client_acked();			//发送的数据成功送达 
000042  482a              LDR      r0,|L5.236|
000044  7800              LDRB     r0,[r0,#0]  ; uip_flags
000046  f0000001          AND      r0,r0,#1
00004a  b108              CBZ      r0,|L5.80|
00004c  f7fffffe          BL       tcp_client_acked
                  |L5.80|
;;;32      	//接收到一个新的TCP数据包 
;;;33     	if (uip_newdata())
000050  4826              LDR      r0,|L5.236|
000052  7800              LDRB     r0,[r0,#0]  ; uip_flags
000054  f0000002          AND      r0,r0,#2
000058  b1c8              CBZ      r0,|L5.142|
;;;34     	{
;;;35     		if((tcp_client_sta&(1<<6))==0)//还未收到数据
00005a  4825              LDR      r0,|L5.240|
00005c  7800              LDRB     r0,[r0,#0]  ; tcp_client_sta
00005e  f0000040          AND      r0,r0,#0x40
000062  bb20              CBNZ     r0,|L5.174|
;;;36     		{
;;;37     			if(uip_len>199)
000064  4823              LDR      r0,|L5.244|
000066  8800              LDRH     r0,[r0,#0]  ; uip_len
000068  28c7              CMP      r0,#0xc7
00006a  dd04              BLE      |L5.118|
;;;38     			{		   
;;;39     				((uint8_t*)uip_appdata)[199]=0;
00006c  2000              MOVS     r0,#0
00006e  4922              LDR      r1,|L5.248|
000070  6809              LDR      r1,[r1,#0]  ; uip_appdata
000072  f88100c7          STRB     r0,[r1,#0xc7]
                  |L5.118|
;;;40     			}		    
;;;41     	    	strcpy((char*)tcp_client_databuf,uip_appdata);				   	  		  
000076  4820              LDR      r0,|L5.248|
000078  6801              LDR      r1,[r0,#0]  ; uip_appdata
00007a  4820              LDR      r0,|L5.252|
00007c  f7fffffe          BL       strcpy
;;;42     			tcp_client_sta|=1<<6;//表示收到客户端数据
000080  481b              LDR      r0,|L5.240|
000082  7800              LDRB     r0,[r0,#0]  ; tcp_client_sta
000084  f0400040          ORR      r0,r0,#0x40
000088  4919              LDR      r1,|L5.240|
00008a  7008              STRB     r0,[r1,#0]
00008c  e00f              B        |L5.174|
                  |L5.142|
;;;43     		}				  
;;;44     	}else if(tcp_client_sta&(1<<5))//有数据需要发送
00008e  4818              LDR      r0,|L5.240|
000090  7800              LDRB     r0,[r0,#0]  ; tcp_client_sta
000092  f0000020          AND      r0,r0,#0x20
000096  b150              CBZ      r0,|L5.174|
;;;45     	{
;;;46     		s->textptr=tcp_client_databuf;
000098  4818              LDR      r0,|L5.252|
00009a  6060              STR      r0,[r4,#4]
;;;47     		s->textlen=strlen((const char*)tcp_client_databuf);
00009c  f7fffffe          BL       strlen
0000a0  60a0              STR      r0,[r4,#8]
;;;48     		tcp_client_sta&=~(1<<5);//清除标记
0000a2  4813              LDR      r0,|L5.240|
0000a4  7800              LDRB     r0,[r0,#0]  ; tcp_client_sta
0000a6  f0200020          BIC      r0,r0,#0x20
0000aa  4911              LDR      r1,|L5.240|
0000ac  7008              STRB     r0,[r1,#0]
                  |L5.174|
;;;49     	}  
;;;50     	//当需要重发、新数据到达、数据包送达、连接建立时，通知uip发送数据 
;;;51     	if(uip_rexmit()||uip_newdata()||uip_acked()||uip_connected()||uip_poll())
0000ae  480f              LDR      r0,|L5.236|
0000b0  7800              LDRB     r0,[r0,#0]  ; uip_flags
0000b2  f0000004          AND      r0,r0,#4
0000b6  b998              CBNZ     r0,|L5.224|
0000b8  480c              LDR      r0,|L5.236|
0000ba  7800              LDRB     r0,[r0,#0]  ; uip_flags
0000bc  f0000002          AND      r0,r0,#2
0000c0  b970              CBNZ     r0,|L5.224|
0000c2  480a              LDR      r0,|L5.236|
0000c4  7800              LDRB     r0,[r0,#0]  ; uip_flags
0000c6  f0000001          AND      r0,r0,#1
0000ca  b948              CBNZ     r0,|L5.224|
0000cc  4807              LDR      r0,|L5.236|
0000ce  7800              LDRB     r0,[r0,#0]  ; uip_flags
0000d0  f0000040          AND      r0,r0,#0x40
0000d4  b920              CBNZ     r0,|L5.224|
0000d6  4805              LDR      r0,|L5.236|
0000d8  7800              LDRB     r0,[r0,#0]  ; uip_flags
0000da  f0000008          AND      r0,r0,#8
0000de  b108              CBZ      r0,|L5.228|
                  |L5.224|
;;;52     	{
;;;53     		tcp_client_senddata();
0000e0  f7fffffe          BL       tcp_client_senddata
                  |L5.228|
;;;54     	}											   
;;;55     }
0000e4  bd10              POP      {r4,pc}
;;;56     //这里我们假定Server端的IP地址为:192.168.1.103
                          ENDP

0000e6  0000              DCW      0x0000
                  |L5.232|
                          DCD      uip_conn
                  |L5.236|
                          DCD      uip_flags
                  |L5.240|
                          DCD      tcp_client_sta
                  |L5.244|
                          DCD      uip_len
                  |L5.248|
                          DCD      uip_appdata
                  |L5.252|
                          DCD      tcp_client_databuf

                          AREA ||i.tcp_client_reconnect||, CODE, READONLY, ALIGN=1

                  tcp_client_reconnect PROC
;;;58     //尝试重新连接
;;;59     void tcp_client_reconnect()
000000  b538              PUSH     {r3-r5,lr}
;;;60     {
;;;61     	uip_ipaddr_t ipaddr;
;;;62     	uip_ipaddr(&ipaddr,192,168,1,103);	//设置IP为192.168.1.103
000002  bf00              NOP      
000004  f64a00c0          MOV      r0,#0xa8c0
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  f2467001          MOV      r0,#0x6701
000010  f8ad0002          STRH     r0,[sp,#2]
000014  bf00              NOP      
;;;63     	uip_connect(&ipaddr,htons(1400)); 	//端口为1400
000016  f44f60af          MOV      r0,#0x578
00001a  f7fffffe          BL       htons
00001e  4604              MOV      r4,r0
000020  4621              MOV      r1,r4
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       uip_connect
;;;64     }
000028  bd38              POP      {r3-r5,pc}
;;;65     //终止连接				    
                          ENDP


                          AREA ||i.tcp_client_senddata||, CODE, READONLY, ALIGN=2

                  tcp_client_senddata PROC
;;;103    //发送数据给服务端
;;;104    void tcp_client_senddata(void)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106    	struct tcp_demo_appstate *s = (struct tcp_demo_appstate *)&uip_conn->appstate;
000002  4806              LDR      r0,|L7.28|
000004  6800              LDR      r0,[r0,#0]  ; uip_conn
000006  f100041c          ADD      r4,r0,#0x1c
;;;107    	//s->textptr:发送的数据包缓冲区指针
;;;108    	//s->textlen:数据包的大小（单位字节）		   
;;;109    	if(s->textlen>0)uip_send(s->textptr, s->textlen);//发送TCP数据包	 
00000a  68a0              LDR      r0,[r4,#8]
00000c  2800              CMP      r0,#0
00000e  dd03              BLE      |L7.24|
000010  e9d40101          LDRD     r0,r1,[r4,#4]
000014  f7fffffe          BL       uip_send
                  |L7.24|
;;;110    }
000018  bd10              POP      {r4,pc}
;;;111    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      uip_conn

                          AREA ||i.tcp_client_timedout||, CODE, READONLY, ALIGN=2

                  tcp_client_timedout PROC
;;;72     //连接超时
;;;73     void tcp_client_timedout(void)
000000  b510              PUSH     {r4,lr}
;;;74     {
;;;75     	tcp_client_sta&=~(1<<7);	//标志没有连接	   
000002  4805              LDR      r0,|L8.24|
000004  7800              LDRB     r0,[r0,#0]  ; tcp_client_sta
000006  f0200080          BIC      r0,r0,#0x80
00000a  4903              LDR      r1,|L8.24|
00000c  7008              STRB     r0,[r1,#0]
;;;76     	uip_log("tcp_client timeout!\r\n");//打印log
00000e  a003              ADR      r0,|L8.28|
000010  f7fffffe          BL       uip_log
;;;77     }
000014  bd10              POP      {r4,pc}
;;;78     //连接关闭
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      tcp_client_sta
                  |L8.28|
00001c  7463705f          DCB      "tcp_client timeout!\r\n",0
000020  636c6965
000024  6e742074
000028  696d656f
00002c  7574210d
000030  0a00    
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tcp_client_databuf
                          %        200

                          AREA ||.data||, DATA, ALIGN=0

                  tcp_client_sta
000000  00                DCB      0x00
