; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\timers.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\timers.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\ -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\lwip\src\api -I..\..\lwip\src\arch -I..\..\lwip\src\include -I..\..\lwip\src\netif -I..\..\lwip\src\include\ipv4 -I..\..\Source\inc -I..\..\lwip\src -I..\..\Source\uIP-1.0\uip -I..\..\Source\uIP-APP -I..\..\Source\uIP-1.0\apps\webserver -IE:\git_projects\enc28j60-for-uip\Project\RVMDK\RTE -I"D:\Program Files\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=518 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\timers.crf ..\..\lwip\src\core\timers.c]
                          THUMB

                          AREA ||i.arp_timer||, CODE, READONLY, ALIGN=2

                  arp_timer PROC
;;;134    static void
;;;135    arp_timer(void *arg)
000000  b510              PUSH     {r4,lr}
;;;136    {
000002  4604              MOV      r4,r0
;;;137      LWIP_UNUSED_ARG(arg);
;;;138      LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
000004  bf00              NOP      
000006  bf00              NOP      
;;;139      etharp_tmr();
000008  f7fffffe          BL       etharp_tmr
;;;140      sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
00000c  2200              MOVS     r2,#0
00000e  4903              LDR      r1,|L1.28|
000010  f2413088          MOV      r0,#0x1388
000014  f7fffffe          BL       sys_timeout
;;;141    }
000018  bd10              POP      {r4,pc}
;;;142    #endif /* LWIP_ARP */
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      arp_timer

                          AREA ||i.ip_reass_timer||, CODE, READONLY, ALIGN=2

                  ip_reass_timer PROC
;;;118    static void
;;;119    ip_reass_timer(void *arg)
000000  b510              PUSH     {r4,lr}
;;;120    {
000002  4604              MOV      r4,r0
;;;121      LWIP_UNUSED_ARG(arg);
;;;122      LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
000004  bf00              NOP      
000006  bf00              NOP      
;;;123      ip_reass_tmr();
000008  f7fffffe          BL       ip_reass_tmr
;;;124      sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
00000c  2200              MOVS     r2,#0
00000e  4903              LDR      r1,|L2.28|
000010  f44f707a          MOV      r0,#0x3e8
000014  f7fffffe          BL       sys_timeout
;;;125    }
000018  bd10              POP      {r4,pc}
;;;126    #endif /* IP_REASSEMBLY */
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      ip_reass_timer

                          AREA ||i.sys_check_timeouts||, CODE, READONLY, ALIGN=2

                  sys_check_timeouts PROC
;;;357    void
;;;358    sys_check_timeouts(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;359    {
;;;360      if (next_timeout) {
000004  4819              LDR      r0,|L3.108|
000006  6800              LDR      r0,[r0,#0]  ; next_timeout
000008  b368              CBZ      r0,|L3.102|
;;;361        struct sys_timeo *tmptimeout;
;;;362        u32_t diff;
;;;363        sys_timeout_handler handler;
;;;364        void *arg;
;;;365        u8_t had_one;
;;;366        u32_t now;
;;;367    
;;;368        now = sys_now();
00000a  f7fffffe          BL       sys_now
00000e  4680              MOV      r8,r0
;;;369        /* this cares for wraparounds */
;;;370        diff = now - timeouts_last_time;
000010  4817              LDR      r0,|L3.112|
000012  6800              LDR      r0,[r0,#0]  ; timeouts_last_time
000014  eba80600          SUB      r6,r8,r0
;;;371        do
000018  bf00              NOP      
                  |L3.26|
;;;372        {
;;;373    #if PBUF_POOL_FREE_OOSEQ
;;;374          PBUF_CHECK_FREE_OOSEQ();
00001a  bf00              NOP      
00001c  4815              LDR      r0,|L3.116|
00001e  7800              LDRB     r0,[r0,#0]  ; pbuf_free_ooseq_pending
000020  b108              CBZ      r0,|L3.38|
000022  f7fffffe          BL       pbuf_free_ooseq
                  |L3.38|
000026  bf00              NOP      
;;;375    #endif /* PBUF_POOL_FREE_OOSEQ */
;;;376          had_one = 0;
000028  f04f0900          MOV      r9,#0
;;;377          tmptimeout = next_timeout;
00002c  480f              LDR      r0,|L3.108|
00002e  6804              LDR      r4,[r0,#0]  ; next_timeout
;;;378          if (tmptimeout && (tmptimeout->time <= diff)) {
000030  b1ac              CBZ      r4,|L3.94|
000032  6860              LDR      r0,[r4,#4]
000034  42b0              CMP      r0,r6
000036  d812              BHI      |L3.94|
;;;379            /* timeout has expired */
;;;380            had_one = 1;
000038  f04f0901          MOV      r9,#1
;;;381            timeouts_last_time = now;
00003c  480c              LDR      r0,|L3.112|
00003e  f8c08000          STR      r8,[r0,#0]  ; timeouts_last_time
;;;382            diff -= tmptimeout->time;
000042  6860              LDR      r0,[r4,#4]
000044  1a36              SUBS     r6,r6,r0
;;;383            next_timeout = tmptimeout->next;
000046  4909              LDR      r1,|L3.108|
000048  6820              LDR      r0,[r4,#0]
00004a  6008              STR      r0,[r1,#0]  ; next_timeout
;;;384            handler = tmptimeout->h;
00004c  68a5              LDR      r5,[r4,#8]
;;;385            arg = tmptimeout->arg;
00004e  68e7              LDR      r7,[r4,#0xc]
;;;386    #if LWIP_DEBUG_TIMERNAMES
;;;387            if (handler != NULL) {
;;;388              LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
;;;389                tmptimeout->handler_name, arg));
;;;390            }
;;;391    #endif /* LWIP_DEBUG_TIMERNAMES */
;;;392            memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
000050  4621              MOV      r1,r4
000052  2007              MOVS     r0,#7
000054  f7fffffe          BL       memp_free
;;;393            if (handler != NULL) {
000058  b10d              CBZ      r5,|L3.94|
;;;394              handler(arg);
00005a  4638              MOV      r0,r7
00005c  47a8              BLX      r5
                  |L3.94|
;;;395            }
;;;396          }
;;;397        /* repeat until all expired timers have been called */
;;;398        }while(had_one);
00005e  f1b90f00          CMP      r9,#0
000062  d1da              BNE      |L3.26|
;;;399      }
000064  bf00              NOP      
                  |L3.102|
;;;400    }
000066  e8bd87f0          POP      {r4-r10,pc}
;;;401    
                          ENDP

00006a  0000              DCW      0x0000
                  |L3.108|
                          DCD      next_timeout
                  |L3.112|
                          DCD      timeouts_last_time
                  |L3.116|
                          DCD      pbuf_free_ooseq_pending

                          AREA ||i.sys_restart_timeouts||, CODE, READONLY, ALIGN=2

                  sys_restart_timeouts PROC
;;;407    void
;;;408    sys_restart_timeouts(void)
000000  b510              PUSH     {r4,lr}
;;;409    {
;;;410      timeouts_last_time = sys_now();
000002  f7fffffe          BL       sys_now
000006  4901              LDR      r1,|L4.12|
000008  6008              STR      r0,[r1,#0]  ; timeouts_last_time
;;;411    }
00000a  bd10              POP      {r4,pc}
;;;412    
                          ENDP

                  |L4.12|
                          DCD      timeouts_last_time

                          AREA ||i.sys_timeout||, CODE, READONLY, ALIGN=2

                  sys_timeout PROC
;;;265    void
;;;266    sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;267    #endif /* LWIP_DEBUG_TIMERNAMES */
;;;268    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;269      struct sys_timeo *timeout, *t;
;;;270    
;;;271      timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
00000a  2007              MOVS     r0,#7
00000c  f7fffffe          BL       memp_malloc
000010  4604              MOV      r4,r0
;;;272      if (timeout == NULL) {
000012  b94c              CBNZ     r4,|L5.40|
;;;273        LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
000014  bf00              NOP      
000016  b924              CBNZ     r4,|L5.34|
000018  a022              ADR      r0,|L5.164|
00001a  f7fffffe          BL       __2printf
00001e  bf00              NOP      
                  |L5.32|
000020  e7fe              B        |L5.32|
                  |L5.34|
000022  bf00              NOP      
                  |L5.36|
;;;274        return;
;;;275      }
;;;276      timeout->next = NULL;
;;;277      timeout->h = handler;
;;;278      timeout->arg = arg;
;;;279      timeout->time = msecs;
;;;280    #if LWIP_DEBUG_TIMERNAMES
;;;281      timeout->handler_name = handler_name;
;;;282      LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
;;;283        (void *)timeout, msecs, handler_name, (void *)arg));
;;;284    #endif /* LWIP_DEBUG_TIMERNAMES */
;;;285    
;;;286      if (next_timeout == NULL) {
;;;287        next_timeout = timeout;
;;;288        return;
;;;289      }
;;;290    
;;;291      if (next_timeout->time > msecs) {
;;;292        next_timeout->time -= msecs;
;;;293        timeout->next = next_timeout;
;;;294        next_timeout = timeout;
;;;295      } else {
;;;296        for(t = next_timeout; t != NULL; t = t->next) {
;;;297          timeout->time -= t->time;
;;;298          if (t->next == NULL || t->next->time > timeout->time) {
;;;299            if (t->next != NULL) {
;;;300              t->next->time -= timeout->time;
;;;301            }
;;;302            timeout->next = t->next;
;;;303            t->next = timeout;
;;;304            break;
;;;305          }
;;;306        }
;;;307      }
;;;308    }
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L5.40|
000028  2000              MOVS     r0,#0                 ;276
00002a  6020              STR      r0,[r4,#0]            ;276
00002c  60a7              STR      r7,[r4,#8]            ;277
00002e  f8c4800c          STR      r8,[r4,#0xc]          ;278
000032  6066              STR      r6,[r4,#4]            ;279
000034  482b              LDR      r0,|L5.228|
000036  6800              LDR      r0,[r0,#0]            ;286  ; next_timeout
000038  b910              CBNZ     r0,|L5.64|
00003a  482a              LDR      r0,|L5.228|
00003c  6004              STR      r4,[r0,#0]            ;287  ; next_timeout
00003e  e7f1              B        |L5.36|
                  |L5.64|
000040  4828              LDR      r0,|L5.228|
000042  6800              LDR      r0,[r0,#0]            ;291  ; next_timeout
000044  6840              LDR      r0,[r0,#4]            ;291
000046  42b0              CMP      r0,r6                 ;291
000048  d90c              BLS      |L5.100|
00004a  4826              LDR      r0,|L5.228|
00004c  6800              LDR      r0,[r0,#0]            ;292  ; next_timeout
00004e  6840              LDR      r0,[r0,#4]            ;292
000050  1b80              SUBS     r0,r0,r6              ;292
000052  4924              LDR      r1,|L5.228|
000054  6809              LDR      r1,[r1,#0]            ;292  ; next_timeout
000056  6048              STR      r0,[r1,#4]            ;292
000058  4822              LDR      r0,|L5.228|
00005a  6800              LDR      r0,[r0,#0]            ;293  ; next_timeout
00005c  6020              STR      r0,[r4,#0]            ;293
00005e  4821              LDR      r0,|L5.228|
000060  6004              STR      r4,[r0,#0]            ;294  ; next_timeout
000062  e01d              B        |L5.160|
                  |L5.100|
000064  481f              LDR      r0,|L5.228|
000066  6805              LDR      r5,[r0,#0]            ;296  ; next_timeout
000068  e017              B        |L5.154|
                  |L5.106|
00006a  6860              LDR      r0,[r4,#4]            ;297
00006c  6869              LDR      r1,[r5,#4]            ;297
00006e  1a40              SUBS     r0,r0,r1              ;297
000070  6060              STR      r0,[r4,#4]            ;297
000072  6828              LDR      r0,[r5,#0]            ;298
000074  b120              CBZ      r0,|L5.128|
000076  6828              LDR      r0,[r5,#0]            ;298
000078  6840              LDR      r0,[r0,#4]            ;298
00007a  6861              LDR      r1,[r4,#4]            ;298
00007c  4288              CMP      r0,r1                 ;298
00007e  d90b              BLS      |L5.152|
                  |L5.128|
000080  6828              LDR      r0,[r5,#0]            ;299
000082  b128              CBZ      r0,|L5.144|
000084  6828              LDR      r0,[r5,#0]            ;300
000086  6840              LDR      r0,[r0,#4]            ;300
000088  6861              LDR      r1,[r4,#4]            ;300
00008a  1a40              SUBS     r0,r0,r1              ;300
00008c  6829              LDR      r1,[r5,#0]            ;300
00008e  6048              STR      r0,[r1,#4]            ;300
                  |L5.144|
000090  6828              LDR      r0,[r5,#0]            ;302
000092  6020              STR      r0,[r4,#0]            ;302
000094  602c              STR      r4,[r5,#0]            ;303
000096  e002              B        |L5.158|
                  |L5.152|
000098  682d              LDR      r5,[r5,#0]            ;296
                  |L5.154|
00009a  2d00              CMP      r5,#0                 ;296
00009c  d1e5              BNE      |L5.106|
                  |L5.158|
00009e  bf00              NOP                            ;304
                  |L5.160|
0000a0  bf00              NOP      
0000a2  e7bf              B        |L5.36|
;;;309    
                          ENDP

                  |L5.164|
0000a4  7379735f          DCB      "sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is "
0000a8  74696d65
0000ac  6f75743a
0000b0  2074696d
0000b4  656f7574
0000b8  20213d20
0000bc  4e554c4c
0000c0  2c20706f
0000c4  6f6c204d
0000c8  454d505f
0000cc  5359535f
0000d0  54494d45
0000d4  4f555420
0000d8  697320  
0000db  656d7074          DCB      "empty",0
0000df  7900    
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L5.228|
                          DCD      next_timeout

                          AREA ||i.sys_timeouts_init||, CODE, READONLY, ALIGN=2

                  sys_timeouts_init PROC
;;;222    /** Initialize this module */
;;;223    void sys_timeouts_init(void)
000000  b510              PUSH     {r4,lr}
;;;224    {
;;;225    #if IP_REASSEMBLY
;;;226      sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
000002  2200              MOVS     r2,#0
000004  4907              LDR      r1,|L6.36|
000006  f44f707a          MOV      r0,#0x3e8
00000a  f7fffffe          BL       sys_timeout
;;;227    #endif /* IP_REASSEMBLY */
;;;228    #if LWIP_ARP
;;;229      sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
00000e  2200              MOVS     r2,#0
000010  4905              LDR      r1,|L6.40|
000012  f2413088          MOV      r0,#0x1388
000016  f7fffffe          BL       sys_timeout
;;;230    #endif /* LWIP_ARP */
;;;231    #if LWIP_DHCP
;;;232      sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
;;;233      sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
;;;234    #endif /* LWIP_DHCP */
;;;235    #if LWIP_AUTOIP
;;;236      sys_timeout(AUTOIP_TMR_INTERVAL, autoip_timer, NULL);
;;;237    #endif /* LWIP_AUTOIP */
;;;238    #if LWIP_IGMP
;;;239      sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
;;;240    #endif /* LWIP_IGMP */
;;;241    #if LWIP_DNS
;;;242      sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
;;;243    #endif /* LWIP_DNS */
;;;244    
;;;245    #if NO_SYS
;;;246      /* Initialise timestamp for sys_check_timeouts */
;;;247      timeouts_last_time = sys_now();
00001a  f7fffffe          BL       sys_now
00001e  4903              LDR      r1,|L6.44|
000020  6008              STR      r0,[r1,#0]  ; timeouts_last_time
;;;248    #endif
;;;249    }
000022  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  |L6.36|
                          DCD      ip_reass_timer
                  |L6.40|
                          DCD      arp_timer
                  |L6.44|
                          DCD      timeouts_last_time

                          AREA ||i.sys_untimeout||, CODE, READONLY, ALIGN=2

                  sys_untimeout PROC
;;;320    void
;;;321    sys_untimeout(sys_timeout_handler handler, void *arg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;322    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;323      struct sys_timeo *prev_t, *t;
;;;324    
;;;325      if (next_timeout == NULL) {
000008  4814              LDR      r0,|L7.92|
00000a  6800              LDR      r0,[r0,#0]  ; next_timeout
00000c  b908              CBNZ     r0,|L7.18|
                  |L7.14|
;;;326        return;
;;;327      }
;;;328    
;;;329      for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
;;;330        if ((t->h == handler) && (t->arg == arg)) {
;;;331          /* We have a match */
;;;332          /* Unlink from previous in list */
;;;333          if (prev_t == NULL) {
;;;334            next_timeout = t->next;
;;;335          } else {
;;;336            prev_t->next = t->next;
;;;337          }
;;;338          /* If not the last one, add time of this one back to next */
;;;339          if (t->next != NULL) {
;;;340            t->next->time += t->time;
;;;341          }
;;;342          memp_free(MEMP_SYS_TIMEOUT, t);
;;;343          return;
;;;344        }
;;;345      }
;;;346      return;
;;;347    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L7.18|
000012  4812              LDR      r0,|L7.92|
000014  6804              LDR      r4,[r0,#0]            ;329  ; next_timeout
000016  2500              MOVS     r5,#0                 ;329
000018  e01b              B        |L7.82|
                  |L7.26|
00001a  68a0              LDR      r0,[r4,#8]            ;330
00001c  42b0              CMP      r0,r6                 ;330
00001e  d116              BNE      |L7.78|
000020  68e0              LDR      r0,[r4,#0xc]          ;330
000022  42b8              CMP      r0,r7                 ;330
000024  d113              BNE      |L7.78|
000026  b91d              CBNZ     r5,|L7.48|
000028  490c              LDR      r1,|L7.92|
00002a  6820              LDR      r0,[r4,#0]            ;334
00002c  6008              STR      r0,[r1,#0]            ;334  ; next_timeout
00002e  e001              B        |L7.52|
                  |L7.48|
000030  6820              LDR      r0,[r4,#0]            ;336
000032  6028              STR      r0,[r5,#0]            ;336
                  |L7.52|
000034  6820              LDR      r0,[r4,#0]            ;339
000036  b128              CBZ      r0,|L7.68|
000038  6820              LDR      r0,[r4,#0]            ;340
00003a  6840              LDR      r0,[r0,#4]            ;340
00003c  6861              LDR      r1,[r4,#4]            ;340
00003e  4408              ADD      r0,r0,r1              ;340
000040  6821              LDR      r1,[r4,#0]            ;340
000042  6048              STR      r0,[r1,#4]            ;340
                  |L7.68|
000044  4621              MOV      r1,r4                 ;342
000046  2007              MOVS     r0,#7                 ;342
000048  f7fffffe          BL       memp_free
00004c  e7df              B        |L7.14|
                  |L7.78|
00004e  4625              MOV      r5,r4                 ;329
000050  6824              LDR      r4,[r4,#0]            ;329
                  |L7.82|
000052  2c00              CMP      r4,#0                 ;329
000054  d1e1              BNE      |L7.26|
000056  bf00              NOP                            ;346
000058  e7d9              B        |L7.14|
;;;348    
                          ENDP

00005a  0000              DCW      0x0000
                  |L7.92|
                          DCD      next_timeout

                          AREA ||i.tcp_timer_needed||, CODE, READONLY, ALIGN=2

                  tcp_timer_needed PROC
;;;100    void
;;;101    tcp_timer_needed(void)
000000  b510              PUSH     {r4,lr}
;;;102    {
;;;103      /* timer is off but needed again? */
;;;104      if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
000002  4809              LDR      r0,|L8.40|
000004  6800              LDR      r0,[r0,#0]  ; tcpip_tcp_timer_active
000006  b968              CBNZ     r0,|L8.36|
000008  4808              LDR      r0,|L8.44|
00000a  6800              LDR      r0,[r0,#0]  ; tcp_active_pcbs
00000c  b910              CBNZ     r0,|L8.20|
00000e  4808              LDR      r0,|L8.48|
000010  6800              LDR      r0,[r0,#0]  ; tcp_tw_pcbs
000012  b138              CBZ      r0,|L8.36|
                  |L8.20|
;;;105        /* enable and start timer */
;;;106        tcpip_tcp_timer_active = 1;
000014  2001              MOVS     r0,#1
000016  4904              LDR      r1,|L8.40|
000018  6008              STR      r0,[r1,#0]  ; tcpip_tcp_timer_active
;;;107        sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
00001a  2200              MOVS     r2,#0
00001c  4905              LDR      r1,|L8.52|
00001e  20fa              MOVS     r0,#0xfa
000020  f7fffffe          BL       sys_timeout
                  |L8.36|
;;;108      }
;;;109    }
000024  bd10              POP      {r4,pc}
;;;110    #endif /* LWIP_TCP */
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      tcpip_tcp_timer_active
                  |L8.44|
                          DCD      tcp_active_pcbs
                  |L8.48|
                          DCD      tcp_tw_pcbs
                  |L8.52|
                          DCD      tcpip_tcp_timer

                          AREA ||i.tcpip_tcp_timer||, CODE, READONLY, ALIGN=2

                  tcpip_tcp_timer PROC
;;;78     static void
;;;79     tcpip_tcp_timer(void *arg)
000000  b510              PUSH     {r4,lr}
;;;80     {
000002  4604              MOV      r4,r0
;;;81       LWIP_UNUSED_ARG(arg);
;;;82     
;;;83       /* call TCP timer handler */
;;;84       tcp_tmr();
000004  f7fffffe          BL       tcp_tmr
;;;85       /* timer still needed? */
;;;86       if (tcp_active_pcbs || tcp_tw_pcbs) {
000008  4807              LDR      r0,|L9.40|
00000a  6800              LDR      r0,[r0,#0]  ; tcp_active_pcbs
00000c  b910              CBNZ     r0,|L9.20|
00000e  4807              LDR      r0,|L9.44|
000010  6800              LDR      r0,[r0,#0]  ; tcp_tw_pcbs
000012  b128              CBZ      r0,|L9.32|
                  |L9.20|
;;;87         /* restart timer */
;;;88         sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
000014  2200              MOVS     r2,#0
000016  4906              LDR      r1,|L9.48|
000018  20fa              MOVS     r0,#0xfa
00001a  f7fffffe          BL       sys_timeout
00001e  e002              B        |L9.38|
                  |L9.32|
;;;89       } else {
;;;90         /* disable timer */
;;;91         tcpip_tcp_timer_active = 0;
000020  2000              MOVS     r0,#0
000022  4904              LDR      r1,|L9.52|
000024  6008              STR      r0,[r1,#0]  ; tcpip_tcp_timer_active
                  |L9.38|
;;;92       }
;;;93     }
000026  bd10              POP      {r4,pc}
;;;94     
                          ENDP

                  |L9.40|
                          DCD      tcp_active_pcbs
                  |L9.44|
                          DCD      tcp_tw_pcbs
                  |L9.48|
                          DCD      tcpip_tcp_timer
                  |L9.52|
                          DCD      tcpip_tcp_timer_active

                          AREA ||.data||, DATA, ALIGN=2

                  next_timeout
                          DCD      0x00000000
                  timeouts_last_time
                          DCD      0x00000000
                  tcpip_tcp_timer_active
                          DCD      0x00000000
