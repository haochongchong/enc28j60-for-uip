L 1 "..\..\lwip\src\core\ipv4\ip.c"
N/**
N * @file
N * This is the IPv4 layer implementation for incoming and outgoing IP traffic.
N * 
N * @see ip_frag.c
N *
N */
N
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N *
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N
N#include "lwip/opt.h"
L 1 "..\..\lwip\src\include\lwip/opt.h" 1
N/**
N * @file
N *
N * lwIP Options Configuration
N */
N
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_OPT_H__
N#define __LWIP_OPT_H__
N
N/*
N * Include user defined options first. Anything not defined in these files
N * will be set to standard values. Override anything you dont like!
N */
N#include "lwipopts.h"
L 1 "..\..\lwip\src\arch\lwipopts.h" 1
N/*
N;*****************************************************************************************************
N
N;*	      
N;*****************************************************************************************************
N;*/
N
N#ifndef __LWIPOPTS_H__
N#define __LWIPOPTS_H__
N
N
N/* 于app_cfg.h文件统一配置线程的优先级 */
N//#include "app_cfg.h"
N/* 临界区的保护 */
N	 
N/* 有系统 */  
N#define NO_SYS                       1
N//#define NO_SYS_NO_TIMERS             1
N
N#define LWIP_SOCKET  0
N#define LWIP_NETCONN 0
N/* 4字节对齐 */
N#define MEM_ALIGNMENT                4
N	
N/* 4K的内存 */  
N#define MEM_SIZE                     1024*40
N#define TCP_SND_BUF                  4000    //允许TCP协议使用的最大发送缓冲长度
N#define TCP_MSS                      1000
N
N/* */
N#define ETH_PAD_SIZE				 0 
N//#define ETHARP_DEBUG                LWIP_DBG_ON
N//#define ICMP_DEBUG                  LWIP_DBG_ON
N
N#define LWIP_HAVE_LOOPIF             1
N
N//#define MEM_DEBUG                       LWIP_DBG_ON
N//#define MEMP_DEBUG                      LWIP_DBG_ON
N//#define TCP_DEBUG					  LWIP_DBG_ON
N//#define UDP_DEBUG					  LWIP_DBG_ON
N//#define MEMP_MEM_MALLOC              1
N//#define MEM_USE_POOLS 0
N
N#endif /* __LWIPOPTS_H__ */
N
N/*
N;*****************************************************************************************************
N;*                            			End Of File
N;*****************************************************************************************************
N;*/
N
L 46 "..\..\lwip\src\include\lwip/opt.h" 2
N#include "lwip/debug.h"
L 1 "..\..\lwip\src\include\lwip/debug.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_DEBUG_H__
N#define __LWIP_DEBUG_H__
N
N#include "lwip/arch.h"
L 1 "..\..\lwip\src\include\lwip/arch.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_ARCH_H__
N#define __LWIP_ARCH_H__
N
N#ifndef LITTLE_ENDIAN
N#define LITTLE_ENDIAN 1234
N#endif
N
N#ifndef BIG_ENDIAN
N#define BIG_ENDIAN 4321
N#endif
N
N#include "arch/cc.h"
L 1 "..\..\lwip\src\arch/cc.h" 1
N/*
N * Copyright (c) 2001, Swedish Institute of Computer Science.
N * All rights reserved. 
N *
N * Redistribution and use in source and binary forms, with or without 
N * modification, are permitted provided that the following conditions 
N * are met: 
N * 1. Redistributions of source code must retain the above copyright 
N *    notice, this list of conditions and the following disclaimer. 
N * 2. Redistributions in binary form must reproduce the above copyright 
N *    notice, this list of conditions and the following disclaimer in the 
N *    documentation and/or other materials provided with the distribution. 
N * 3. Neither the name of the Institute nor the names of its contributors 
N *    may be used to endorse or promote products derived from this software 
N *    without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
N * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
N * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
N * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
N * SUCH DAMAGE. 
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N * $Id: cc.h,v 1.1.1.1 2003/05/17 05:06:56 chenyu Exp $
N */
N
N
N#ifndef __CC_H__
N#define __CC_H__
N
N#include "stdio.h"
L 1 "D:\Program Files\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision: 192842 $
N * Checkin $Date: 2015-04-28 10:58:32 +0100 (Tue, 28 Apr 2015) $
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060002
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 41 "..\..\lwip\src\arch/cc.h" 2
N
Ntypedef unsigned char      u8_t;
Ntypedef signed char      s8_t;
Ntypedef unsigned short    u16_t;
Ntypedef signed   short    s16_t;
N
Ntypedef unsigned int    u32_t;
Ntypedef signed   int    s32_t;
Ntypedef unsigned int sys_prot_t;
Ntypedef unsigned int mem_ptr_t;
N
N#define PACK_STRUCT_FIELD(x) x
N#define PACK_STRUCT_STRUCT 
N#define PACK_STRUCT_BEGIN  __packed
N#define PACK_STRUCT_END
N
N#define LWIP_DEBUG
N#define LWIP_PLATFORM_DIAG(x) {printf x;}
N#define LWIP_PLATFORM_ASSERT(x) {printf(x);while(1);}
N
N#define LWIP_ERROR(message, expression, handler)  \
N	do { if (!(expression)) { \
N  			printf(message); handler;}} while(0)
X#define LWIP_ERROR(message, expression, handler)  	do { if (!(expression)) {   			printf(message); handler;}} while(0)
N
N//#define LWIP_NOASSERT
N//#define LWIP_ASSERT(x,y)
N
N#define U16_F "u"
N#define S16_F "d"
N#define X16_F "x"
N#define U32_F "u"
N#define S32_F "d"
N#define X32_F "x"
N
N//#define SZT_F 8f
N
N#define	LWIP_PROVIDE_ERRNO
N
N#define BYTE_ORDER LITTLE_ENDIAN
N
Nextern unsigned int sys_now(void);
N
N//* 临界代码保护宏
N//#define	SYS_ARCH_DECL_PROTECT(x)	    //u32_t cpu_sr
N//#define	SYS_ARCH_PROTECT(x)			    //cpu_sr = DisableInt()//OS_ENTER_CRITICAL()
N//#define	SYS_ARCH_UNPROTECT(x)		    //EnableInt(cpu_sr)     //OS_EXIT_CRITICAL()
N
N#endif /* __CC_H__ */
L 44 "..\..\lwip\src\include\lwip/arch.h" 2
N
N/** Temporary: define format string for size_t if not defined in cc.h */
N#ifndef SZT_F
N#define SZT_F U32_F
N#endif /* SZT_F */
N/** Temporary upgrade helper: define format string for u8_t as hex if not
N    defined in cc.h */
N#ifndef X8_F
N#define X8_F  "02x"
N#endif /* X8_F */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#ifndef PACK_STRUCT_BEGIN
S#define PACK_STRUCT_BEGIN
N#endif /* PACK_STRUCT_BEGIN */
N
N#ifndef PACK_STRUCT_END
S#define PACK_STRUCT_END
N#endif /* PACK_STRUCT_END */
N
N#ifndef PACK_STRUCT_FIELD
S#define PACK_STRUCT_FIELD(x) x
N#endif /* PACK_STRUCT_FIELD */
N
N
N#ifndef LWIP_UNUSED_ARG
N#define LWIP_UNUSED_ARG(x) (void)x
N#endif /* LWIP_UNUSED_ARG */ 
N
N
N#ifdef LWIP_PROVIDE_ERRNO
N
N#define  EPERM         1  /* Operation not permitted */
N#define  ENOENT        2  /* No such file or directory */
N#define  ESRCH         3  /* No such process */
N#define  EINTR         4  /* Interrupted system call */
N#define  EIO           5  /* I/O error */
N#define  ENXIO         6  /* No such device or address */
N#define  E2BIG         7  /* Arg list too long */
N#define  ENOEXEC       8  /* Exec format error */
N#define  EBADF         9  /* Bad file number */
N#define  ECHILD       10  /* No child processes */
N#define  EAGAIN       11  /* Try again */
N#define  ENOMEM       12  /* Out of memory */
N#define  EACCES       13  /* Permission denied */
N#define  EFAULT       14  /* Bad address */
N#define  ENOTBLK      15  /* Block device required */
N#define  EBUSY        16  /* Device or resource busy */
N#define  EEXIST       17  /* File exists */
N#define  EXDEV        18  /* Cross-device link */
N#define  ENODEV       19  /* No such device */
N#define  ENOTDIR      20  /* Not a directory */
N#define  EISDIR       21  /* Is a directory */
N#define  EINVAL       22  /* Invalid argument */
N#define  ENFILE       23  /* File table overflow */
N#define  EMFILE       24  /* Too many open files */
N#define  ENOTTY       25  /* Not a typewriter */
N#define  ETXTBSY      26  /* Text file busy */
N#define  EFBIG        27  /* File too large */
N#define  ENOSPC       28  /* No space left on device */
N#define  ESPIPE       29  /* Illegal seek */
N#define  EROFS        30  /* Read-only file system */
N#define  EMLINK       31  /* Too many links */
N#define  EPIPE        32  /* Broken pipe */
N#define  EDOM         33  /* Math argument out of domain of func */
N#define  ERANGE       34  /* Math result not representable */
N#define  EDEADLK      35  /* Resource deadlock would occur */
N#define  ENAMETOOLONG 36  /* File name too long */
N#define  ENOLCK       37  /* No record locks available */
N#define  ENOSYS       38  /* Function not implemented */
N#define  ENOTEMPTY    39  /* Directory not empty */
N#define  ELOOP        40  /* Too many symbolic links encountered */
N#define  EWOULDBLOCK  EAGAIN  /* Operation would block */
N#define  ENOMSG       42  /* No message of desired type */
N#define  EIDRM        43  /* Identifier removed */
N#define  ECHRNG       44  /* Channel number out of range */
N#define  EL2NSYNC     45  /* Level 2 not synchronized */
N#define  EL3HLT       46  /* Level 3 halted */
N#define  EL3RST       47  /* Level 3 reset */
N#define  ELNRNG       48  /* Link number out of range */
N#define  EUNATCH      49  /* Protocol driver not attached */
N#define  ENOCSI       50  /* No CSI structure available */
N#define  EL2HLT       51  /* Level 2 halted */
N#define  EBADE        52  /* Invalid exchange */
N#define  EBADR        53  /* Invalid request descriptor */
N#define  EXFULL       54  /* Exchange full */
N#define  ENOANO       55  /* No anode */
N#define  EBADRQC      56  /* Invalid request code */
N#define  EBADSLT      57  /* Invalid slot */
N
N#define  EDEADLOCK    EDEADLK
N
N#define  EBFONT       59  /* Bad font file format */
N#define  ENOSTR       60  /* Device not a stream */
N#define  ENODATA      61  /* No data available */
N#define  ETIME        62  /* Timer expired */
N#define  ENOSR        63  /* Out of streams resources */
N#define  ENONET       64  /* Machine is not on the network */
N#define  ENOPKG       65  /* Package not installed */
N#define  EREMOTE      66  /* Object is remote */
N#define  ENOLINK      67  /* Link has been severed */
N#define  EADV         68  /* Advertise error */
N#define  ESRMNT       69  /* Srmount error */
N#define  ECOMM        70  /* Communication error on send */
N#define  EPROTO       71  /* Protocol error */
N#define  EMULTIHOP    72  /* Multihop attempted */
N#define  EDOTDOT      73  /* RFS specific error */
N#define  EBADMSG      74  /* Not a data message */
N#define  EOVERFLOW    75  /* Value too large for defined data type */
N#define  ENOTUNIQ     76  /* Name not unique on network */
N#define  EBADFD       77  /* File descriptor in bad state */
N#define  EREMCHG      78  /* Remote address changed */
N#define  ELIBACC      79  /* Can not access a needed shared library */
N#define  ELIBBAD      80  /* Accessing a corrupted shared library */
N#define  ELIBSCN      81  /* .lib section in a.out corrupted */
N#define  ELIBMAX      82  /* Attempting to link in too many shared libraries */
N#define  ELIBEXEC     83  /* Cannot exec a shared library directly */
N#define  EILSEQ       84  /* Illegal byte sequence */
N#define  ERESTART     85  /* Interrupted system call should be restarted */
N#define  ESTRPIPE     86  /* Streams pipe error */
N#define  EUSERS       87  /* Too many users */
N#define  ENOTSOCK     88  /* Socket operation on non-socket */
N#define  EDESTADDRREQ 89  /* Destination address required */
N#define  EMSGSIZE     90  /* Message too long */
N#define  EPROTOTYPE   91  /* Protocol wrong type for socket */
N#define  ENOPROTOOPT  92  /* Protocol not available */
N#define  EPROTONOSUPPORT 93  /* Protocol not supported */
N#define  ESOCKTNOSUPPORT 94  /* Socket type not supported */
N#define  EOPNOTSUPP      95  /* Operation not supported on transport endpoint */
N#define  EPFNOSUPPORT    96  /* Protocol family not supported */
N#define  EAFNOSUPPORT    97  /* Address family not supported by protocol */
N#define  EADDRINUSE      98  /* Address already in use */
N#define  EADDRNOTAVAIL   99  /* Cannot assign requested address */
N#define  ENETDOWN       100  /* Network is down */
N#define  ENETUNREACH    101  /* Network is unreachable */
N#define  ENETRESET      102  /* Network dropped connection because of reset */
N#define  ECONNABORTED   103  /* Software caused connection abort */
N#define  ECONNRESET     104  /* Connection reset by peer */
N#define  ENOBUFS        105  /* No buffer space available */
N#define  EISCONN        106  /* Transport endpoint is already connected */
N#define  ENOTCONN       107  /* Transport endpoint is not connected */
N#define  ESHUTDOWN      108  /* Cannot send after transport endpoint shutdown */
N#define  ETOOMANYREFS   109  /* Too many references: cannot splice */
N#define  ETIMEDOUT      110  /* Connection timed out */
N#define  ECONNREFUSED   111  /* Connection refused */
N#define  EHOSTDOWN      112  /* Host is down */
N#define  EHOSTUNREACH   113  /* No route to host */
N#define  EALREADY       114  /* Operation already in progress */
N#define  EINPROGRESS    115  /* Operation now in progress */
N#define  ESTALE         116  /* Stale NFS file handle */
N#define  EUCLEAN        117  /* Structure needs cleaning */
N#define  ENOTNAM        118  /* Not a XENIX named type file */
N#define  ENAVAIL        119  /* No XENIX semaphores available */
N#define  EISNAM         120  /* Is a named type file */
N#define  EREMOTEIO      121  /* Remote I/O error */
N#define  EDQUOT         122  /* Quota exceeded */
N
N#define  ENOMEDIUM      123  /* No medium found */
N#define  EMEDIUMTYPE    124  /* Wrong medium type */
N
N#ifndef errno
Nextern int errno;
N#endif
N
N#endif /* LWIP_PROVIDE_ERRNO */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_ARCH_H__ */
L 36 "..\..\lwip\src\include\lwip/debug.h" 2
N#include "lwip/opt.h"
L 1 "..\..\lwip\src\include\lwip/opt.h" 1
N/**
N * @file
N *
N * lwIP Options Configuration
N */
N
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_OPT_H__
S#define __LWIP_OPT_H__
S
S/*
S * Include user defined options first. Anything not defined in these files
S * will be set to standard values. Override anything you dont like!
S */
S#include "lwipopts.h"
S#include "lwip/debug.h"
S
S/*
S   -----------------------------------------------
S   ---------- Platform specific locking ----------
S   -----------------------------------------------
S*/
S
S/**
S * SYS_LIGHTWEIGHT_PROT==1: if you want inter-task protection for certain
S * critical regions during buffer allocation, deallocation and memory
S * allocation and deallocation.
S */
S#ifndef SYS_LIGHTWEIGHT_PROT
S#define SYS_LIGHTWEIGHT_PROT            0
S#endif
S
S/** 
S * NO_SYS==1: Provides VERY minimal functionality. Otherwise,
S * use lwIP facilities.
S */
S#ifndef NO_SYS
S#define NO_SYS                          0
S#endif
S
S/**
S * NO_SYS_NO_TIMERS==1: Drop support for sys_timeout when NO_SYS==1
S * Mainly for compatibility to old versions.
S */
S#ifndef NO_SYS_NO_TIMERS
S#define NO_SYS_NO_TIMERS                0
S#endif
S
S/**
S * MEMCPY: override this if you have a faster implementation at hand than the
S * one included in your C library
S */
S#ifndef MEMCPY
S#define MEMCPY(dst,src,len)             memcpy(dst,src,len)
S#endif
S
S/**
S * SMEMCPY: override this with care! Some compilers (e.g. gcc) can inline a
S * call to memcpy() if the length is known at compile time and is small.
S */
S#ifndef SMEMCPY
S#define SMEMCPY(dst,src,len)            memcpy(dst,src,len)
S#endif
S
S/*
S   ------------------------------------
S   ---------- Memory options ----------
S   ------------------------------------
S*/
S/**
S * MEM_LIBC_MALLOC==1: Use malloc/free/realloc provided by your C-library
S * instead of the lwip internal allocator. Can save code size if you
S * already use it.
S */
S#ifndef MEM_LIBC_MALLOC
S#define MEM_LIBC_MALLOC                 0
S#endif
S
S/**
S* MEMP_MEM_MALLOC==1: Use mem_malloc/mem_free instead of the lwip pool allocator.
S* Especially useful with MEM_LIBC_MALLOC but handle with care regarding execution
S* speed and usage from interrupts!
S*/
S#ifndef MEMP_MEM_MALLOC
S#define MEMP_MEM_MALLOC                 0
S#endif
S
S/**
S * MEM_ALIGNMENT: should be set to the alignment of the CPU
S *    4 byte alignment -> #define MEM_ALIGNMENT 4
S *    2 byte alignment -> #define MEM_ALIGNMENT 2
S */
S#ifndef MEM_ALIGNMENT
S#define MEM_ALIGNMENT                   1
S#endif
S
S/**
S * MEM_SIZE: the size of the heap memory. If the application will send
S * a lot of data that needs to be copied, this should be set high.
S */
S#ifndef MEM_SIZE
S#define MEM_SIZE                        1600
S#endif
S
S/**
S * MEMP_SEPARATE_POOLS: if defined to 1, each pool is placed in its own array.
S * This can be used to individually change the location of each pool.
S * Default is one big array for all pools
S */
S#ifndef MEMP_SEPARATE_POOLS
S#define MEMP_SEPARATE_POOLS             0
S#endif
S
S/**
S * MEMP_OVERFLOW_CHECK: memp overflow protection reserves a configurable
S * amount of bytes before and after each memp element in every pool and fills
S * it with a prominent default value.
S *    MEMP_OVERFLOW_CHECK == 0 no checking
S *    MEMP_OVERFLOW_CHECK == 1 checks each element when it is freed
S *    MEMP_OVERFLOW_CHECK >= 2 checks each element in every pool every time
S *      memp_malloc() or memp_free() is called (useful but slow!)
S */
S#ifndef MEMP_OVERFLOW_CHECK
S#define MEMP_OVERFLOW_CHECK             0
S#endif
S
S/**
S * MEMP_SANITY_CHECK==1: run a sanity check after each memp_free() to make
S * sure that there are no cycles in the linked lists.
S */
S#ifndef MEMP_SANITY_CHECK
S#define MEMP_SANITY_CHECK               0
S#endif
S
S/**
S * MEM_USE_POOLS==1: Use an alternative to malloc() by allocating from a set
S * of memory pools of various sizes. When mem_malloc is called, an element of
S * the smallest pool that can provide the length needed is returned.
S * To use this, MEMP_USE_CUSTOM_POOLS also has to be enabled.
S */
S#ifndef MEM_USE_POOLS
S#define MEM_USE_POOLS                   0
S#endif
S
S/**
S * MEM_USE_POOLS_TRY_BIGGER_POOL==1: if one malloc-pool is empty, try the next
S * bigger pool - WARNING: THIS MIGHT WASTE MEMORY but it can make a system more
S * reliable. */
S#ifndef MEM_USE_POOLS_TRY_BIGGER_POOL
S#define MEM_USE_POOLS_TRY_BIGGER_POOL   0
S#endif
S
S/**
S * MEMP_USE_CUSTOM_POOLS==1: whether to include a user file lwippools.h
S * that defines additional pools beyond the "standard" ones required
S * by lwIP. If you set this to 1, you must have lwippools.h in your 
S * inlude path somewhere. 
S */
S#ifndef MEMP_USE_CUSTOM_POOLS
S#define MEMP_USE_CUSTOM_POOLS           0
S#endif
S
S/**
S * Set this to 1 if you want to free PBUF_RAM pbufs (or call mem_free()) from
S * interrupt context (or another context that doesn't allow waiting for a
S * semaphore).
S * If set to 1, mem_malloc will be protected by a semaphore and SYS_ARCH_PROTECT,
S * while mem_free will only use SYS_ARCH_PROTECT. mem_malloc SYS_ARCH_UNPROTECTs
S * with each loop so that mem_free can run.
S *
S * ATTENTION: As you can see from the above description, this leads to dis-/
S * enabling interrupts often, which can be slow! Also, on low memory, mem_malloc
S * can need longer.
S *
S * If you don't want that, at least for NO_SYS=0, you can still use the following
S * functions to enqueue a deallocation call which then runs in the tcpip_thread
S * context:
S * - pbuf_free_callback(p);
S * - mem_free_callback(m);
S */
S#ifndef LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
S#define LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT 0
S#endif
S
S/*
S   ------------------------------------------------
S   ---------- Internal Memory Pool Sizes ----------
S   ------------------------------------------------
S*/
S/**
S * MEMP_NUM_PBUF: the number of memp struct pbufs (used for PBUF_ROM and PBUF_REF).
S * If the application sends a lot of data out of ROM (or other static memory),
S * this should be set high.
S */
S#ifndef MEMP_NUM_PBUF
S#define MEMP_NUM_PBUF                   16
S#endif
S
S/**
S * MEMP_NUM_RAW_PCB: Number of raw connection PCBs
S * (requires the LWIP_RAW option)
S */
S#ifndef MEMP_NUM_RAW_PCB
S#define MEMP_NUM_RAW_PCB                4
S#endif
S
S/**
S * MEMP_NUM_UDP_PCB: the number of UDP protocol control blocks. One
S * per active UDP "connection".
S * (requires the LWIP_UDP option)
S */
S#ifndef MEMP_NUM_UDP_PCB
S#define MEMP_NUM_UDP_PCB                4
S#endif
S
S/**
S * MEMP_NUM_TCP_PCB: the number of simulatenously active TCP connections.
S * (requires the LWIP_TCP option)
S */
S#ifndef MEMP_NUM_TCP_PCB
S#define MEMP_NUM_TCP_PCB                5
S#endif
S
S/**
S * MEMP_NUM_TCP_PCB_LISTEN: the number of listening TCP connections.
S * (requires the LWIP_TCP option)
S */
S#ifndef MEMP_NUM_TCP_PCB_LISTEN
S#define MEMP_NUM_TCP_PCB_LISTEN         8
S#endif
S
S/**
S * MEMP_NUM_TCP_SEG: the number of simultaneously queued TCP segments.
S * (requires the LWIP_TCP option)
S */
S#ifndef MEMP_NUM_TCP_SEG
S#define MEMP_NUM_TCP_SEG                16
S#endif
S
S/**
S * MEMP_NUM_REASSDATA: the number of IP packets simultaneously queued for
S * reassembly (whole packets, not fragments!)
S */
S#ifndef MEMP_NUM_REASSDATA
S#define MEMP_NUM_REASSDATA              5
S#endif
S
S/**
S * MEMP_NUM_FRAG_PBUF: the number of IP fragments simultaneously sent
S * (fragments, not whole packets!).
S * This is only used with IP_FRAG_USES_STATIC_BUF==0 and
S * LWIP_NETIF_TX_SINGLE_PBUF==0 and only has to be > 1 with DMA-enabled MACs
S * where the packet is not yet sent when netif->output returns.
S */
S#ifndef MEMP_NUM_FRAG_PBUF
S#define MEMP_NUM_FRAG_PBUF              15
S#endif
S
S/**
S * MEMP_NUM_ARP_QUEUE: the number of simulateously queued outgoing
S * packets (pbufs) that are waiting for an ARP request (to resolve
S * their destination address) to finish.
S * (requires the ARP_QUEUEING option)
S */
S#ifndef MEMP_NUM_ARP_QUEUE
S#define MEMP_NUM_ARP_QUEUE              30
S#endif
S
S/**
S * MEMP_NUM_IGMP_GROUP: The number of multicast groups whose network interfaces
S * can be members et the same time (one per netif - allsystems group -, plus one
S * per netif membership).
S * (requires the LWIP_IGMP option)
S */
S#ifndef MEMP_NUM_IGMP_GROUP
S#define MEMP_NUM_IGMP_GROUP             8
S#endif
S
S/**
S * MEMP_NUM_SYS_TIMEOUT: the number of simulateously active timeouts.
S * (requires NO_SYS==0)
S * The default number of timeouts is calculated here for all enabled modules.
S * The formula expects settings to be either '0' or '1'.
S */
S#ifndef MEMP_NUM_SYS_TIMEOUT
S#define MEMP_NUM_SYS_TIMEOUT            (LWIP_TCP + IP_REASSEMBLY + LWIP_ARP + (2*LWIP_DHCP) + LWIP_AUTOIP + LWIP_IGMP + LWIP_DNS + PPP_SUPPORT)
S#endif
S
S/**
S * MEMP_NUM_NETBUF: the number of struct netbufs.
S * (only needed if you use the sequential API, like api_lib.c)
S */
S#ifndef MEMP_NUM_NETBUF
S#define MEMP_NUM_NETBUF                 2
S#endif
S
S/**
S * MEMP_NUM_NETCONN: the number of struct netconns.
S * (only needed if you use the sequential API, like api_lib.c)
S */
S#ifndef MEMP_NUM_NETCONN
S#define MEMP_NUM_NETCONN                4
S#endif
S
S/**
S * MEMP_NUM_TCPIP_MSG_API: the number of struct tcpip_msg, which are used
S * for callback/timeout API communication. 
S * (only needed if you use tcpip.c)
S */
S#ifndef MEMP_NUM_TCPIP_MSG_API
S#define MEMP_NUM_TCPIP_MSG_API          8
S#endif
S
S/**
S * MEMP_NUM_TCPIP_MSG_INPKT: the number of struct tcpip_msg, which are used
S * for incoming packets. 
S * (only needed if you use tcpip.c)
S */
S#ifndef MEMP_NUM_TCPIP_MSG_INPKT
S#define MEMP_NUM_TCPIP_MSG_INPKT        8
S#endif
S
S/**
S * MEMP_NUM_SNMP_NODE: the number of leafs in the SNMP tree.
S */
S#ifndef MEMP_NUM_SNMP_NODE
S#define MEMP_NUM_SNMP_NODE              50
S#endif
S
S/**
S * MEMP_NUM_SNMP_ROOTNODE: the number of branches in the SNMP tree.
S * Every branch has one leaf (MEMP_NUM_SNMP_NODE) at least!
S */
S#ifndef MEMP_NUM_SNMP_ROOTNODE
S#define MEMP_NUM_SNMP_ROOTNODE          30
S#endif
S
S/**
S * MEMP_NUM_SNMP_VARBIND: the number of concurrent requests (does not have to
S * be changed normally) - 2 of these are used per request (1 for input,
S * 1 for output)
S */
S#ifndef MEMP_NUM_SNMP_VARBIND
S#define MEMP_NUM_SNMP_VARBIND           2
S#endif
S
S/**
S * MEMP_NUM_SNMP_VALUE: the number of OID or values concurrently used
S * (does not have to be changed normally) - 3 of these are used per request
S * (1 for the value read and 2 for OIDs - input and output)
S */
S#ifndef MEMP_NUM_SNMP_VALUE
S#define MEMP_NUM_SNMP_VALUE             3
S#endif
S
S/**
S * MEMP_NUM_NETDB: the number of concurrently running lwip_addrinfo() calls
S * (before freeing the corresponding memory using lwip_freeaddrinfo()).
S */
S#ifndef MEMP_NUM_NETDB
S#define MEMP_NUM_NETDB                  1
S#endif
S
S/**
S * MEMP_NUM_LOCALHOSTLIST: the number of host entries in the local host list
S * if DNS_LOCAL_HOSTLIST_IS_DYNAMIC==1.
S */
S#ifndef MEMP_NUM_LOCALHOSTLIST
S#define MEMP_NUM_LOCALHOSTLIST          1
S#endif
S
S/**
S * MEMP_NUM_PPPOE_INTERFACES: the number of concurrently active PPPoE
S * interfaces (only used with PPPOE_SUPPORT==1)
S */
S#ifndef MEMP_NUM_PPPOE_INTERFACES
S#define MEMP_NUM_PPPOE_INTERFACES       1
S#endif
S
S/**
S * PBUF_POOL_SIZE: the number of buffers in the pbuf pool. 
S */
S#ifndef PBUF_POOL_SIZE
S#define PBUF_POOL_SIZE                  16
S#endif
S
S/*
S   ---------------------------------
S   ---------- ARP options ----------
S   ---------------------------------
S*/
S/**
S * LWIP_ARP==1: Enable ARP functionality.
S */
S#ifndef LWIP_ARP
S#define LWIP_ARP                        1
S#endif
S
S/**
S * ARP_TABLE_SIZE: Number of active MAC-IP address pairs cached.
S */
S#ifndef ARP_TABLE_SIZE
S#define ARP_TABLE_SIZE                  10
S#endif
S
S/**
S * ARP_QUEUEING==1: Multiple outgoing packets are queued during hardware address
S * resolution. By default, only the most recent packet is queued per IP address.
S * This is sufficient for most protocols and mainly reduces TCP connection
S * startup time. Set this to 1 if you know your application sends more than one
S * packet in a row to an IP address that is not in the ARP cache.
S */
S#ifndef ARP_QUEUEING
S#define ARP_QUEUEING                    0
S#endif
S
S/**
S * ETHARP_TRUST_IP_MAC==1: Incoming IP packets cause the ARP table to be
S * updated with the source MAC and IP addresses supplied in the packet.
S * You may want to disable this if you do not trust LAN peers to have the
S * correct addresses, or as a limited approach to attempt to handle
S * spoofing. If disabled, lwIP will need to make a new ARP request if
S * the peer is not already in the ARP table, adding a little latency.
S * The peer *is* in the ARP table if it requested our address before.
S * Also notice that this slows down input processing of every IP packet!
S */
S#ifndef ETHARP_TRUST_IP_MAC
S#define ETHARP_TRUST_IP_MAC             0
S#endif
S
S/**
S * ETHARP_SUPPORT_VLAN==1: support receiving ethernet packets with VLAN header.
S * Additionally, you can define ETHARP_VLAN_CHECK to an u16_t VLAN ID to check.
S * If ETHARP_VLAN_CHECK is defined, only VLAN-traffic for this VLAN is accepted.
S * If ETHARP_VLAN_CHECK is not defined, all traffic is accepted.
S * Alternatively, define a function/define ETHARP_VLAN_CHECK_FN(eth_hdr, vlan)
S * that returns 1 to accept a packet or 0 to drop a packet.
S */
S#ifndef ETHARP_SUPPORT_VLAN
S#define ETHARP_SUPPORT_VLAN             0
S#endif
S
S/** LWIP_ETHERNET==1: enable ethernet support for PPPoE even though ARP
S * might be disabled
S */
S#ifndef LWIP_ETHERNET
S#define LWIP_ETHERNET                   (LWIP_ARP || PPPOE_SUPPORT)
S#endif
S
S/** ETH_PAD_SIZE: number of bytes added before the ethernet header to ensure
S * alignment of payload after that header. Since the header is 14 bytes long,
S * without this padding e.g. addresses in the IP header will not be aligned
S * on a 32-bit boundary, so setting this to 2 can speed up 32-bit-platforms.
S */
S#ifndef ETH_PAD_SIZE
S#define ETH_PAD_SIZE                    0
S#endif
S
S/** ETHARP_SUPPORT_STATIC_ENTRIES==1: enable code to support static ARP table
S * entries (using etharp_add_static_entry/etharp_remove_static_entry).
S */
S#ifndef ETHARP_SUPPORT_STATIC_ENTRIES
S#define ETHARP_SUPPORT_STATIC_ENTRIES   0
S#endif
S
S
S/*
S   --------------------------------
S   ---------- IP options ----------
S   --------------------------------
S*/
S/**
S * IP_FORWARD==1: Enables the ability to forward IP packets across network
S * interfaces. If you are going to run lwIP on a device with only one network
S * interface, define this to 0.
S */
S#ifndef IP_FORWARD
S#define IP_FORWARD                      0
S#endif
S
S/**
S * IP_OPTIONS_ALLOWED: Defines the behavior for IP options.
S *      IP_OPTIONS_ALLOWED==0: All packets with IP options are dropped.
S *      IP_OPTIONS_ALLOWED==1: IP options are allowed (but not parsed).
S */
S#ifndef IP_OPTIONS_ALLOWED
S#define IP_OPTIONS_ALLOWED              1
S#endif
S
S/**
S * IP_REASSEMBLY==1: Reassemble incoming fragmented IP packets. Note that
S * this option does not affect outgoing packet sizes, which can be controlled
S * via IP_FRAG.
S */
S#ifndef IP_REASSEMBLY
S#define IP_REASSEMBLY                   1
S#endif
S
S/**
S * IP_FRAG==1: Fragment outgoing IP packets if their size exceeds MTU. Note
S * that this option does not affect incoming packet sizes, which can be
S * controlled via IP_REASSEMBLY.
S */
S#ifndef IP_FRAG
S#define IP_FRAG                         1
S#endif
S
S/**
S * IP_REASS_MAXAGE: Maximum time (in multiples of IP_TMR_INTERVAL - so seconds, normally)
S * a fragmented IP packet waits for all fragments to arrive. If not all fragments arrived
S * in this time, the whole packet is discarded.
S */
S#ifndef IP_REASS_MAXAGE
S#define IP_REASS_MAXAGE                 3
S#endif
S
S/**
S * IP_REASS_MAX_PBUFS: Total maximum amount of pbufs waiting to be reassembled.
S * Since the received pbufs are enqueued, be sure to configure
S * PBUF_POOL_SIZE > IP_REASS_MAX_PBUFS so that the stack is still able to receive
S * packets even if the maximum amount of fragments is enqueued for reassembly!
S */
S#ifndef IP_REASS_MAX_PBUFS
S#define IP_REASS_MAX_PBUFS              10
S#endif
S
S/**
S * IP_FRAG_USES_STATIC_BUF==1: Use a static MTU-sized buffer for IP
S * fragmentation. Otherwise pbufs are allocated and reference the original
S * packet data to be fragmented (or with LWIP_NETIF_TX_SINGLE_PBUF==1,
S * new PBUF_RAM pbufs are used for fragments).
S * ATTENTION: IP_FRAG_USES_STATIC_BUF==1 may not be used for DMA-enabled MACs!
S */
S#ifndef IP_FRAG_USES_STATIC_BUF
S#define IP_FRAG_USES_STATIC_BUF         0
S#endif
S
S/**
S * IP_FRAG_MAX_MTU: Assumed max MTU on any interface for IP frag buffer
S * (requires IP_FRAG_USES_STATIC_BUF==1)
S */
S#if IP_FRAG_USES_STATIC_BUF && !defined(IP_FRAG_MAX_MTU)
S#define IP_FRAG_MAX_MTU                 1500
S#endif
S
S/**
S * IP_DEFAULT_TTL: Default value for Time-To-Live used by transport layers.
S */
S#ifndef IP_DEFAULT_TTL
S#define IP_DEFAULT_TTL                  255
S#endif
S
S/**
S * IP_SOF_BROADCAST=1: Use the SOF_BROADCAST field to enable broadcast
S * filter per pcb on udp and raw send operations. To enable broadcast filter
S * on recv operations, you also have to set IP_SOF_BROADCAST_RECV=1.
S */
S#ifndef IP_SOF_BROADCAST
S#define IP_SOF_BROADCAST                0
S#endif
S
S/**
S * IP_SOF_BROADCAST_RECV (requires IP_SOF_BROADCAST=1) enable the broadcast
S * filter on recv operations.
S */
S#ifndef IP_SOF_BROADCAST_RECV
S#define IP_SOF_BROADCAST_RECV           0
S#endif
S
S/**
S * IP_FORWARD_ALLOW_TX_ON_RX_NETIF==1: allow ip_forward() to send packets back
S * out on the netif where it was received. This should only be used for
S * wireless networks.
S * ATTENTION: When this is 1, make sure your netif driver correctly marks incoming
S * link-layer-broadcast/multicast packets as such using the corresponding pbuf flags!
S */
S#ifndef IP_FORWARD_ALLOW_TX_ON_RX_NETIF
S#define IP_FORWARD_ALLOW_TX_ON_RX_NETIF 0
S#endif
S
S/**
S * LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS==1: randomize the local port for the first
S * local TCP/UDP pcb (default==0). This can prevent creating predictable port
S * numbers after booting a device.
S */
S#ifndef LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS
S#define LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 0
S#endif
S
S/*
S   ----------------------------------
S   ---------- ICMP options ----------
S   ----------------------------------
S*/
S/**
S * LWIP_ICMP==1: Enable ICMP module inside the IP stack.
S * Be careful, disable that make your product non-compliant to RFC1122
S */
S#ifndef LWIP_ICMP
S#define LWIP_ICMP                       1
S#endif
S
S/**
S * ICMP_TTL: Default value for Time-To-Live used by ICMP packets.
S */
S#ifndef ICMP_TTL
S#define ICMP_TTL                       (IP_DEFAULT_TTL)
S#endif
S
S/**
S * LWIP_BROADCAST_PING==1: respond to broadcast pings (default is unicast only)
S */
S#ifndef LWIP_BROADCAST_PING
S#define LWIP_BROADCAST_PING             0
S#endif
S
S/**
S * LWIP_MULTICAST_PING==1: respond to multicast pings (default is unicast only)
S */
S#ifndef LWIP_MULTICAST_PING
S#define LWIP_MULTICAST_PING             0
S#endif
S
S/*
S   ---------------------------------
S   ---------- RAW options ----------
S   ---------------------------------
S*/
S/**
S * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
S */
S#ifndef LWIP_RAW
S#define LWIP_RAW                        1
S#endif
S
S/**
S * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
S */
S#ifndef RAW_TTL
S#define RAW_TTL                        (IP_DEFAULT_TTL)
S#endif
S
S/*
S   ----------------------------------
S   ---------- DHCP options ----------
S   ----------------------------------
S*/
S/**
S * LWIP_DHCP==1: Enable DHCP module.
S */
S#ifndef LWIP_DHCP
S#define LWIP_DHCP                       0
S#endif
S
S/**
S * DHCP_DOES_ARP_CHECK==1: Do an ARP check on the offered address.
S */
S#ifndef DHCP_DOES_ARP_CHECK
S#define DHCP_DOES_ARP_CHECK             ((LWIP_DHCP) && (LWIP_ARP))
S#endif
S
S/*
S   ------------------------------------
S   ---------- AUTOIP options ----------
S   ------------------------------------
S*/
S/**
S * LWIP_AUTOIP==1: Enable AUTOIP module.
S */
S#ifndef LWIP_AUTOIP
S#define LWIP_AUTOIP                     0
S#endif
S
S/**
S * LWIP_DHCP_AUTOIP_COOP==1: Allow DHCP and AUTOIP to be both enabled on
S * the same interface at the same time.
S */
S#ifndef LWIP_DHCP_AUTOIP_COOP
S#define LWIP_DHCP_AUTOIP_COOP           0
S#endif
S
S/**
S * LWIP_DHCP_AUTOIP_COOP_TRIES: Set to the number of DHCP DISCOVER probes
S * that should be sent before falling back on AUTOIP. This can be set
S * as low as 1 to get an AutoIP address very quickly, but you should
S * be prepared to handle a changing IP address when DHCP overrides
S * AutoIP.
S */
S#ifndef LWIP_DHCP_AUTOIP_COOP_TRIES
S#define LWIP_DHCP_AUTOIP_COOP_TRIES     9
S#endif
S
S/*
S   ----------------------------------
S   ---------- SNMP options ----------
S   ----------------------------------
S*/
S/**
S * LWIP_SNMP==1: Turn on SNMP module. UDP must be available for SNMP
S * transport.
S */
S#ifndef LWIP_SNMP
S#define LWIP_SNMP                       0
S#endif
S
S/**
S * SNMP_CONCURRENT_REQUESTS: Number of concurrent requests the module will
S * allow. At least one request buffer is required.
S * Does not have to be changed unless external MIBs answer request asynchronously
S */
S#ifndef SNMP_CONCURRENT_REQUESTS
S#define SNMP_CONCURRENT_REQUESTS        1
S#endif
S
S/**
S * SNMP_TRAP_DESTINATIONS: Number of trap destinations. At least one trap
S * destination is required
S */
S#ifndef SNMP_TRAP_DESTINATIONS
S#define SNMP_TRAP_DESTINATIONS          1
S#endif
S
S/**
S * SNMP_PRIVATE_MIB: 
S * When using a private MIB, you have to create a file 'private_mib.h' that contains
S * a 'struct mib_array_node mib_private' which contains your MIB.
S */
S#ifndef SNMP_PRIVATE_MIB
S#define SNMP_PRIVATE_MIB                0
S#endif
S
S/**
S * Only allow SNMP write actions that are 'safe' (e.g. disabeling netifs is not
S * a safe action and disabled when SNMP_SAFE_REQUESTS = 1).
S * Unsafe requests are disabled by default!
S */
S#ifndef SNMP_SAFE_REQUESTS
S#define SNMP_SAFE_REQUESTS              1
S#endif
S
S/**
S * The maximum length of strings used. This affects the size of
S * MEMP_SNMP_VALUE elements.
S */
S#ifndef SNMP_MAX_OCTET_STRING_LEN
S#define SNMP_MAX_OCTET_STRING_LEN       127
S#endif
S
S/**
S * The maximum depth of the SNMP tree.
S * With private MIBs enabled, this depends on your MIB!
S * This affects the size of MEMP_SNMP_VALUE elements.
S */
S#ifndef SNMP_MAX_TREE_DEPTH
S#define SNMP_MAX_TREE_DEPTH             15
S#endif
S
S/**
S * The size of the MEMP_SNMP_VALUE elements, normally calculated from
S * SNMP_MAX_OCTET_STRING_LEN and SNMP_MAX_TREE_DEPTH.
S */
S#ifndef SNMP_MAX_VALUE_SIZE
S#define SNMP_MAX_VALUE_SIZE             LWIP_MAX((SNMP_MAX_OCTET_STRING_LEN)+1, sizeof(s32_t)*(SNMP_MAX_TREE_DEPTH))
S#endif
S
S/*
S   ----------------------------------
S   ---------- IGMP options ----------
S   ----------------------------------
S*/
S/**
S * LWIP_IGMP==1: Turn on IGMP module. 
S */
S#ifndef LWIP_IGMP
S#define LWIP_IGMP                       0
S#endif
S
S/*
S   ----------------------------------
S   ---------- DNS options -----------
S   ----------------------------------
S*/
S/**
S * LWIP_DNS==1: Turn on DNS module. UDP must be available for DNS
S * transport.
S */
S#ifndef LWIP_DNS
S#define LWIP_DNS                        0
S#endif
S
S/** DNS maximum number of entries to maintain locally. */
S#ifndef DNS_TABLE_SIZE
S#define DNS_TABLE_SIZE                  4
S#endif
S
S/** DNS maximum host name length supported in the name table. */
S#ifndef DNS_MAX_NAME_LENGTH
S#define DNS_MAX_NAME_LENGTH             256
S#endif
S
S/** The maximum of DNS servers */
S#ifndef DNS_MAX_SERVERS
S#define DNS_MAX_SERVERS                 2
S#endif
S
S/** DNS do a name checking between the query and the response. */
S#ifndef DNS_DOES_NAME_CHECK
S#define DNS_DOES_NAME_CHECK             1
S#endif
S
S/** DNS message max. size. Default value is RFC compliant. */
S#ifndef DNS_MSG_SIZE
S#define DNS_MSG_SIZE                    512
S#endif
S
S/** DNS_LOCAL_HOSTLIST: Implements a local host-to-address list. If enabled,
S *  you have to define
S *    #define DNS_LOCAL_HOSTLIST_INIT {{"host1", 0x123}, {"host2", 0x234}}
S *  (an array of structs name/address, where address is an u32_t in network
S *  byte order).
S *
S *  Instead, you can also use an external function:
S *  #define DNS_LOOKUP_LOCAL_EXTERN(x) extern u32_t my_lookup_function(const char *name)
S *  that returns the IP address or INADDR_NONE if not found.
S */
S#ifndef DNS_LOCAL_HOSTLIST
S#define DNS_LOCAL_HOSTLIST              0
S#endif /* DNS_LOCAL_HOSTLIST */
S
S/** If this is turned on, the local host-list can be dynamically changed
S *  at runtime. */
S#ifndef DNS_LOCAL_HOSTLIST_IS_DYNAMIC
S#define DNS_LOCAL_HOSTLIST_IS_DYNAMIC   0
S#endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
S
S/*
S   ---------------------------------
S   ---------- UDP options ----------
S   ---------------------------------
S*/
S/**
S * LWIP_UDP==1: Turn on UDP.
S */
S#ifndef LWIP_UDP
S#define LWIP_UDP                        1
S#endif
S
S/**
S * LWIP_UDPLITE==1: Turn on UDP-Lite. (Requires LWIP_UDP)
S */
S#ifndef LWIP_UDPLITE
S#define LWIP_UDPLITE                    0
S#endif
S
S/**
S * UDP_TTL: Default Time-To-Live value.
S */
S#ifndef UDP_TTL
S#define UDP_TTL                         (IP_DEFAULT_TTL)
S#endif
S
S/**
S * LWIP_NETBUF_RECVINFO==1: append destination addr and port to every netbuf.
S */
S#ifndef LWIP_NETBUF_RECVINFO
S#define LWIP_NETBUF_RECVINFO            0
S#endif
S
S/*
S   ---------------------------------
S   ---------- TCP options ----------
S   ---------------------------------
S*/
S/**
S * LWIP_TCP==1: Turn on TCP.
S */
S#ifndef LWIP_TCP
S#define LWIP_TCP                        1
S#endif
S
S/**
S * TCP_TTL: Default Time-To-Live value.
S */
S#ifndef TCP_TTL
S#define TCP_TTL                         (IP_DEFAULT_TTL)
S#endif
S
S/**
S * TCP_WND: The size of a TCP window.  This must be at least 
S * (2 * TCP_MSS) for things to work well
S */
S#ifndef TCP_WND
S#define TCP_WND                         (4 * TCP_MSS)
S#endif 
S
S/**
S * TCP_MAXRTX: Maximum number of retransmissions of data segments.
S */
S#ifndef TCP_MAXRTX
S#define TCP_MAXRTX                      12
S#endif
S
S/**
S * TCP_SYNMAXRTX: Maximum number of retransmissions of SYN segments.
S */
S#ifndef TCP_SYNMAXRTX
S#define TCP_SYNMAXRTX                   6
S#endif
S
S/**
S * TCP_QUEUE_OOSEQ==1: TCP will queue segments that arrive out of order.
S * Define to 0 if your device is low on memory.
S */
S#ifndef TCP_QUEUE_OOSEQ
S#define TCP_QUEUE_OOSEQ                 (LWIP_TCP)
S#endif
S
S/**
S * TCP_MSS: TCP Maximum segment size. (default is 536, a conservative default,
S * you might want to increase this.)
S * For the receive side, this MSS is advertised to the remote side
S * when opening a connection. For the transmit size, this MSS sets
S * an upper limit on the MSS advertised by the remote host.
S */
S#ifndef TCP_MSS
S#define TCP_MSS                         536
S#endif
S
S/**
S * TCP_CALCULATE_EFF_SEND_MSS: "The maximum size of a segment that TCP really
S * sends, the 'effective send MSS,' MUST be the smaller of the send MSS (which
S * reflects the available reassembly buffer size at the remote host) and the
S * largest size permitted by the IP layer" (RFC 1122)
S * Setting this to 1 enables code that checks TCP_MSS against the MTU of the
S * netif used for a connection and limits the MSS if it would be too big otherwise.
S */
S#ifndef TCP_CALCULATE_EFF_SEND_MSS
S#define TCP_CALCULATE_EFF_SEND_MSS      1
S#endif
S
S
S/**
S * TCP_SND_BUF: TCP sender buffer space (bytes).
S * To achieve good performance, this should be at least 2 * TCP_MSS.
S */
S#ifndef TCP_SND_BUF
S#define TCP_SND_BUF                     (2 * TCP_MSS)
S#endif
S
S/**
S * TCP_SND_QUEUELEN: TCP sender buffer space (pbufs). This must be at least
S * as much as (2 * TCP_SND_BUF/TCP_MSS) for things to work.
S */
S#ifndef TCP_SND_QUEUELEN
S#define TCP_SND_QUEUELEN                ((4 * (TCP_SND_BUF) + (TCP_MSS - 1))/(TCP_MSS))
S#endif
S
S/**
S * TCP_SNDLOWAT: TCP writable space (bytes). This must be less than
S * TCP_SND_BUF. It is the amount of space which must be available in the
S * TCP snd_buf for select to return writable (combined with TCP_SNDQUEUELOWAT).
S */
S#ifndef TCP_SNDLOWAT
S#define TCP_SNDLOWAT                    LWIP_MIN(LWIP_MAX(((TCP_SND_BUF)/2), (2 * TCP_MSS) + 1), (TCP_SND_BUF) - 1)
S#endif
S
S/**
S * TCP_SNDQUEUELOWAT: TCP writable bufs (pbuf count). This must be less
S * than TCP_SND_QUEUELEN. If the number of pbufs queued on a pcb drops below
S * this number, select returns writable (combined with TCP_SNDLOWAT).
S */
S#ifndef TCP_SNDQUEUELOWAT
S#define TCP_SNDQUEUELOWAT               LWIP_MAX(((TCP_SND_QUEUELEN)/2), 5)
S#endif
S
S/**
S * TCP_OOSEQ_MAX_BYTES: The maximum number of bytes queued on ooseq per pcb.
S * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
S */
S#ifndef TCP_OOSEQ_MAX_BYTES
S#define TCP_OOSEQ_MAX_BYTES             0
S#endif
S
S/**
S * TCP_OOSEQ_MAX_PBUFS: The maximum number of pbufs queued on ooseq per pcb.
S * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
S */
S#ifndef TCP_OOSEQ_MAX_PBUFS
S#define TCP_OOSEQ_MAX_PBUFS             0
S#endif
S
S/**
S * TCP_LISTEN_BACKLOG: Enable the backlog option for tcp listen pcb.
S */
S#ifndef TCP_LISTEN_BACKLOG
S#define TCP_LISTEN_BACKLOG              0
S#endif
S
S/**
S * The maximum allowed backlog for TCP listen netconns.
S * This backlog is used unless another is explicitly specified.
S * 0xff is the maximum (u8_t).
S */
S#ifndef TCP_DEFAULT_LISTEN_BACKLOG
S#define TCP_DEFAULT_LISTEN_BACKLOG      0xff
S#endif
S
S/**
S * TCP_OVERSIZE: The maximum number of bytes that tcp_write may
S * allocate ahead of time in an attempt to create shorter pbuf chains
S * for transmission. The meaningful range is 0 to TCP_MSS. Some
S * suggested values are:
S *
S * 0:         Disable oversized allocation. Each tcp_write() allocates a new
S              pbuf (old behaviour).
S * 1:         Allocate size-aligned pbufs with minimal excess. Use this if your
S *            scatter-gather DMA requires aligned fragments.
S * 128:       Limit the pbuf/memory overhead to 20%.
S * TCP_MSS:   Try to create unfragmented TCP packets.
S * TCP_MSS/4: Try to create 4 fragments or less per TCP packet.
S */
S#ifndef TCP_OVERSIZE
S#define TCP_OVERSIZE                    TCP_MSS
S#endif
S
S/**
S * LWIP_TCP_TIMESTAMPS==1: support the TCP timestamp option.
S */
S#ifndef LWIP_TCP_TIMESTAMPS
S#define LWIP_TCP_TIMESTAMPS             0
S#endif
S
S/**
S * TCP_WND_UPDATE_THRESHOLD: difference in window to trigger an
S * explicit window update
S */
S#ifndef TCP_WND_UPDATE_THRESHOLD
S#define TCP_WND_UPDATE_THRESHOLD   (TCP_WND / 4)
S#endif
S
S/**
S * LWIP_EVENT_API and LWIP_CALLBACK_API: Only one of these should be set to 1.
S *     LWIP_EVENT_API==1: The user defines lwip_tcp_event() to receive all
S *         events (accept, sent, etc) that happen in the system.
S *     LWIP_CALLBACK_API==1: The PCB callback function is called directly
S *         for the event. This is the default.
S */
S#if !defined(LWIP_EVENT_API) && !defined(LWIP_CALLBACK_API)
S#define LWIP_EVENT_API                  0
S#define LWIP_CALLBACK_API               1
S#endif
S
S
S/*
S   ----------------------------------
S   ---------- Pbuf options ----------
S   ----------------------------------
S*/
S/**
S * PBUF_LINK_HLEN: the number of bytes that should be allocated for a
S * link level header. The default is 14, the standard value for
S * Ethernet.
S */
S#ifndef PBUF_LINK_HLEN
S#define PBUF_LINK_HLEN                  (14 + ETH_PAD_SIZE)
S#endif
S
S/**
S * PBUF_POOL_BUFSIZE: the size of each pbuf in the pbuf pool. The default is
S * designed to accomodate single full size TCP frame in one pbuf, including
S * TCP_MSS, IP header, and link header.
S */
S#ifndef PBUF_POOL_BUFSIZE
S#define PBUF_POOL_BUFSIZE               LWIP_MEM_ALIGN_SIZE(TCP_MSS+40+PBUF_LINK_HLEN)
S#endif
S
S/*
S   ------------------------------------------------
S   ---------- Network Interfaces options ----------
S   ------------------------------------------------
S*/
S/**
S * LWIP_NETIF_HOSTNAME==1: use DHCP_OPTION_HOSTNAME with netif's hostname
S * field.
S */
S#ifndef LWIP_NETIF_HOSTNAME
S#define LWIP_NETIF_HOSTNAME             0
S#endif
S
S/**
S * LWIP_NETIF_API==1: Support netif api (in netifapi.c)
S */
S#ifndef LWIP_NETIF_API
S#define LWIP_NETIF_API                  0
S#endif
S
S/**
S * LWIP_NETIF_STATUS_CALLBACK==1: Support a callback function whenever an interface
S * changes its up/down status (i.e., due to DHCP IP acquistion)
S */
S#ifndef LWIP_NETIF_STATUS_CALLBACK
S#define LWIP_NETIF_STATUS_CALLBACK      0
S#endif
S
S/**
S * LWIP_NETIF_LINK_CALLBACK==1: Support a callback function from an interface
S * whenever the link changes (i.e., link down)
S */
S#ifndef LWIP_NETIF_LINK_CALLBACK
S#define LWIP_NETIF_LINK_CALLBACK        0
S#endif
S
S/**
S * LWIP_NETIF_REMOVE_CALLBACK==1: Support a callback function that is called
S * when a netif has been removed
S */
S#ifndef LWIP_NETIF_REMOVE_CALLBACK
S#define LWIP_NETIF_REMOVE_CALLBACK      0
S#endif
S
S/**
S * LWIP_NETIF_HWADDRHINT==1: Cache link-layer-address hints (e.g. table
S * indices) in struct netif. TCP and UDP can make use of this to prevent
S * scanning the ARP table for every sent packet. While this is faster for big
S * ARP tables or many concurrent connections, it might be counterproductive
S * if you have a tiny ARP table or if there never are concurrent connections.
S */
S#ifndef LWIP_NETIF_HWADDRHINT
S#define LWIP_NETIF_HWADDRHINT           0
S#endif
S
S/**
S * LWIP_NETIF_LOOPBACK==1: Support sending packets with a destination IP
S * address equal to the netif IP address, looping them back up the stack.
S */
S#ifndef LWIP_NETIF_LOOPBACK
S#define LWIP_NETIF_LOOPBACK             0
S#endif
S
S/**
S * LWIP_LOOPBACK_MAX_PBUFS: Maximum number of pbufs on queue for loopback
S * sending for each netif (0 = disabled)
S */
S#ifndef LWIP_LOOPBACK_MAX_PBUFS
S#define LWIP_LOOPBACK_MAX_PBUFS         0
S#endif
S
S/**
S * LWIP_NETIF_LOOPBACK_MULTITHREADING: Indicates whether threading is enabled in
S * the system, as netifs must change how they behave depending on this setting
S * for the LWIP_NETIF_LOOPBACK option to work.
S * Setting this is needed to avoid reentering non-reentrant functions like
S * tcp_input().
S *    LWIP_NETIF_LOOPBACK_MULTITHREADING==1: Indicates that the user is using a
S *       multithreaded environment like tcpip.c. In this case, netif->input()
S *       is called directly.
S *    LWIP_NETIF_LOOPBACK_MULTITHREADING==0: Indicates a polling (or NO_SYS) setup.
S *       The packets are put on a list and netif_poll() must be called in
S *       the main application loop.
S */
S#ifndef LWIP_NETIF_LOOPBACK_MULTITHREADING
S#define LWIP_NETIF_LOOPBACK_MULTITHREADING    (!NO_SYS)
S#endif
S
S/**
S * LWIP_NETIF_TX_SINGLE_PBUF: if this is set to 1, lwIP tries to put all data
S * to be sent into one single pbuf. This is for compatibility with DMA-enabled
S * MACs that do not support scatter-gather.
S * Beware that this might involve CPU-memcpy before transmitting that would not
S * be needed without this flag! Use this only if you need to!
S *
S * @todo: TCP and IP-frag do not work with this, yet:
S */
S#ifndef LWIP_NETIF_TX_SINGLE_PBUF
S#define LWIP_NETIF_TX_SINGLE_PBUF             0
S#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
S
S/*
S   ------------------------------------
S   ---------- LOOPIF options ----------
S   ------------------------------------
S*/
S/**
S * LWIP_HAVE_LOOPIF==1: Support loop interface (127.0.0.1) and loopif.c
S */
S#ifndef LWIP_HAVE_LOOPIF
S#define LWIP_HAVE_LOOPIF                0
S#endif
S
S/*
S   ------------------------------------
S   ---------- SLIPIF options ----------
S   ------------------------------------
S*/
S/**
S * LWIP_HAVE_SLIPIF==1: Support slip interface and slipif.c
S */
S#ifndef LWIP_HAVE_SLIPIF
S#define LWIP_HAVE_SLIPIF                0
S#endif
S
S/*
S   ------------------------------------
S   ---------- Thread options ----------
S   ------------------------------------
S*/
S/**
S * TCPIP_THREAD_NAME: The name assigned to the main tcpip thread.
S */
S#ifndef TCPIP_THREAD_NAME
S#define TCPIP_THREAD_NAME              "tcpip_thread"
S#endif
S
S/**
S * TCPIP_THREAD_STACKSIZE: The stack size used by the main tcpip thread.
S * The stack size value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef TCPIP_THREAD_STACKSIZE
S#define TCPIP_THREAD_STACKSIZE          0
S#endif
S
S/**
S * TCPIP_THREAD_PRIO: The priority assigned to the main tcpip thread.
S * The priority value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef TCPIP_THREAD_PRIO
S#define TCPIP_THREAD_PRIO               1
S#endif
S
S/**
S * TCPIP_MBOX_SIZE: The mailbox size for the tcpip thread messages
S * The queue size value itself is platform-dependent, but is passed to
S * sys_mbox_new() when tcpip_init is called.
S */
S#ifndef TCPIP_MBOX_SIZE
S#define TCPIP_MBOX_SIZE                 0
S#endif
S
S/**
S * SLIPIF_THREAD_NAME: The name assigned to the slipif_loop thread.
S */
S#ifndef SLIPIF_THREAD_NAME
S#define SLIPIF_THREAD_NAME             "slipif_loop"
S#endif
S
S/**
S * SLIP_THREAD_STACKSIZE: The stack size used by the slipif_loop thread.
S * The stack size value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef SLIPIF_THREAD_STACKSIZE
S#define SLIPIF_THREAD_STACKSIZE         0
S#endif
S
S/**
S * SLIPIF_THREAD_PRIO: The priority assigned to the slipif_loop thread.
S * The priority value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef SLIPIF_THREAD_PRIO
S#define SLIPIF_THREAD_PRIO              1
S#endif
S
S/**
S * PPP_THREAD_NAME: The name assigned to the pppInputThread.
S */
S#ifndef PPP_THREAD_NAME
S#define PPP_THREAD_NAME                "pppInputThread"
S#endif
S
S/**
S * PPP_THREAD_STACKSIZE: The stack size used by the pppInputThread.
S * The stack size value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef PPP_THREAD_STACKSIZE
S#define PPP_THREAD_STACKSIZE            0
S#endif
S
S/**
S * PPP_THREAD_PRIO: The priority assigned to the pppInputThread.
S * The priority value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef PPP_THREAD_PRIO
S#define PPP_THREAD_PRIO                 1
S#endif
S
S/**
S * DEFAULT_THREAD_NAME: The name assigned to any other lwIP thread.
S */
S#ifndef DEFAULT_THREAD_NAME
S#define DEFAULT_THREAD_NAME            "lwIP"
S#endif
S
S/**
S * DEFAULT_THREAD_STACKSIZE: The stack size used by any other lwIP thread.
S * The stack size value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef DEFAULT_THREAD_STACKSIZE
S#define DEFAULT_THREAD_STACKSIZE        0
S#endif
S
S/**
S * DEFAULT_THREAD_PRIO: The priority assigned to any other lwIP thread.
S * The priority value itself is platform-dependent, but is passed to
S * sys_thread_new() when the thread is created.
S */
S#ifndef DEFAULT_THREAD_PRIO
S#define DEFAULT_THREAD_PRIO             1
S#endif
S
S/**
S * DEFAULT_RAW_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
S * NETCONN_RAW. The queue size value itself is platform-dependent, but is passed
S * to sys_mbox_new() when the recvmbox is created.
S */
S#ifndef DEFAULT_RAW_RECVMBOX_SIZE
S#define DEFAULT_RAW_RECVMBOX_SIZE       0
S#endif
S
S/**
S * DEFAULT_UDP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
S * NETCONN_UDP. The queue size value itself is platform-dependent, but is passed
S * to sys_mbox_new() when the recvmbox is created.
S */
S#ifndef DEFAULT_UDP_RECVMBOX_SIZE
S#define DEFAULT_UDP_RECVMBOX_SIZE       0
S#endif
S
S/**
S * DEFAULT_TCP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
S * NETCONN_TCP. The queue size value itself is platform-dependent, but is passed
S * to sys_mbox_new() when the recvmbox is created.
S */
S#ifndef DEFAULT_TCP_RECVMBOX_SIZE
S#define DEFAULT_TCP_RECVMBOX_SIZE       0
S#endif
S
S/**
S * DEFAULT_ACCEPTMBOX_SIZE: The mailbox size for the incoming connections.
S * The queue size value itself is platform-dependent, but is passed to
S * sys_mbox_new() when the acceptmbox is created.
S */
S#ifndef DEFAULT_ACCEPTMBOX_SIZE
S#define DEFAULT_ACCEPTMBOX_SIZE         0
S#endif
S
S/*
S   ----------------------------------------------
S   ---------- Sequential layer options ----------
S   ----------------------------------------------
S*/
S/**
S * LWIP_TCPIP_CORE_LOCKING: (EXPERIMENTAL!)
S * Don't use it if you're not an active lwIP project member
S */
S#ifndef LWIP_TCPIP_CORE_LOCKING
S#define LWIP_TCPIP_CORE_LOCKING         0
S#endif
S
S/**
S * LWIP_TCPIP_CORE_LOCKING_INPUT: (EXPERIMENTAL!)
S * Don't use it if you're not an active lwIP project member
S */
S#ifndef LWIP_TCPIP_CORE_LOCKING_INPUT
S#define LWIP_TCPIP_CORE_LOCKING_INPUT   0
S#endif
S
S/**
S * LWIP_NETCONN==1: Enable Netconn API (require to use api_lib.c)
S */
S#ifndef LWIP_NETCONN
S#define LWIP_NETCONN                    1
S#endif
S
S/** LWIP_TCPIP_TIMEOUT==1: Enable tcpip_timeout/tcpip_untimeout tod create
S * timers running in tcpip_thread from another thread.
S */
S#ifndef LWIP_TCPIP_TIMEOUT
S#define LWIP_TCPIP_TIMEOUT              1
S#endif
S
S/*
S   ------------------------------------
S   ---------- Socket options ----------
S   ------------------------------------
S*/
S/**
S * LWIP_SOCKET==1: Enable Socket API (require to use sockets.c)
S */
S#ifndef LWIP_SOCKET
S#define LWIP_SOCKET                     1
S#endif
S
S/**
S * LWIP_COMPAT_SOCKETS==1: Enable BSD-style sockets functions names.
S * (only used if you use sockets.c)
S */
S#ifndef LWIP_COMPAT_SOCKETS
S#define LWIP_COMPAT_SOCKETS             1
S#endif
S
S/**
S * LWIP_POSIX_SOCKETS_IO_NAMES==1: Enable POSIX-style sockets functions names.
S * Disable this option if you use a POSIX operating system that uses the same
S * names (read, write & close). (only used if you use sockets.c)
S */
S#ifndef LWIP_POSIX_SOCKETS_IO_NAMES
S#define LWIP_POSIX_SOCKETS_IO_NAMES     1
S#endif
S
S/**
S * LWIP_TCP_KEEPALIVE==1: Enable TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT
S * options processing. Note that TCP_KEEPIDLE and TCP_KEEPINTVL have to be set
S * in seconds. (does not require sockets.c, and will affect tcp.c)
S */
S#ifndef LWIP_TCP_KEEPALIVE
S#define LWIP_TCP_KEEPALIVE              0
S#endif
S
S/**
S * LWIP_SO_SNDTIMEO==1: Enable send timeout for sockets/netconns and
S * SO_SNDTIMEO processing.
S */
S#ifndef LWIP_SO_SNDTIMEO
S#define LWIP_SO_SNDTIMEO                0
S#endif
S
S/**
S * LWIP_SO_RCVTIMEO==1: Enable receive timeout for sockets/netconns and
S * SO_RCVTIMEO processing.
S */
S#ifndef LWIP_SO_RCVTIMEO
S#define LWIP_SO_RCVTIMEO                0
S#endif
S
S/**
S * LWIP_SO_RCVBUF==1: Enable SO_RCVBUF processing.
S */
S#ifndef LWIP_SO_RCVBUF
S#define LWIP_SO_RCVBUF                  0
S#endif
S
S/**
S * If LWIP_SO_RCVBUF is used, this is the default value for recv_bufsize.
S */
S#ifndef RECV_BUFSIZE_DEFAULT
S#define RECV_BUFSIZE_DEFAULT            INT_MAX
S#endif
S
S/**
S * SO_REUSE==1: Enable SO_REUSEADDR option.
S */
S#ifndef SO_REUSE
S#define SO_REUSE                        0
S#endif
S
S/**
S * SO_REUSE_RXTOALL==1: Pass a copy of incoming broadcast/multicast packets
S * to all local matches if SO_REUSEADDR is turned on.
S * WARNING: Adds a memcpy for every packet if passing to more than one pcb!
S */
S#ifndef SO_REUSE_RXTOALL
S#define SO_REUSE_RXTOALL                0
S#endif
S
S/*
S   ----------------------------------------
S   ---------- Statistics options ----------
S   ----------------------------------------
S*/
S/**
S * LWIP_STATS==1: Enable statistics collection in lwip_stats.
S */
S#ifndef LWIP_STATS
S#define LWIP_STATS                      1
S#endif
S
S#if LWIP_STATS
S
S/**
S * LWIP_STATS_DISPLAY==1: Compile in the statistics output functions.
S */
S#ifndef LWIP_STATS_DISPLAY
S#define LWIP_STATS_DISPLAY              0
S#endif
S
S/**
S * LINK_STATS==1: Enable link stats.
S */
S#ifndef LINK_STATS
S#define LINK_STATS                      1
S#endif
S
S/**
S * ETHARP_STATS==1: Enable etharp stats.
S */
S#ifndef ETHARP_STATS
S#define ETHARP_STATS                    (LWIP_ARP)
S#endif
S
S/**
S * IP_STATS==1: Enable IP stats.
S */
S#ifndef IP_STATS
S#define IP_STATS                        1
S#endif
S
S/**
S * IPFRAG_STATS==1: Enable IP fragmentation stats. Default is
S * on if using either frag or reass.
S */
S#ifndef IPFRAG_STATS
S#define IPFRAG_STATS                    (IP_REASSEMBLY || IP_FRAG)
S#endif
S
S/**
S * ICMP_STATS==1: Enable ICMP stats.
S */
S#ifndef ICMP_STATS
S#define ICMP_STATS                      1
S#endif
S
S/**
S * IGMP_STATS==1: Enable IGMP stats.
S */
S#ifndef IGMP_STATS
S#define IGMP_STATS                      (LWIP_IGMP)
S#endif
S
S/**
S * UDP_STATS==1: Enable UDP stats. Default is on if
S * UDP enabled, otherwise off.
S */
S#ifndef UDP_STATS
S#define UDP_STATS                       (LWIP_UDP)
S#endif
S
S/**
S * TCP_STATS==1: Enable TCP stats. Default is on if TCP
S * enabled, otherwise off.
S */
S#ifndef TCP_STATS
S#define TCP_STATS                       (LWIP_TCP)
S#endif
S
S/**
S * MEM_STATS==1: Enable mem.c stats.
S */
S#ifndef MEM_STATS
S#define MEM_STATS                       ((MEM_LIBC_MALLOC == 0) && (MEM_USE_POOLS == 0))
S#endif
S
S/**
S * MEMP_STATS==1: Enable memp.c pool stats.
S */
S#ifndef MEMP_STATS
S#define MEMP_STATS                      (MEMP_MEM_MALLOC == 0)
S#endif
S
S/**
S * SYS_STATS==1: Enable system stats (sem and mbox counts, etc).
S */
S#ifndef SYS_STATS
S#define SYS_STATS                       (NO_SYS == 0)
S#endif
S
S#else
S
S#define LINK_STATS                      0
S#define IP_STATS                        0
S#define IPFRAG_STATS                    0
S#define ICMP_STATS                      0
S#define IGMP_STATS                      0
S#define UDP_STATS                       0
S#define TCP_STATS                       0
S#define MEM_STATS                       0
S#define MEMP_STATS                      0
S#define SYS_STATS                       0
S#define LWIP_STATS_DISPLAY              0
S
S#endif /* LWIP_STATS */
S
S/*
S   ---------------------------------
S   ---------- PPP options ----------
S   ---------------------------------
S*/
S/**
S * PPP_SUPPORT==1: Enable PPP.
S */
S#ifndef PPP_SUPPORT
S#define PPP_SUPPORT                     0
S#endif
S
S/**
S * PPPOE_SUPPORT==1: Enable PPP Over Ethernet
S */
S#ifndef PPPOE_SUPPORT
S#define PPPOE_SUPPORT                   0
S#endif
S
S/**
S * PPPOS_SUPPORT==1: Enable PPP Over Serial
S */
S#ifndef PPPOS_SUPPORT
S#define PPPOS_SUPPORT                   PPP_SUPPORT
S#endif
S
S#if PPP_SUPPORT
S
S/**
S * NUM_PPP: Max PPP sessions.
S */
S#ifndef NUM_PPP
S#define NUM_PPP                         1
S#endif
S
S/**
S * PAP_SUPPORT==1: Support PAP.
S */
S#ifndef PAP_SUPPORT
S#define PAP_SUPPORT                     0
S#endif
S
S/**
S * CHAP_SUPPORT==1: Support CHAP.
S */
S#ifndef CHAP_SUPPORT
S#define CHAP_SUPPORT                    0
S#endif
S
S/**
S * MSCHAP_SUPPORT==1: Support MSCHAP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef MSCHAP_SUPPORT
S#define MSCHAP_SUPPORT                  0
S#endif
S
S/**
S * CBCP_SUPPORT==1: Support CBCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CBCP_SUPPORT
S#define CBCP_SUPPORT                    0
S#endif
S
S/**
S * CCP_SUPPORT==1: Support CCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CCP_SUPPORT
S#define CCP_SUPPORT                     0
S#endif
S
S/**
S * VJ_SUPPORT==1: Support VJ header compression.
S */
S#ifndef VJ_SUPPORT
S#define VJ_SUPPORT                      0
S#endif
S
S/**
S * MD5_SUPPORT==1: Support MD5 (see also CHAP).
S */
S#ifndef MD5_SUPPORT
S#define MD5_SUPPORT                     0
S#endif
S
S/*
S * Timeouts
S */
S#ifndef FSM_DEFTIMEOUT
S#define FSM_DEFTIMEOUT                  6       /* Timeout time in seconds */
S#endif
S
S#ifndef FSM_DEFMAXTERMREQS
S#define FSM_DEFMAXTERMREQS              2       /* Maximum Terminate-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXCONFREQS
S#define FSM_DEFMAXCONFREQS              10      /* Maximum Configure-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXNAKLOOPS
S#define FSM_DEFMAXNAKLOOPS              5       /* Maximum number of nak loops */
S#endif
S
S#ifndef UPAP_DEFTIMEOUT
S#define UPAP_DEFTIMEOUT                 6       /* Timeout (seconds) for retransmitting req */
S#endif
S
S#ifndef UPAP_DEFREQTIME
S#define UPAP_DEFREQTIME                 30      /* Time to wait for auth-req from peer */
S#endif
S
S#ifndef CHAP_DEFTIMEOUT
S#define CHAP_DEFTIMEOUT                 6       /* Timeout time in seconds */
S#endif
S
S#ifndef CHAP_DEFTRANSMITS
S#define CHAP_DEFTRANSMITS               10      /* max # times to send challenge */
S#endif
S
S/* Interval in seconds between keepalive echo requests, 0 to disable. */
S#ifndef LCP_ECHOINTERVAL
S#define LCP_ECHOINTERVAL                0
S#endif
S
S/* Number of unanswered echo requests before failure. */
S#ifndef LCP_MAXECHOFAILS
S#define LCP_MAXECHOFAILS                3
S#endif
S
S/* Max Xmit idle time (in jiffies) before resend flag char. */
S#ifndef PPP_MAXIDLEFLAG
S#define PPP_MAXIDLEFLAG                 100
S#endif
S
S/*
S * Packet sizes
S *
S * Note - lcp shouldn't be allowed to negotiate stuff outside these
S *    limits.  See lcp.h in the pppd directory.
S * (XXX - these constants should simply be shared by lcp.c instead
S *    of living in lcp.h)
S */
S#define PPP_MTU                         1500     /* Default MTU (size of Info field) */
S#ifndef PPP_MAXMTU
S/* #define PPP_MAXMTU  65535 - (PPP_HDRLEN + PPP_FCSLEN) */
S#define PPP_MAXMTU                      1500 /* Largest MTU we allow */
S#endif
S#define PPP_MINMTU                      64
S#define PPP_MRU                         1500     /* default MRU = max length of info field */
S#define PPP_MAXMRU                      1500     /* Largest MRU we allow */
S#ifndef PPP_DEFMRU
S#define PPP_DEFMRU                      296             /* Try for this */
S#endif
S#define PPP_MINMRU                      128             /* No MRUs below this */
S
S#ifndef MAXNAMELEN
S#define MAXNAMELEN                      256     /* max length of hostname or name for auth */
S#endif
S#ifndef MAXSECRETLEN
S#define MAXSECRETLEN                    256     /* max length of password or secret */
S#endif
S
S#endif /* PPP_SUPPORT */
S
S/*
S   --------------------------------------
S   ---------- Checksum options ----------
S   --------------------------------------
S*/
S/**
S * CHECKSUM_GEN_IP==1: Generate checksums in software for outgoing IP packets.
S */
S#ifndef CHECKSUM_GEN_IP
S#define CHECKSUM_GEN_IP                 1
S#endif
S 
S/**
S * CHECKSUM_GEN_UDP==1: Generate checksums in software for outgoing UDP packets.
S */
S#ifndef CHECKSUM_GEN_UDP
S#define CHECKSUM_GEN_UDP                1
S#endif
S 
S/**
S * CHECKSUM_GEN_TCP==1: Generate checksums in software for outgoing TCP packets.
S */
S#ifndef CHECKSUM_GEN_TCP
S#define CHECKSUM_GEN_TCP                1
S#endif
S
S/**
S * CHECKSUM_GEN_ICMP==1: Generate checksums in software for outgoing ICMP packets.
S */
S#ifndef CHECKSUM_GEN_ICMP
S#define CHECKSUM_GEN_ICMP               1
S#endif
S 
S/**
S * CHECKSUM_CHECK_IP==1: Check checksums in software for incoming IP packets.
S */
S#ifndef CHECKSUM_CHECK_IP
S#define CHECKSUM_CHECK_IP               1
S#endif
S 
S/**
S * CHECKSUM_CHECK_UDP==1: Check checksums in software for incoming UDP packets.
S */
S#ifndef CHECKSUM_CHECK_UDP
S#define CHECKSUM_CHECK_UDP              1
S#endif
S
S/**
S * CHECKSUM_CHECK_TCP==1: Check checksums in software for incoming TCP packets.
S */
S#ifndef CHECKSUM_CHECK_TCP
S#define CHECKSUM_CHECK_TCP              1
S#endif
S
S/**
S * LWIP_CHECKSUM_ON_COPY==1: Calculate checksum when copying data from
S * application buffers to pbufs.
S */
S#ifndef LWIP_CHECKSUM_ON_COPY
S#define LWIP_CHECKSUM_ON_COPY           0
S#endif
S
S/*
S   ---------------------------------------
S   ---------- Hook options ---------------
S   ---------------------------------------
S*/
S
S/* Hooks are undefined by default, define them to a function if you need them. */
S
S/**
S * LWIP_HOOK_IP4_INPUT(pbuf, input_netif):
S * - called from ip_input() (IPv4)
S * - pbuf: received struct pbuf passed to ip_input()
S * - input_netif: struct netif on which the packet has been received
S * Return values:
S * - 0: Hook has not consumed the packet, packet is processed as normal
S * - != 0: Hook has consumed the packet.
S * If the hook consumed the packet, 'pbuf' is in the responsibility of the hook
S * (i.e. free it when done).
S */
S
S/**
S * LWIP_HOOK_IP4_ROUTE(dest):
S * - called from ip_route() (IPv4)
S * - dest: destination IPv4 address
S * Returns the destination netif or NULL if no destination netif is found. In
S * that case, ip_route() continues as normal.
S */
S
S/*
S   ---------------------------------------
S   ---------- Debugging options ----------
S   ---------------------------------------
S*/
S/**
S * LWIP_DBG_MIN_LEVEL: After masking, the value of the debug is
S * compared against this value. If it is smaller, then debugging
S * messages are written.
S */
S#ifndef LWIP_DBG_MIN_LEVEL
S#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_ALL
S#endif
S
S/**
S * LWIP_DBG_TYPES_ON: A mask that can be used to globally enable/disable
S * debug messages of certain types.
S */
S#ifndef LWIP_DBG_TYPES_ON
S#define LWIP_DBG_TYPES_ON               LWIP_DBG_ON
S#endif
S
S/**
S * ETHARP_DEBUG: Enable debugging in etharp.c.
S */
S#ifndef ETHARP_DEBUG
S#define ETHARP_DEBUG                    LWIP_DBG_OFF
S#endif
S
S/**
S * NETIF_DEBUG: Enable debugging in netif.c.
S */
S#ifndef NETIF_DEBUG
S#define NETIF_DEBUG                     LWIP_DBG_OFF
S#endif
S
S/**
S * PBUF_DEBUG: Enable debugging in pbuf.c.
S */
S#ifndef PBUF_DEBUG
S#define PBUF_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * API_LIB_DEBUG: Enable debugging in api_lib.c.
S */
S#ifndef API_LIB_DEBUG
S#define API_LIB_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * API_MSG_DEBUG: Enable debugging in api_msg.c.
S */
S#ifndef API_MSG_DEBUG
S#define API_MSG_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * SOCKETS_DEBUG: Enable debugging in sockets.c.
S */
S#ifndef SOCKETS_DEBUG
S#define SOCKETS_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * ICMP_DEBUG: Enable debugging in icmp.c.
S */
S#ifndef ICMP_DEBUG
S#define ICMP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * IGMP_DEBUG: Enable debugging in igmp.c.
S */
S#ifndef IGMP_DEBUG
S#define IGMP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * INET_DEBUG: Enable debugging in inet.c.
S */
S#ifndef INET_DEBUG
S#define INET_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * IP_DEBUG: Enable debugging for IP.
S */
S#ifndef IP_DEBUG
S#define IP_DEBUG                        LWIP_DBG_OFF
S#endif
S
S/**
S * IP_REASS_DEBUG: Enable debugging in ip_frag.c for both frag & reass.
S */
S#ifndef IP_REASS_DEBUG
S#define IP_REASS_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * RAW_DEBUG: Enable debugging in raw.c.
S */
S#ifndef RAW_DEBUG
S#define RAW_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * MEM_DEBUG: Enable debugging in mem.c.
S */
S#ifndef MEM_DEBUG
S#define MEM_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * MEMP_DEBUG: Enable debugging in memp.c.
S */
S#ifndef MEMP_DEBUG
S#define MEMP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * SYS_DEBUG: Enable debugging in sys.c.
S */
S#ifndef SYS_DEBUG
S#define SYS_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * TIMERS_DEBUG: Enable debugging in timers.c.
S */
S#ifndef TIMERS_DEBUG
S#define TIMERS_DEBUG                    LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_DEBUG: Enable debugging for TCP.
S */
S#ifndef TCP_DEBUG
S#define TCP_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_INPUT_DEBUG: Enable debugging in tcp_in.c for incoming debug.
S */
S#ifndef TCP_INPUT_DEBUG
S#define TCP_INPUT_DEBUG                 LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_FR_DEBUG: Enable debugging in tcp_in.c for fast retransmit.
S */
S#ifndef TCP_FR_DEBUG
S#define TCP_FR_DEBUG                    LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_RTO_DEBUG: Enable debugging in TCP for retransmit
S * timeout.
S */
S#ifndef TCP_RTO_DEBUG
S#define TCP_RTO_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_CWND_DEBUG: Enable debugging for TCP congestion window.
S */
S#ifndef TCP_CWND_DEBUG
S#define TCP_CWND_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_WND_DEBUG: Enable debugging in tcp_in.c for window updating.
S */
S#ifndef TCP_WND_DEBUG
S#define TCP_WND_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_OUTPUT_DEBUG: Enable debugging in tcp_out.c output functions.
S */
S#ifndef TCP_OUTPUT_DEBUG
S#define TCP_OUTPUT_DEBUG                LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_RST_DEBUG: Enable debugging for TCP with the RST message.
S */
S#ifndef TCP_RST_DEBUG
S#define TCP_RST_DEBUG                   LWIP_DBG_OFF
S#endif
S
S/**
S * TCP_QLEN_DEBUG: Enable debugging for TCP queue lengths.
S */
S#ifndef TCP_QLEN_DEBUG
S#define TCP_QLEN_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * UDP_DEBUG: Enable debugging in UDP.
S */
S#ifndef UDP_DEBUG
S#define UDP_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * TCPIP_DEBUG: Enable debugging in tcpip.c.
S */
S#ifndef TCPIP_DEBUG
S#define TCPIP_DEBUG                     LWIP_DBG_OFF
S#endif
S
S/**
S * PPP_DEBUG: Enable debugging for PPP.
S */
S#ifndef PPP_DEBUG
S#define PPP_DEBUG                       LWIP_DBG_OFF
S#endif
S
S/**
S * SLIP_DEBUG: Enable debugging in slipif.c.
S */
S#ifndef SLIP_DEBUG
S#define SLIP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * DHCP_DEBUG: Enable debugging in dhcp.c.
S */
S#ifndef DHCP_DEBUG
S#define DHCP_DEBUG                      LWIP_DBG_OFF
S#endif
S
S/**
S * AUTOIP_DEBUG: Enable debugging in autoip.c.
S */
S#ifndef AUTOIP_DEBUG
S#define AUTOIP_DEBUG                    LWIP_DBG_OFF
S#endif
S
S/**
S * SNMP_MSG_DEBUG: Enable debugging for SNMP messages.
S */
S#ifndef SNMP_MSG_DEBUG
S#define SNMP_MSG_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * SNMP_MIB_DEBUG: Enable debugging for SNMP MIBs.
S */
S#ifndef SNMP_MIB_DEBUG
S#define SNMP_MIB_DEBUG                  LWIP_DBG_OFF
S#endif
S
S/**
S * DNS_DEBUG: Enable debugging for DNS.
S */
S#ifndef DNS_DEBUG
S#define DNS_DEBUG                       LWIP_DBG_OFF
S#endif
S
N#endif /* __LWIP_OPT_H__ */
L 37 "..\..\lwip\src\include\lwip/debug.h" 2
N
N/** lower two bits indicate debug level
N * - 0 all
N * - 1 warning
N * - 2 serious
N * - 3 severe
N */
N#define LWIP_DBG_LEVEL_ALL     0x00
N#define LWIP_DBG_LEVEL_OFF     LWIP_DBG_LEVEL_ALL /* compatibility define only */
N#define LWIP_DBG_LEVEL_WARNING 0x01 /* bad checksums, dropped packets, ... */
N#define LWIP_DBG_LEVEL_SERIOUS 0x02 /* memory allocation failures, ... */
N#define LWIP_DBG_LEVEL_SEVERE  0x03
N#define LWIP_DBG_MASK_LEVEL    0x03
N
N/** flag for LWIP_DEBUGF to enable that debug message */
N#define LWIP_DBG_ON            0x80U
N/** flag for LWIP_DEBUGF to disable that debug message */
N#define LWIP_DBG_OFF           0x00U
N
N/** flag for LWIP_DEBUGF indicating a tracing message (to follow program flow) */
N#define LWIP_DBG_TRACE         0x40U
N/** flag for LWIP_DEBUGF indicating a state debug message (to follow module states) */
N#define LWIP_DBG_STATE         0x20U
N/** flag for LWIP_DEBUGF indicating newly added code, not thoroughly tested yet */
N#define LWIP_DBG_FRESH         0x10U
N/** flag for LWIP_DEBUGF to halt after printing this debug message */
N#define LWIP_DBG_HALT          0x08U
N
N#ifndef LWIP_NOASSERT
N#define LWIP_ASSERT(message, assertion) do { if(!(assertion)) \
N  LWIP_PLATFORM_ASSERT(message); } while(0)
X#define LWIP_ASSERT(message, assertion) do { if(!(assertion))   LWIP_PLATFORM_ASSERT(message); } while(0)
N#else  /* LWIP_NOASSERT */
S#define LWIP_ASSERT(message, assertion) 
N#endif /* LWIP_NOASSERT */
N
N/** if "expression" isn't true, then print "message" and execute "handler" expression */
N#ifndef LWIP_ERROR
S#define LWIP_ERROR(message, expression, handler) do { if (!(expression)) { \
S  LWIP_PLATFORM_ASSERT(message); handler;}} while(0)
X#define LWIP_ERROR(message, expression, handler) do { if (!(expression)) {   LWIP_PLATFORM_ASSERT(message); handler;}} while(0)
N#endif /* LWIP_ERROR */
N
N#ifdef LWIP_DEBUG
N/** print debug message only if debug message type is enabled...
N *  AND is of correct type AND is at least LWIP_DBG_LEVEL
N */
N#define LWIP_DEBUGF(debug, message) do { \
N                               if ( \
N                                   ((debug) & LWIP_DBG_ON) && \
N                                   ((debug) & LWIP_DBG_TYPES_ON) && \
N                                   ((s16_t)((debug) & LWIP_DBG_MASK_LEVEL) >= LWIP_DBG_MIN_LEVEL)) { \
N                                 LWIP_PLATFORM_DIAG(message); \
N                                 if ((debug) & LWIP_DBG_HALT) { \
N                                   while(1); \
N                                 } \
N                               } \
N                             } while(0)
X#define LWIP_DEBUGF(debug, message) do {                                if (                                    ((debug) & LWIP_DBG_ON) &&                                    ((debug) & LWIP_DBG_TYPES_ON) &&                                    ((s16_t)((debug) & LWIP_DBG_MASK_LEVEL) >= LWIP_DBG_MIN_LEVEL)) {                                  LWIP_PLATFORM_DIAG(message);                                  if ((debug) & LWIP_DBG_HALT) {                                    while(1);                                  }                                }                              } while(0)
N
N#else  /* LWIP_DEBUG */
S#define LWIP_DEBUGF(debug, message) 
N#endif /* LWIP_DEBUG */
N
N#endif /* __LWIP_DEBUG_H__ */
N
L 47 "..\..\lwip\src\include\lwip/opt.h" 2
N
N/*
N   -----------------------------------------------
N   ---------- Platform specific locking ----------
N   -----------------------------------------------
N*/
N
N/**
N * SYS_LIGHTWEIGHT_PROT==1: if you want inter-task protection for certain
N * critical regions during buffer allocation, deallocation and memory
N * allocation and deallocation.
N */
N#ifndef SYS_LIGHTWEIGHT_PROT
N#define SYS_LIGHTWEIGHT_PROT            0
N#endif
N
N/** 
N * NO_SYS==1: Provides VERY minimal functionality. Otherwise,
N * use lwIP facilities.
N */
N#ifndef NO_SYS
S#define NO_SYS                          0
N#endif
N
N/**
N * NO_SYS_NO_TIMERS==1: Drop support for sys_timeout when NO_SYS==1
N * Mainly for compatibility to old versions.
N */
N#ifndef NO_SYS_NO_TIMERS
N#define NO_SYS_NO_TIMERS                0
N#endif
N
N/**
N * MEMCPY: override this if you have a faster implementation at hand than the
N * one included in your C library
N */
N#ifndef MEMCPY
N#define MEMCPY(dst,src,len)             memcpy(dst,src,len)
N#endif
N
N/**
N * SMEMCPY: override this with care! Some compilers (e.g. gcc) can inline a
N * call to memcpy() if the length is known at compile time and is small.
N */
N#ifndef SMEMCPY
N#define SMEMCPY(dst,src,len)            memcpy(dst,src,len)
N#endif
N
N/*
N   ------------------------------------
N   ---------- Memory options ----------
N   ------------------------------------
N*/
N/**
N * MEM_LIBC_MALLOC==1: Use malloc/free/realloc provided by your C-library
N * instead of the lwip internal allocator. Can save code size if you
N * already use it.
N */
N#ifndef MEM_LIBC_MALLOC
N#define MEM_LIBC_MALLOC                 0
N#endif
N
N/**
N* MEMP_MEM_MALLOC==1: Use mem_malloc/mem_free instead of the lwip pool allocator.
N* Especially useful with MEM_LIBC_MALLOC but handle with care regarding execution
N* speed and usage from interrupts!
N*/
N#ifndef MEMP_MEM_MALLOC
N#define MEMP_MEM_MALLOC                 0
N#endif
N
N/**
N * MEM_ALIGNMENT: should be set to the alignment of the CPU
N *    4 byte alignment -> #define MEM_ALIGNMENT 4
N *    2 byte alignment -> #define MEM_ALIGNMENT 2
N */
N#ifndef MEM_ALIGNMENT
S#define MEM_ALIGNMENT                   1
N#endif
N
N/**
N * MEM_SIZE: the size of the heap memory. If the application will send
N * a lot of data that needs to be copied, this should be set high.
N */
N#ifndef MEM_SIZE
S#define MEM_SIZE                        1600
N#endif
N
N/**
N * MEMP_SEPARATE_POOLS: if defined to 1, each pool is placed in its own array.
N * This can be used to individually change the location of each pool.
N * Default is one big array for all pools
N */
N#ifndef MEMP_SEPARATE_POOLS
N#define MEMP_SEPARATE_POOLS             0
N#endif
N
N/**
N * MEMP_OVERFLOW_CHECK: memp overflow protection reserves a configurable
N * amount of bytes before and after each memp element in every pool and fills
N * it with a prominent default value.
N *    MEMP_OVERFLOW_CHECK == 0 no checking
N *    MEMP_OVERFLOW_CHECK == 1 checks each element when it is freed
N *    MEMP_OVERFLOW_CHECK >= 2 checks each element in every pool every time
N *      memp_malloc() or memp_free() is called (useful but slow!)
N */
N#ifndef MEMP_OVERFLOW_CHECK
N#define MEMP_OVERFLOW_CHECK             0
N#endif
N
N/**
N * MEMP_SANITY_CHECK==1: run a sanity check after each memp_free() to make
N * sure that there are no cycles in the linked lists.
N */
N#ifndef MEMP_SANITY_CHECK
N#define MEMP_SANITY_CHECK               0
N#endif
N
N/**
N * MEM_USE_POOLS==1: Use an alternative to malloc() by allocating from a set
N * of memory pools of various sizes. When mem_malloc is called, an element of
N * the smallest pool that can provide the length needed is returned.
N * To use this, MEMP_USE_CUSTOM_POOLS also has to be enabled.
N */
N#ifndef MEM_USE_POOLS
N#define MEM_USE_POOLS                   0
N#endif
N
N/**
N * MEM_USE_POOLS_TRY_BIGGER_POOL==1: if one malloc-pool is empty, try the next
N * bigger pool - WARNING: THIS MIGHT WASTE MEMORY but it can make a system more
N * reliable. */
N#ifndef MEM_USE_POOLS_TRY_BIGGER_POOL
N#define MEM_USE_POOLS_TRY_BIGGER_POOL   0
N#endif
N
N/**
N * MEMP_USE_CUSTOM_POOLS==1: whether to include a user file lwippools.h
N * that defines additional pools beyond the "standard" ones required
N * by lwIP. If you set this to 1, you must have lwippools.h in your 
N * inlude path somewhere. 
N */
N#ifndef MEMP_USE_CUSTOM_POOLS
N#define MEMP_USE_CUSTOM_POOLS           0
N#endif
N
N/**
N * Set this to 1 if you want to free PBUF_RAM pbufs (or call mem_free()) from
N * interrupt context (or another context that doesn't allow waiting for a
N * semaphore).
N * If set to 1, mem_malloc will be protected by a semaphore and SYS_ARCH_PROTECT,
N * while mem_free will only use SYS_ARCH_PROTECT. mem_malloc SYS_ARCH_UNPROTECTs
N * with each loop so that mem_free can run.
N *
N * ATTENTION: As you can see from the above description, this leads to dis-/
N * enabling interrupts often, which can be slow! Also, on low memory, mem_malloc
N * can need longer.
N *
N * If you don't want that, at least for NO_SYS=0, you can still use the following
N * functions to enqueue a deallocation call which then runs in the tcpip_thread
N * context:
N * - pbuf_free_callback(p);
N * - mem_free_callback(m);
N */
N#ifndef LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
N#define LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT 0
N#endif
N
N/*
N   ------------------------------------------------
N   ---------- Internal Memory Pool Sizes ----------
N   ------------------------------------------------
N*/
N/**
N * MEMP_NUM_PBUF: the number of memp struct pbufs (used for PBUF_ROM and PBUF_REF).
N * If the application sends a lot of data out of ROM (or other static memory),
N * this should be set high.
N */
N#ifndef MEMP_NUM_PBUF
N#define MEMP_NUM_PBUF                   16
N#endif
N
N/**
N * MEMP_NUM_RAW_PCB: Number of raw connection PCBs
N * (requires the LWIP_RAW option)
N */
N#ifndef MEMP_NUM_RAW_PCB
N#define MEMP_NUM_RAW_PCB                4
N#endif
N
N/**
N * MEMP_NUM_UDP_PCB: the number of UDP protocol control blocks. One
N * per active UDP "connection".
N * (requires the LWIP_UDP option)
N */
N#ifndef MEMP_NUM_UDP_PCB
N#define MEMP_NUM_UDP_PCB                4
N#endif
N
N/**
N * MEMP_NUM_TCP_PCB: the number of simulatenously active TCP connections.
N * (requires the LWIP_TCP option)
N */
N#ifndef MEMP_NUM_TCP_PCB
N#define MEMP_NUM_TCP_PCB                5
N#endif
N
N/**
N * MEMP_NUM_TCP_PCB_LISTEN: the number of listening TCP connections.
N * (requires the LWIP_TCP option)
N */
N#ifndef MEMP_NUM_TCP_PCB_LISTEN
N#define MEMP_NUM_TCP_PCB_LISTEN         8
N#endif
N
N/**
N * MEMP_NUM_TCP_SEG: the number of simultaneously queued TCP segments.
N * (requires the LWIP_TCP option)
N */
N#ifndef MEMP_NUM_TCP_SEG
N#define MEMP_NUM_TCP_SEG                16
N#endif
N
N/**
N * MEMP_NUM_REASSDATA: the number of IP packets simultaneously queued for
N * reassembly (whole packets, not fragments!)
N */
N#ifndef MEMP_NUM_REASSDATA
N#define MEMP_NUM_REASSDATA              5
N#endif
N
N/**
N * MEMP_NUM_FRAG_PBUF: the number of IP fragments simultaneously sent
N * (fragments, not whole packets!).
N * This is only used with IP_FRAG_USES_STATIC_BUF==0 and
N * LWIP_NETIF_TX_SINGLE_PBUF==0 and only has to be > 1 with DMA-enabled MACs
N * where the packet is not yet sent when netif->output returns.
N */
N#ifndef MEMP_NUM_FRAG_PBUF
N#define MEMP_NUM_FRAG_PBUF              15
N#endif
N
N/**
N * MEMP_NUM_ARP_QUEUE: the number of simulateously queued outgoing
N * packets (pbufs) that are waiting for an ARP request (to resolve
N * their destination address) to finish.
N * (requires the ARP_QUEUEING option)
N */
N#ifndef MEMP_NUM_ARP_QUEUE
N#define MEMP_NUM_ARP_QUEUE              30
N#endif
N
N/**
N * MEMP_NUM_IGMP_GROUP: The number of multicast groups whose network interfaces
N * can be members et the same time (one per netif - allsystems group -, plus one
N * per netif membership).
N * (requires the LWIP_IGMP option)
N */
N#ifndef MEMP_NUM_IGMP_GROUP
N#define MEMP_NUM_IGMP_GROUP             8
N#endif
N
N/**
N * MEMP_NUM_SYS_TIMEOUT: the number of simulateously active timeouts.
N * (requires NO_SYS==0)
N * The default number of timeouts is calculated here for all enabled modules.
N * The formula expects settings to be either '0' or '1'.
N */
N#ifndef MEMP_NUM_SYS_TIMEOUT
N#define MEMP_NUM_SYS_TIMEOUT            (LWIP_TCP + IP_REASSEMBLY + LWIP_ARP + (2*LWIP_DHCP) + LWIP_AUTOIP + LWIP_IGMP + LWIP_DNS + PPP_SUPPORT)
N#endif
N
N/**
N * MEMP_NUM_NETBUF: the number of struct netbufs.
N * (only needed if you use the sequential API, like api_lib.c)
N */
N#ifndef MEMP_NUM_NETBUF
N#define MEMP_NUM_NETBUF                 2
N#endif
N
N/**
N * MEMP_NUM_NETCONN: the number of struct netconns.
N * (only needed if you use the sequential API, like api_lib.c)
N */
N#ifndef MEMP_NUM_NETCONN
N#define MEMP_NUM_NETCONN                4
N#endif
N
N/**
N * MEMP_NUM_TCPIP_MSG_API: the number of struct tcpip_msg, which are used
N * for callback/timeout API communication. 
N * (only needed if you use tcpip.c)
N */
N#ifndef MEMP_NUM_TCPIP_MSG_API
N#define MEMP_NUM_TCPIP_MSG_API          8
N#endif
N
N/**
N * MEMP_NUM_TCPIP_MSG_INPKT: the number of struct tcpip_msg, which are used
N * for incoming packets. 
N * (only needed if you use tcpip.c)
N */
N#ifndef MEMP_NUM_TCPIP_MSG_INPKT
N#define MEMP_NUM_TCPIP_MSG_INPKT        8
N#endif
N
N/**
N * MEMP_NUM_SNMP_NODE: the number of leafs in the SNMP tree.
N */
N#ifndef MEMP_NUM_SNMP_NODE
N#define MEMP_NUM_SNMP_NODE              50
N#endif
N
N/**
N * MEMP_NUM_SNMP_ROOTNODE: the number of branches in the SNMP tree.
N * Every branch has one leaf (MEMP_NUM_SNMP_NODE) at least!
N */
N#ifndef MEMP_NUM_SNMP_ROOTNODE
N#define MEMP_NUM_SNMP_ROOTNODE          30
N#endif
N
N/**
N * MEMP_NUM_SNMP_VARBIND: the number of concurrent requests (does not have to
N * be changed normally) - 2 of these are used per request (1 for input,
N * 1 for output)
N */
N#ifndef MEMP_NUM_SNMP_VARBIND
N#define MEMP_NUM_SNMP_VARBIND           2
N#endif
N
N/**
N * MEMP_NUM_SNMP_VALUE: the number of OID or values concurrently used
N * (does not have to be changed normally) - 3 of these are used per request
N * (1 for the value read and 2 for OIDs - input and output)
N */
N#ifndef MEMP_NUM_SNMP_VALUE
N#define MEMP_NUM_SNMP_VALUE             3
N#endif
N
N/**
N * MEMP_NUM_NETDB: the number of concurrently running lwip_addrinfo() calls
N * (before freeing the corresponding memory using lwip_freeaddrinfo()).
N */
N#ifndef MEMP_NUM_NETDB
N#define MEMP_NUM_NETDB                  1
N#endif
N
N/**
N * MEMP_NUM_LOCALHOSTLIST: the number of host entries in the local host list
N * if DNS_LOCAL_HOSTLIST_IS_DYNAMIC==1.
N */
N#ifndef MEMP_NUM_LOCALHOSTLIST
N#define MEMP_NUM_LOCALHOSTLIST          1
N#endif
N
N/**
N * MEMP_NUM_PPPOE_INTERFACES: the number of concurrently active PPPoE
N * interfaces (only used with PPPOE_SUPPORT==1)
N */
N#ifndef MEMP_NUM_PPPOE_INTERFACES
N#define MEMP_NUM_PPPOE_INTERFACES       1
N#endif
N
N/**
N * PBUF_POOL_SIZE: the number of buffers in the pbuf pool. 
N */
N#ifndef PBUF_POOL_SIZE
N#define PBUF_POOL_SIZE                  16
N#endif
N
N/*
N   ---------------------------------
N   ---------- ARP options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_ARP==1: Enable ARP functionality.
N */
N#ifndef LWIP_ARP
N#define LWIP_ARP                        1
N#endif
N
N/**
N * ARP_TABLE_SIZE: Number of active MAC-IP address pairs cached.
N */
N#ifndef ARP_TABLE_SIZE
N#define ARP_TABLE_SIZE                  10
N#endif
N
N/**
N * ARP_QUEUEING==1: Multiple outgoing packets are queued during hardware address
N * resolution. By default, only the most recent packet is queued per IP address.
N * This is sufficient for most protocols and mainly reduces TCP connection
N * startup time. Set this to 1 if you know your application sends more than one
N * packet in a row to an IP address that is not in the ARP cache.
N */
N#ifndef ARP_QUEUEING
N#define ARP_QUEUEING                    0
N#endif
N
N/**
N * ETHARP_TRUST_IP_MAC==1: Incoming IP packets cause the ARP table to be
N * updated with the source MAC and IP addresses supplied in the packet.
N * You may want to disable this if you do not trust LAN peers to have the
N * correct addresses, or as a limited approach to attempt to handle
N * spoofing. If disabled, lwIP will need to make a new ARP request if
N * the peer is not already in the ARP table, adding a little latency.
N * The peer *is* in the ARP table if it requested our address before.
N * Also notice that this slows down input processing of every IP packet!
N */
N#ifndef ETHARP_TRUST_IP_MAC
N#define ETHARP_TRUST_IP_MAC             0
N#endif
N
N/**
N * ETHARP_SUPPORT_VLAN==1: support receiving ethernet packets with VLAN header.
N * Additionally, you can define ETHARP_VLAN_CHECK to an u16_t VLAN ID to check.
N * If ETHARP_VLAN_CHECK is defined, only VLAN-traffic for this VLAN is accepted.
N * If ETHARP_VLAN_CHECK is not defined, all traffic is accepted.
N * Alternatively, define a function/define ETHARP_VLAN_CHECK_FN(eth_hdr, vlan)
N * that returns 1 to accept a packet or 0 to drop a packet.
N */
N#ifndef ETHARP_SUPPORT_VLAN
N#define ETHARP_SUPPORT_VLAN             0
N#endif
N
N/** LWIP_ETHERNET==1: enable ethernet support for PPPoE even though ARP
N * might be disabled
N */
N#ifndef LWIP_ETHERNET
N#define LWIP_ETHERNET                   (LWIP_ARP || PPPOE_SUPPORT)
N#endif
N
N/** ETH_PAD_SIZE: number of bytes added before the ethernet header to ensure
N * alignment of payload after that header. Since the header is 14 bytes long,
N * without this padding e.g. addresses in the IP header will not be aligned
N * on a 32-bit boundary, so setting this to 2 can speed up 32-bit-platforms.
N */
N#ifndef ETH_PAD_SIZE
S#define ETH_PAD_SIZE                    0
N#endif
N
N/** ETHARP_SUPPORT_STATIC_ENTRIES==1: enable code to support static ARP table
N * entries (using etharp_add_static_entry/etharp_remove_static_entry).
N */
N#ifndef ETHARP_SUPPORT_STATIC_ENTRIES
N#define ETHARP_SUPPORT_STATIC_ENTRIES   0
N#endif
N
N
N/*
N   --------------------------------
N   ---------- IP options ----------
N   --------------------------------
N*/
N/**
N * IP_FORWARD==1: Enables the ability to forward IP packets across network
N * interfaces. If you are going to run lwIP on a device with only one network
N * interface, define this to 0.
N */
N#ifndef IP_FORWARD
N#define IP_FORWARD                      0
N#endif
N
N/**
N * IP_OPTIONS_ALLOWED: Defines the behavior for IP options.
N *      IP_OPTIONS_ALLOWED==0: All packets with IP options are dropped.
N *      IP_OPTIONS_ALLOWED==1: IP options are allowed (but not parsed).
N */
N#ifndef IP_OPTIONS_ALLOWED
N#define IP_OPTIONS_ALLOWED              1
N#endif
N
N/**
N * IP_REASSEMBLY==1: Reassemble incoming fragmented IP packets. Note that
N * this option does not affect outgoing packet sizes, which can be controlled
N * via IP_FRAG.
N */
N#ifndef IP_REASSEMBLY
N#define IP_REASSEMBLY                   1
N#endif
N
N/**
N * IP_FRAG==1: Fragment outgoing IP packets if their size exceeds MTU. Note
N * that this option does not affect incoming packet sizes, which can be
N * controlled via IP_REASSEMBLY.
N */
N#ifndef IP_FRAG
N#define IP_FRAG                         1
N#endif
N
N/**
N * IP_REASS_MAXAGE: Maximum time (in multiples of IP_TMR_INTERVAL - so seconds, normally)
N * a fragmented IP packet waits for all fragments to arrive. If not all fragments arrived
N * in this time, the whole packet is discarded.
N */
N#ifndef IP_REASS_MAXAGE
N#define IP_REASS_MAXAGE                 3
N#endif
N
N/**
N * IP_REASS_MAX_PBUFS: Total maximum amount of pbufs waiting to be reassembled.
N * Since the received pbufs are enqueued, be sure to configure
N * PBUF_POOL_SIZE > IP_REASS_MAX_PBUFS so that the stack is still able to receive
N * packets even if the maximum amount of fragments is enqueued for reassembly!
N */
N#ifndef IP_REASS_MAX_PBUFS
N#define IP_REASS_MAX_PBUFS              10
N#endif
N
N/**
N * IP_FRAG_USES_STATIC_BUF==1: Use a static MTU-sized buffer for IP
N * fragmentation. Otherwise pbufs are allocated and reference the original
N * packet data to be fragmented (or with LWIP_NETIF_TX_SINGLE_PBUF==1,
N * new PBUF_RAM pbufs are used for fragments).
N * ATTENTION: IP_FRAG_USES_STATIC_BUF==1 may not be used for DMA-enabled MACs!
N */
N#ifndef IP_FRAG_USES_STATIC_BUF
N#define IP_FRAG_USES_STATIC_BUF         0
N#endif
N
N/**
N * IP_FRAG_MAX_MTU: Assumed max MTU on any interface for IP frag buffer
N * (requires IP_FRAG_USES_STATIC_BUF==1)
N */
N#if IP_FRAG_USES_STATIC_BUF && !defined(IP_FRAG_MAX_MTU)
X#if 0 && !0L
S#define IP_FRAG_MAX_MTU                 1500
N#endif
N
N/**
N * IP_DEFAULT_TTL: Default value for Time-To-Live used by transport layers.
N */
N#ifndef IP_DEFAULT_TTL
N#define IP_DEFAULT_TTL                  255
N#endif
N
N/**
N * IP_SOF_BROADCAST=1: Use the SOF_BROADCAST field to enable broadcast
N * filter per pcb on udp and raw send operations. To enable broadcast filter
N * on recv operations, you also have to set IP_SOF_BROADCAST_RECV=1.
N */
N#ifndef IP_SOF_BROADCAST
N#define IP_SOF_BROADCAST                0
N#endif
N
N/**
N * IP_SOF_BROADCAST_RECV (requires IP_SOF_BROADCAST=1) enable the broadcast
N * filter on recv operations.
N */
N#ifndef IP_SOF_BROADCAST_RECV
N#define IP_SOF_BROADCAST_RECV           0
N#endif
N
N/**
N * IP_FORWARD_ALLOW_TX_ON_RX_NETIF==1: allow ip_forward() to send packets back
N * out on the netif where it was received. This should only be used for
N * wireless networks.
N * ATTENTION: When this is 1, make sure your netif driver correctly marks incoming
N * link-layer-broadcast/multicast packets as such using the corresponding pbuf flags!
N */
N#ifndef IP_FORWARD_ALLOW_TX_ON_RX_NETIF
N#define IP_FORWARD_ALLOW_TX_ON_RX_NETIF 0
N#endif
N
N/**
N * LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS==1: randomize the local port for the first
N * local TCP/UDP pcb (default==0). This can prevent creating predictable port
N * numbers after booting a device.
N */
N#ifndef LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS
N#define LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS 0
N#endif
N
N/*
N   ----------------------------------
N   ---------- ICMP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_ICMP==1: Enable ICMP module inside the IP stack.
N * Be careful, disable that make your product non-compliant to RFC1122
N */
N#ifndef LWIP_ICMP
N#define LWIP_ICMP                       1
N#endif
N
N/**
N * ICMP_TTL: Default value for Time-To-Live used by ICMP packets.
N */
N#ifndef ICMP_TTL
N#define ICMP_TTL                       (IP_DEFAULT_TTL)
N#endif
N
N/**
N * LWIP_BROADCAST_PING==1: respond to broadcast pings (default is unicast only)
N */
N#ifndef LWIP_BROADCAST_PING
N#define LWIP_BROADCAST_PING             0
N#endif
N
N/**
N * LWIP_MULTICAST_PING==1: respond to multicast pings (default is unicast only)
N */
N#ifndef LWIP_MULTICAST_PING
N#define LWIP_MULTICAST_PING             0
N#endif
N
N/*
N   ---------------------------------
N   ---------- RAW options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
N */
N#ifndef LWIP_RAW
N#define LWIP_RAW                        1
N#endif
N
N/**
N * LWIP_RAW==1: Enable application layer to hook into the IP layer itself.
N */
N#ifndef RAW_TTL
N#define RAW_TTL                        (IP_DEFAULT_TTL)
N#endif
N
N/*
N   ----------------------------------
N   ---------- DHCP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_DHCP==1: Enable DHCP module.
N */
N#ifndef LWIP_DHCP
N#define LWIP_DHCP                       0
N#endif
N
N/**
N * DHCP_DOES_ARP_CHECK==1: Do an ARP check on the offered address.
N */
N#ifndef DHCP_DOES_ARP_CHECK
N#define DHCP_DOES_ARP_CHECK             ((LWIP_DHCP) && (LWIP_ARP))
N#endif
N
N/*
N   ------------------------------------
N   ---------- AUTOIP options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_AUTOIP==1: Enable AUTOIP module.
N */
N#ifndef LWIP_AUTOIP
N#define LWIP_AUTOIP                     0
N#endif
N
N/**
N * LWIP_DHCP_AUTOIP_COOP==1: Allow DHCP and AUTOIP to be both enabled on
N * the same interface at the same time.
N */
N#ifndef LWIP_DHCP_AUTOIP_COOP
N#define LWIP_DHCP_AUTOIP_COOP           0
N#endif
N
N/**
N * LWIP_DHCP_AUTOIP_COOP_TRIES: Set to the number of DHCP DISCOVER probes
N * that should be sent before falling back on AUTOIP. This can be set
N * as low as 1 to get an AutoIP address very quickly, but you should
N * be prepared to handle a changing IP address when DHCP overrides
N * AutoIP.
N */
N#ifndef LWIP_DHCP_AUTOIP_COOP_TRIES
N#define LWIP_DHCP_AUTOIP_COOP_TRIES     9
N#endif
N
N/*
N   ----------------------------------
N   ---------- SNMP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_SNMP==1: Turn on SNMP module. UDP must be available for SNMP
N * transport.
N */
N#ifndef LWIP_SNMP
N#define LWIP_SNMP                       0
N#endif
N
N/**
N * SNMP_CONCURRENT_REQUESTS: Number of concurrent requests the module will
N * allow. At least one request buffer is required.
N * Does not have to be changed unless external MIBs answer request asynchronously
N */
N#ifndef SNMP_CONCURRENT_REQUESTS
N#define SNMP_CONCURRENT_REQUESTS        1
N#endif
N
N/**
N * SNMP_TRAP_DESTINATIONS: Number of trap destinations. At least one trap
N * destination is required
N */
N#ifndef SNMP_TRAP_DESTINATIONS
N#define SNMP_TRAP_DESTINATIONS          1
N#endif
N
N/**
N * SNMP_PRIVATE_MIB: 
N * When using a private MIB, you have to create a file 'private_mib.h' that contains
N * a 'struct mib_array_node mib_private' which contains your MIB.
N */
N#ifndef SNMP_PRIVATE_MIB
N#define SNMP_PRIVATE_MIB                0
N#endif
N
N/**
N * Only allow SNMP write actions that are 'safe' (e.g. disabeling netifs is not
N * a safe action and disabled when SNMP_SAFE_REQUESTS = 1).
N * Unsafe requests are disabled by default!
N */
N#ifndef SNMP_SAFE_REQUESTS
N#define SNMP_SAFE_REQUESTS              1
N#endif
N
N/**
N * The maximum length of strings used. This affects the size of
N * MEMP_SNMP_VALUE elements.
N */
N#ifndef SNMP_MAX_OCTET_STRING_LEN
N#define SNMP_MAX_OCTET_STRING_LEN       127
N#endif
N
N/**
N * The maximum depth of the SNMP tree.
N * With private MIBs enabled, this depends on your MIB!
N * This affects the size of MEMP_SNMP_VALUE elements.
N */
N#ifndef SNMP_MAX_TREE_DEPTH
N#define SNMP_MAX_TREE_DEPTH             15
N#endif
N
N/**
N * The size of the MEMP_SNMP_VALUE elements, normally calculated from
N * SNMP_MAX_OCTET_STRING_LEN and SNMP_MAX_TREE_DEPTH.
N */
N#ifndef SNMP_MAX_VALUE_SIZE
N#define SNMP_MAX_VALUE_SIZE             LWIP_MAX((SNMP_MAX_OCTET_STRING_LEN)+1, sizeof(s32_t)*(SNMP_MAX_TREE_DEPTH))
N#endif
N
N/*
N   ----------------------------------
N   ---------- IGMP options ----------
N   ----------------------------------
N*/
N/**
N * LWIP_IGMP==1: Turn on IGMP module. 
N */
N#ifndef LWIP_IGMP
N#define LWIP_IGMP                       0
N#endif
N
N/*
N   ----------------------------------
N   ---------- DNS options -----------
N   ----------------------------------
N*/
N/**
N * LWIP_DNS==1: Turn on DNS module. UDP must be available for DNS
N * transport.
N */
N#ifndef LWIP_DNS
N#define LWIP_DNS                        0
N#endif
N
N/** DNS maximum number of entries to maintain locally. */
N#ifndef DNS_TABLE_SIZE
N#define DNS_TABLE_SIZE                  4
N#endif
N
N/** DNS maximum host name length supported in the name table. */
N#ifndef DNS_MAX_NAME_LENGTH
N#define DNS_MAX_NAME_LENGTH             256
N#endif
N
N/** The maximum of DNS servers */
N#ifndef DNS_MAX_SERVERS
N#define DNS_MAX_SERVERS                 2
N#endif
N
N/** DNS do a name checking between the query and the response. */
N#ifndef DNS_DOES_NAME_CHECK
N#define DNS_DOES_NAME_CHECK             1
N#endif
N
N/** DNS message max. size. Default value is RFC compliant. */
N#ifndef DNS_MSG_SIZE
N#define DNS_MSG_SIZE                    512
N#endif
N
N/** DNS_LOCAL_HOSTLIST: Implements a local host-to-address list. If enabled,
N *  you have to define
N *    #define DNS_LOCAL_HOSTLIST_INIT {{"host1", 0x123}, {"host2", 0x234}}
N *  (an array of structs name/address, where address is an u32_t in network
N *  byte order).
N *
N *  Instead, you can also use an external function:
N *  #define DNS_LOOKUP_LOCAL_EXTERN(x) extern u32_t my_lookup_function(const char *name)
N *  that returns the IP address or INADDR_NONE if not found.
N */
N#ifndef DNS_LOCAL_HOSTLIST
N#define DNS_LOCAL_HOSTLIST              0
N#endif /* DNS_LOCAL_HOSTLIST */
N
N/** If this is turned on, the local host-list can be dynamically changed
N *  at runtime. */
N#ifndef DNS_LOCAL_HOSTLIST_IS_DYNAMIC
N#define DNS_LOCAL_HOSTLIST_IS_DYNAMIC   0
N#endif /* DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
N
N/*
N   ---------------------------------
N   ---------- UDP options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_UDP==1: Turn on UDP.
N */
N#ifndef LWIP_UDP
N#define LWIP_UDP                        1
N#endif
N
N/**
N * LWIP_UDPLITE==1: Turn on UDP-Lite. (Requires LWIP_UDP)
N */
N#ifndef LWIP_UDPLITE
N#define LWIP_UDPLITE                    0
N#endif
N
N/**
N * UDP_TTL: Default Time-To-Live value.
N */
N#ifndef UDP_TTL
N#define UDP_TTL                         (IP_DEFAULT_TTL)
N#endif
N
N/**
N * LWIP_NETBUF_RECVINFO==1: append destination addr and port to every netbuf.
N */
N#ifndef LWIP_NETBUF_RECVINFO
N#define LWIP_NETBUF_RECVINFO            0
N#endif
N
N/*
N   ---------------------------------
N   ---------- TCP options ----------
N   ---------------------------------
N*/
N/**
N * LWIP_TCP==1: Turn on TCP.
N */
N#ifndef LWIP_TCP
N#define LWIP_TCP                        1
N#endif
N
N/**
N * TCP_TTL: Default Time-To-Live value.
N */
N#ifndef TCP_TTL
N#define TCP_TTL                         (IP_DEFAULT_TTL)
N#endif
N
N/**
N * TCP_WND: The size of a TCP window.  This must be at least 
N * (2 * TCP_MSS) for things to work well
N */
N#ifndef TCP_WND
N#define TCP_WND                         (4 * TCP_MSS)
N#endif 
N
N/**
N * TCP_MAXRTX: Maximum number of retransmissions of data segments.
N */
N#ifndef TCP_MAXRTX
N#define TCP_MAXRTX                      12
N#endif
N
N/**
N * TCP_SYNMAXRTX: Maximum number of retransmissions of SYN segments.
N */
N#ifndef TCP_SYNMAXRTX
N#define TCP_SYNMAXRTX                   6
N#endif
N
N/**
N * TCP_QUEUE_OOSEQ==1: TCP will queue segments that arrive out of order.
N * Define to 0 if your device is low on memory.
N */
N#ifndef TCP_QUEUE_OOSEQ
N#define TCP_QUEUE_OOSEQ                 (LWIP_TCP)
N#endif
N
N/**
N * TCP_MSS: TCP Maximum segment size. (default is 536, a conservative default,
N * you might want to increase this.)
N * For the receive side, this MSS is advertised to the remote side
N * when opening a connection. For the transmit size, this MSS sets
N * an upper limit on the MSS advertised by the remote host.
N */
N#ifndef TCP_MSS
S#define TCP_MSS                         536
N#endif
N
N/**
N * TCP_CALCULATE_EFF_SEND_MSS: "The maximum size of a segment that TCP really
N * sends, the 'effective send MSS,' MUST be the smaller of the send MSS (which
N * reflects the available reassembly buffer size at the remote host) and the
N * largest size permitted by the IP layer" (RFC 1122)
N * Setting this to 1 enables code that checks TCP_MSS against the MTU of the
N * netif used for a connection and limits the MSS if it would be too big otherwise.
N */
N#ifndef TCP_CALCULATE_EFF_SEND_MSS
N#define TCP_CALCULATE_EFF_SEND_MSS      1
N#endif
N
N
N/**
N * TCP_SND_BUF: TCP sender buffer space (bytes).
N * To achieve good performance, this should be at least 2 * TCP_MSS.
N */
N#ifndef TCP_SND_BUF
S#define TCP_SND_BUF                     (2 * TCP_MSS)
N#endif
N
N/**
N * TCP_SND_QUEUELEN: TCP sender buffer space (pbufs). This must be at least
N * as much as (2 * TCP_SND_BUF/TCP_MSS) for things to work.
N */
N#ifndef TCP_SND_QUEUELEN
N#define TCP_SND_QUEUELEN                ((4 * (TCP_SND_BUF) + (TCP_MSS - 1))/(TCP_MSS))
N#endif
N
N/**
N * TCP_SNDLOWAT: TCP writable space (bytes). This must be less than
N * TCP_SND_BUF. It is the amount of space which must be available in the
N * TCP snd_buf for select to return writable (combined with TCP_SNDQUEUELOWAT).
N */
N#ifndef TCP_SNDLOWAT
N#define TCP_SNDLOWAT                    LWIP_MIN(LWIP_MAX(((TCP_SND_BUF)/2), (2 * TCP_MSS) + 1), (TCP_SND_BUF) - 1)
N#endif
N
N/**
N * TCP_SNDQUEUELOWAT: TCP writable bufs (pbuf count). This must be less
N * than TCP_SND_QUEUELEN. If the number of pbufs queued on a pcb drops below
N * this number, select returns writable (combined with TCP_SNDLOWAT).
N */
N#ifndef TCP_SNDQUEUELOWAT
N#define TCP_SNDQUEUELOWAT               LWIP_MAX(((TCP_SND_QUEUELEN)/2), 5)
N#endif
N
N/**
N * TCP_OOSEQ_MAX_BYTES: The maximum number of bytes queued on ooseq per pcb.
N * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
N */
N#ifndef TCP_OOSEQ_MAX_BYTES
N#define TCP_OOSEQ_MAX_BYTES             0
N#endif
N
N/**
N * TCP_OOSEQ_MAX_PBUFS: The maximum number of pbufs queued on ooseq per pcb.
N * Default is 0 (no limit). Only valid for TCP_QUEUE_OOSEQ==0.
N */
N#ifndef TCP_OOSEQ_MAX_PBUFS
N#define TCP_OOSEQ_MAX_PBUFS             0
N#endif
N
N/**
N * TCP_LISTEN_BACKLOG: Enable the backlog option for tcp listen pcb.
N */
N#ifndef TCP_LISTEN_BACKLOG
N#define TCP_LISTEN_BACKLOG              0
N#endif
N
N/**
N * The maximum allowed backlog for TCP listen netconns.
N * This backlog is used unless another is explicitly specified.
N * 0xff is the maximum (u8_t).
N */
N#ifndef TCP_DEFAULT_LISTEN_BACKLOG
N#define TCP_DEFAULT_LISTEN_BACKLOG      0xff
N#endif
N
N/**
N * TCP_OVERSIZE: The maximum number of bytes that tcp_write may
N * allocate ahead of time in an attempt to create shorter pbuf chains
N * for transmission. The meaningful range is 0 to TCP_MSS. Some
N * suggested values are:
N *
N * 0:         Disable oversized allocation. Each tcp_write() allocates a new
N              pbuf (old behaviour).
N * 1:         Allocate size-aligned pbufs with minimal excess. Use this if your
N *            scatter-gather DMA requires aligned fragments.
N * 128:       Limit the pbuf/memory overhead to 20%.
N * TCP_MSS:   Try to create unfragmented TCP packets.
N * TCP_MSS/4: Try to create 4 fragments or less per TCP packet.
N */
N#ifndef TCP_OVERSIZE
N#define TCP_OVERSIZE                    TCP_MSS
N#endif
N
N/**
N * LWIP_TCP_TIMESTAMPS==1: support the TCP timestamp option.
N */
N#ifndef LWIP_TCP_TIMESTAMPS
N#define LWIP_TCP_TIMESTAMPS             0
N#endif
N
N/**
N * TCP_WND_UPDATE_THRESHOLD: difference in window to trigger an
N * explicit window update
N */
N#ifndef TCP_WND_UPDATE_THRESHOLD
N#define TCP_WND_UPDATE_THRESHOLD   (TCP_WND / 4)
N#endif
N
N/**
N * LWIP_EVENT_API and LWIP_CALLBACK_API: Only one of these should be set to 1.
N *     LWIP_EVENT_API==1: The user defines lwip_tcp_event() to receive all
N *         events (accept, sent, etc) that happen in the system.
N *     LWIP_CALLBACK_API==1: The PCB callback function is called directly
N *         for the event. This is the default.
N */
N#if !defined(LWIP_EVENT_API) && !defined(LWIP_CALLBACK_API)
X#if !0L && !0L
N#define LWIP_EVENT_API                  0
N#define LWIP_CALLBACK_API               1
N#endif
N
N
N/*
N   ----------------------------------
N   ---------- Pbuf options ----------
N   ----------------------------------
N*/
N/**
N * PBUF_LINK_HLEN: the number of bytes that should be allocated for a
N * link level header. The default is 14, the standard value for
N * Ethernet.
N */
N#ifndef PBUF_LINK_HLEN
N#define PBUF_LINK_HLEN                  (14 + ETH_PAD_SIZE)
N#endif
N
N/**
N * PBUF_POOL_BUFSIZE: the size of each pbuf in the pbuf pool. The default is
N * designed to accomodate single full size TCP frame in one pbuf, including
N * TCP_MSS, IP header, and link header.
N */
N#ifndef PBUF_POOL_BUFSIZE
N#define PBUF_POOL_BUFSIZE               LWIP_MEM_ALIGN_SIZE(TCP_MSS+40+PBUF_LINK_HLEN)
N#endif
N
N/*
N   ------------------------------------------------
N   ---------- Network Interfaces options ----------
N   ------------------------------------------------
N*/
N/**
N * LWIP_NETIF_HOSTNAME==1: use DHCP_OPTION_HOSTNAME with netif's hostname
N * field.
N */
N#ifndef LWIP_NETIF_HOSTNAME
N#define LWIP_NETIF_HOSTNAME             0
N#endif
N
N/**
N * LWIP_NETIF_API==1: Support netif api (in netifapi.c)
N */
N#ifndef LWIP_NETIF_API
N#define LWIP_NETIF_API                  0
N#endif
N
N/**
N * LWIP_NETIF_STATUS_CALLBACK==1: Support a callback function whenever an interface
N * changes its up/down status (i.e., due to DHCP IP acquistion)
N */
N#ifndef LWIP_NETIF_STATUS_CALLBACK
N#define LWIP_NETIF_STATUS_CALLBACK      0
N#endif
N
N/**
N * LWIP_NETIF_LINK_CALLBACK==1: Support a callback function from an interface
N * whenever the link changes (i.e., link down)
N */
N#ifndef LWIP_NETIF_LINK_CALLBACK
N#define LWIP_NETIF_LINK_CALLBACK        0
N#endif
N
N/**
N * LWIP_NETIF_REMOVE_CALLBACK==1: Support a callback function that is called
N * when a netif has been removed
N */
N#ifndef LWIP_NETIF_REMOVE_CALLBACK
N#define LWIP_NETIF_REMOVE_CALLBACK      0
N#endif
N
N/**
N * LWIP_NETIF_HWADDRHINT==1: Cache link-layer-address hints (e.g. table
N * indices) in struct netif. TCP and UDP can make use of this to prevent
N * scanning the ARP table for every sent packet. While this is faster for big
N * ARP tables or many concurrent connections, it might be counterproductive
N * if you have a tiny ARP table or if there never are concurrent connections.
N */
N#ifndef LWIP_NETIF_HWADDRHINT
N#define LWIP_NETIF_HWADDRHINT           0
N#endif
N
N/**
N * LWIP_NETIF_LOOPBACK==1: Support sending packets with a destination IP
N * address equal to the netif IP address, looping them back up the stack.
N */
N#ifndef LWIP_NETIF_LOOPBACK
N#define LWIP_NETIF_LOOPBACK             0
N#endif
N
N/**
N * LWIP_LOOPBACK_MAX_PBUFS: Maximum number of pbufs on queue for loopback
N * sending for each netif (0 = disabled)
N */
N#ifndef LWIP_LOOPBACK_MAX_PBUFS
N#define LWIP_LOOPBACK_MAX_PBUFS         0
N#endif
N
N/**
N * LWIP_NETIF_LOOPBACK_MULTITHREADING: Indicates whether threading is enabled in
N * the system, as netifs must change how they behave depending on this setting
N * for the LWIP_NETIF_LOOPBACK option to work.
N * Setting this is needed to avoid reentering non-reentrant functions like
N * tcp_input().
N *    LWIP_NETIF_LOOPBACK_MULTITHREADING==1: Indicates that the user is using a
N *       multithreaded environment like tcpip.c. In this case, netif->input()
N *       is called directly.
N *    LWIP_NETIF_LOOPBACK_MULTITHREADING==0: Indicates a polling (or NO_SYS) setup.
N *       The packets are put on a list and netif_poll() must be called in
N *       the main application loop.
N */
N#ifndef LWIP_NETIF_LOOPBACK_MULTITHREADING
N#define LWIP_NETIF_LOOPBACK_MULTITHREADING    (!NO_SYS)
N#endif
N
N/**
N * LWIP_NETIF_TX_SINGLE_PBUF: if this is set to 1, lwIP tries to put all data
N * to be sent into one single pbuf. This is for compatibility with DMA-enabled
N * MACs that do not support scatter-gather.
N * Beware that this might involve CPU-memcpy before transmitting that would not
N * be needed without this flag! Use this only if you need to!
N *
N * @todo: TCP and IP-frag do not work with this, yet:
N */
N#ifndef LWIP_NETIF_TX_SINGLE_PBUF
N#define LWIP_NETIF_TX_SINGLE_PBUF             0
N#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
N
N/*
N   ------------------------------------
N   ---------- LOOPIF options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_HAVE_LOOPIF==1: Support loop interface (127.0.0.1) and loopif.c
N */
N#ifndef LWIP_HAVE_LOOPIF
S#define LWIP_HAVE_LOOPIF                0
N#endif
N
N/*
N   ------------------------------------
N   ---------- SLIPIF options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_HAVE_SLIPIF==1: Support slip interface and slipif.c
N */
N#ifndef LWIP_HAVE_SLIPIF
N#define LWIP_HAVE_SLIPIF                0
N#endif
N
N/*
N   ------------------------------------
N   ---------- Thread options ----------
N   ------------------------------------
N*/
N/**
N * TCPIP_THREAD_NAME: The name assigned to the main tcpip thread.
N */
N#ifndef TCPIP_THREAD_NAME
N#define TCPIP_THREAD_NAME              "tcpip_thread"
N#endif
N
N/**
N * TCPIP_THREAD_STACKSIZE: The stack size used by the main tcpip thread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef TCPIP_THREAD_STACKSIZE
N#define TCPIP_THREAD_STACKSIZE          0
N#endif
N
N/**
N * TCPIP_THREAD_PRIO: The priority assigned to the main tcpip thread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef TCPIP_THREAD_PRIO
N#define TCPIP_THREAD_PRIO               1
N#endif
N
N/**
N * TCPIP_MBOX_SIZE: The mailbox size for the tcpip thread messages
N * The queue size value itself is platform-dependent, but is passed to
N * sys_mbox_new() when tcpip_init is called.
N */
N#ifndef TCPIP_MBOX_SIZE
N#define TCPIP_MBOX_SIZE                 0
N#endif
N
N/**
N * SLIPIF_THREAD_NAME: The name assigned to the slipif_loop thread.
N */
N#ifndef SLIPIF_THREAD_NAME
N#define SLIPIF_THREAD_NAME             "slipif_loop"
N#endif
N
N/**
N * SLIP_THREAD_STACKSIZE: The stack size used by the slipif_loop thread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef SLIPIF_THREAD_STACKSIZE
N#define SLIPIF_THREAD_STACKSIZE         0
N#endif
N
N/**
N * SLIPIF_THREAD_PRIO: The priority assigned to the slipif_loop thread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef SLIPIF_THREAD_PRIO
N#define SLIPIF_THREAD_PRIO              1
N#endif
N
N/**
N * PPP_THREAD_NAME: The name assigned to the pppInputThread.
N */
N#ifndef PPP_THREAD_NAME
N#define PPP_THREAD_NAME                "pppInputThread"
N#endif
N
N/**
N * PPP_THREAD_STACKSIZE: The stack size used by the pppInputThread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef PPP_THREAD_STACKSIZE
N#define PPP_THREAD_STACKSIZE            0
N#endif
N
N/**
N * PPP_THREAD_PRIO: The priority assigned to the pppInputThread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef PPP_THREAD_PRIO
N#define PPP_THREAD_PRIO                 1
N#endif
N
N/**
N * DEFAULT_THREAD_NAME: The name assigned to any other lwIP thread.
N */
N#ifndef DEFAULT_THREAD_NAME
N#define DEFAULT_THREAD_NAME            "lwIP"
N#endif
N
N/**
N * DEFAULT_THREAD_STACKSIZE: The stack size used by any other lwIP thread.
N * The stack size value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef DEFAULT_THREAD_STACKSIZE
N#define DEFAULT_THREAD_STACKSIZE        0
N#endif
N
N/**
N * DEFAULT_THREAD_PRIO: The priority assigned to any other lwIP thread.
N * The priority value itself is platform-dependent, but is passed to
N * sys_thread_new() when the thread is created.
N */
N#ifndef DEFAULT_THREAD_PRIO
N#define DEFAULT_THREAD_PRIO             1
N#endif
N
N/**
N * DEFAULT_RAW_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
N * NETCONN_RAW. The queue size value itself is platform-dependent, but is passed
N * to sys_mbox_new() when the recvmbox is created.
N */
N#ifndef DEFAULT_RAW_RECVMBOX_SIZE
N#define DEFAULT_RAW_RECVMBOX_SIZE       0
N#endif
N
N/**
N * DEFAULT_UDP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
N * NETCONN_UDP. The queue size value itself is platform-dependent, but is passed
N * to sys_mbox_new() when the recvmbox is created.
N */
N#ifndef DEFAULT_UDP_RECVMBOX_SIZE
N#define DEFAULT_UDP_RECVMBOX_SIZE       0
N#endif
N
N/**
N * DEFAULT_TCP_RECVMBOX_SIZE: The mailbox size for the incoming packets on a
N * NETCONN_TCP. The queue size value itself is platform-dependent, but is passed
N * to sys_mbox_new() when the recvmbox is created.
N */
N#ifndef DEFAULT_TCP_RECVMBOX_SIZE
N#define DEFAULT_TCP_RECVMBOX_SIZE       0
N#endif
N
N/**
N * DEFAULT_ACCEPTMBOX_SIZE: The mailbox size for the incoming connections.
N * The queue size value itself is platform-dependent, but is passed to
N * sys_mbox_new() when the acceptmbox is created.
N */
N#ifndef DEFAULT_ACCEPTMBOX_SIZE
N#define DEFAULT_ACCEPTMBOX_SIZE         0
N#endif
N
N/*
N   ----------------------------------------------
N   ---------- Sequential layer options ----------
N   ----------------------------------------------
N*/
N/**
N * LWIP_TCPIP_CORE_LOCKING: (EXPERIMENTAL!)
N * Don't use it if you're not an active lwIP project member
N */
N#ifndef LWIP_TCPIP_CORE_LOCKING
N#define LWIP_TCPIP_CORE_LOCKING         0
N#endif
N
N/**
N * LWIP_TCPIP_CORE_LOCKING_INPUT: (EXPERIMENTAL!)
N * Don't use it if you're not an active lwIP project member
N */
N#ifndef LWIP_TCPIP_CORE_LOCKING_INPUT
N#define LWIP_TCPIP_CORE_LOCKING_INPUT   0
N#endif
N
N/**
N * LWIP_NETCONN==1: Enable Netconn API (require to use api_lib.c)
N */
N#ifndef LWIP_NETCONN
S#define LWIP_NETCONN                    1
N#endif
N
N/** LWIP_TCPIP_TIMEOUT==1: Enable tcpip_timeout/tcpip_untimeout tod create
N * timers running in tcpip_thread from another thread.
N */
N#ifndef LWIP_TCPIP_TIMEOUT
N#define LWIP_TCPIP_TIMEOUT              1
N#endif
N
N/*
N   ------------------------------------
N   ---------- Socket options ----------
N   ------------------------------------
N*/
N/**
N * LWIP_SOCKET==1: Enable Socket API (require to use sockets.c)
N */
N#ifndef LWIP_SOCKET
S#define LWIP_SOCKET                     1
N#endif
N
N/**
N * LWIP_COMPAT_SOCKETS==1: Enable BSD-style sockets functions names.
N * (only used if you use sockets.c)
N */
N#ifndef LWIP_COMPAT_SOCKETS
N#define LWIP_COMPAT_SOCKETS             1
N#endif
N
N/**
N * LWIP_POSIX_SOCKETS_IO_NAMES==1: Enable POSIX-style sockets functions names.
N * Disable this option if you use a POSIX operating system that uses the same
N * names (read, write & close). (only used if you use sockets.c)
N */
N#ifndef LWIP_POSIX_SOCKETS_IO_NAMES
N#define LWIP_POSIX_SOCKETS_IO_NAMES     1
N#endif
N
N/**
N * LWIP_TCP_KEEPALIVE==1: Enable TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT
N * options processing. Note that TCP_KEEPIDLE and TCP_KEEPINTVL have to be set
N * in seconds. (does not require sockets.c, and will affect tcp.c)
N */
N#ifndef LWIP_TCP_KEEPALIVE
N#define LWIP_TCP_KEEPALIVE              0
N#endif
N
N/**
N * LWIP_SO_SNDTIMEO==1: Enable send timeout for sockets/netconns and
N * SO_SNDTIMEO processing.
N */
N#ifndef LWIP_SO_SNDTIMEO
N#define LWIP_SO_SNDTIMEO                0
N#endif
N
N/**
N * LWIP_SO_RCVTIMEO==1: Enable receive timeout for sockets/netconns and
N * SO_RCVTIMEO processing.
N */
N#ifndef LWIP_SO_RCVTIMEO
N#define LWIP_SO_RCVTIMEO                0
N#endif
N
N/**
N * LWIP_SO_RCVBUF==1: Enable SO_RCVBUF processing.
N */
N#ifndef LWIP_SO_RCVBUF
N#define LWIP_SO_RCVBUF                  0
N#endif
N
N/**
N * If LWIP_SO_RCVBUF is used, this is the default value for recv_bufsize.
N */
N#ifndef RECV_BUFSIZE_DEFAULT
N#define RECV_BUFSIZE_DEFAULT            INT_MAX
N#endif
N
N/**
N * SO_REUSE==1: Enable SO_REUSEADDR option.
N */
N#ifndef SO_REUSE
N#define SO_REUSE                        0
N#endif
N
N/**
N * SO_REUSE_RXTOALL==1: Pass a copy of incoming broadcast/multicast packets
N * to all local matches if SO_REUSEADDR is turned on.
N * WARNING: Adds a memcpy for every packet if passing to more than one pcb!
N */
N#ifndef SO_REUSE_RXTOALL
N#define SO_REUSE_RXTOALL                0
N#endif
N
N/*
N   ----------------------------------------
N   ---------- Statistics options ----------
N   ----------------------------------------
N*/
N/**
N * LWIP_STATS==1: Enable statistics collection in lwip_stats.
N */
N#ifndef LWIP_STATS
N#define LWIP_STATS                      1
N#endif
N
N#if LWIP_STATS
X#if 1
N
N/**
N * LWIP_STATS_DISPLAY==1: Compile in the statistics output functions.
N */
N#ifndef LWIP_STATS_DISPLAY
N#define LWIP_STATS_DISPLAY              0
N#endif
N
N/**
N * LINK_STATS==1: Enable link stats.
N */
N#ifndef LINK_STATS
N#define LINK_STATS                      1
N#endif
N
N/**
N * ETHARP_STATS==1: Enable etharp stats.
N */
N#ifndef ETHARP_STATS
N#define ETHARP_STATS                    (LWIP_ARP)
N#endif
N
N/**
N * IP_STATS==1: Enable IP stats.
N */
N#ifndef IP_STATS
N#define IP_STATS                        1
N#endif
N
N/**
N * IPFRAG_STATS==1: Enable IP fragmentation stats. Default is
N * on if using either frag or reass.
N */
N#ifndef IPFRAG_STATS
N#define IPFRAG_STATS                    (IP_REASSEMBLY || IP_FRAG)
N#endif
N
N/**
N * ICMP_STATS==1: Enable ICMP stats.
N */
N#ifndef ICMP_STATS
N#define ICMP_STATS                      1
N#endif
N
N/**
N * IGMP_STATS==1: Enable IGMP stats.
N */
N#ifndef IGMP_STATS
N#define IGMP_STATS                      (LWIP_IGMP)
N#endif
N
N/**
N * UDP_STATS==1: Enable UDP stats. Default is on if
N * UDP enabled, otherwise off.
N */
N#ifndef UDP_STATS
N#define UDP_STATS                       (LWIP_UDP)
N#endif
N
N/**
N * TCP_STATS==1: Enable TCP stats. Default is on if TCP
N * enabled, otherwise off.
N */
N#ifndef TCP_STATS
N#define TCP_STATS                       (LWIP_TCP)
N#endif
N
N/**
N * MEM_STATS==1: Enable mem.c stats.
N */
N#ifndef MEM_STATS
N#define MEM_STATS                       ((MEM_LIBC_MALLOC == 0) && (MEM_USE_POOLS == 0))
N#endif
N
N/**
N * MEMP_STATS==1: Enable memp.c pool stats.
N */
N#ifndef MEMP_STATS
N#define MEMP_STATS                      (MEMP_MEM_MALLOC == 0)
N#endif
N
N/**
N * SYS_STATS==1: Enable system stats (sem and mbox counts, etc).
N */
N#ifndef SYS_STATS
N#define SYS_STATS                       (NO_SYS == 0)
N#endif
N
N#else
S
S#define LINK_STATS                      0
S#define IP_STATS                        0
S#define IPFRAG_STATS                    0
S#define ICMP_STATS                      0
S#define IGMP_STATS                      0
S#define UDP_STATS                       0
S#define TCP_STATS                       0
S#define MEM_STATS                       0
S#define MEMP_STATS                      0
S#define SYS_STATS                       0
S#define LWIP_STATS_DISPLAY              0
S
N#endif /* LWIP_STATS */
N
N/*
N   ---------------------------------
N   ---------- PPP options ----------
N   ---------------------------------
N*/
N/**
N * PPP_SUPPORT==1: Enable PPP.
N */
N#ifndef PPP_SUPPORT
N#define PPP_SUPPORT                     0
N#endif
N
N/**
N * PPPOE_SUPPORT==1: Enable PPP Over Ethernet
N */
N#ifndef PPPOE_SUPPORT
N#define PPPOE_SUPPORT                   0
N#endif
N
N/**
N * PPPOS_SUPPORT==1: Enable PPP Over Serial
N */
N#ifndef PPPOS_SUPPORT
N#define PPPOS_SUPPORT                   PPP_SUPPORT
N#endif
N
N#if PPP_SUPPORT
X#if 0
S
S/**
S * NUM_PPP: Max PPP sessions.
S */
S#ifndef NUM_PPP
S#define NUM_PPP                         1
S#endif
S
S/**
S * PAP_SUPPORT==1: Support PAP.
S */
S#ifndef PAP_SUPPORT
S#define PAP_SUPPORT                     0
S#endif
S
S/**
S * CHAP_SUPPORT==1: Support CHAP.
S */
S#ifndef CHAP_SUPPORT
S#define CHAP_SUPPORT                    0
S#endif
S
S/**
S * MSCHAP_SUPPORT==1: Support MSCHAP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef MSCHAP_SUPPORT
S#define MSCHAP_SUPPORT                  0
S#endif
S
S/**
S * CBCP_SUPPORT==1: Support CBCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CBCP_SUPPORT
S#define CBCP_SUPPORT                    0
S#endif
S
S/**
S * CCP_SUPPORT==1: Support CCP. CURRENTLY NOT SUPPORTED! DO NOT SET!
S */
S#ifndef CCP_SUPPORT
S#define CCP_SUPPORT                     0
S#endif
S
S/**
S * VJ_SUPPORT==1: Support VJ header compression.
S */
S#ifndef VJ_SUPPORT
S#define VJ_SUPPORT                      0
S#endif
S
S/**
S * MD5_SUPPORT==1: Support MD5 (see also CHAP).
S */
S#ifndef MD5_SUPPORT
S#define MD5_SUPPORT                     0
S#endif
S
S/*
S * Timeouts
S */
S#ifndef FSM_DEFTIMEOUT
S#define FSM_DEFTIMEOUT                  6       /* Timeout time in seconds */
S#endif
S
S#ifndef FSM_DEFMAXTERMREQS
S#define FSM_DEFMAXTERMREQS              2       /* Maximum Terminate-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXCONFREQS
S#define FSM_DEFMAXCONFREQS              10      /* Maximum Configure-Request transmissions */
S#endif
S
S#ifndef FSM_DEFMAXNAKLOOPS
S#define FSM_DEFMAXNAKLOOPS              5       /* Maximum number of nak loops */
S#endif
S
S#ifndef UPAP_DEFTIMEOUT
S#define UPAP_DEFTIMEOUT                 6       /* Timeout (seconds) for retransmitting req */
S#endif
S
S#ifndef UPAP_DEFREQTIME
S#define UPAP_DEFREQTIME                 30      /* Time to wait for auth-req from peer */
S#endif
S
S#ifndef CHAP_DEFTIMEOUT
S#define CHAP_DEFTIMEOUT                 6       /* Timeout time in seconds */
S#endif
S
S#ifndef CHAP_DEFTRANSMITS
S#define CHAP_DEFTRANSMITS               10      /* max # times to send challenge */
S#endif
S
S/* Interval in seconds between keepalive echo requests, 0 to disable. */
S#ifndef LCP_ECHOINTERVAL
S#define LCP_ECHOINTERVAL                0
S#endif
S
S/* Number of unanswered echo requests before failure. */
S#ifndef LCP_MAXECHOFAILS
S#define LCP_MAXECHOFAILS                3
S#endif
S
S/* Max Xmit idle time (in jiffies) before resend flag char. */
S#ifndef PPP_MAXIDLEFLAG
S#define PPP_MAXIDLEFLAG                 100
S#endif
S
S/*
S * Packet sizes
S *
S * Note - lcp shouldn't be allowed to negotiate stuff outside these
S *    limits.  See lcp.h in the pppd directory.
S * (XXX - these constants should simply be shared by lcp.c instead
S *    of living in lcp.h)
S */
S#define PPP_MTU                         1500     /* Default MTU (size of Info field) */
S#ifndef PPP_MAXMTU
S/* #define PPP_MAXMTU  65535 - (PPP_HDRLEN + PPP_FCSLEN) */
S#define PPP_MAXMTU                      1500 /* Largest MTU we allow */
S#endif
S#define PPP_MINMTU                      64
S#define PPP_MRU                         1500     /* default MRU = max length of info field */
S#define PPP_MAXMRU                      1500     /* Largest MRU we allow */
S#ifndef PPP_DEFMRU
S#define PPP_DEFMRU                      296             /* Try for this */
S#endif
S#define PPP_MINMRU                      128             /* No MRUs below this */
S
S#ifndef MAXNAMELEN
S#define MAXNAMELEN                      256     /* max length of hostname or name for auth */
S#endif
S#ifndef MAXSECRETLEN
S#define MAXSECRETLEN                    256     /* max length of password or secret */
S#endif
S
N#endif /* PPP_SUPPORT */
N
N/*
N   --------------------------------------
N   ---------- Checksum options ----------
N   --------------------------------------
N*/
N/**
N * CHECKSUM_GEN_IP==1: Generate checksums in software for outgoing IP packets.
N */
N#ifndef CHECKSUM_GEN_IP
N#define CHECKSUM_GEN_IP                 1
N#endif
N 
N/**
N * CHECKSUM_GEN_UDP==1: Generate checksums in software for outgoing UDP packets.
N */
N#ifndef CHECKSUM_GEN_UDP
N#define CHECKSUM_GEN_UDP                1
N#endif
N 
N/**
N * CHECKSUM_GEN_TCP==1: Generate checksums in software for outgoing TCP packets.
N */
N#ifndef CHECKSUM_GEN_TCP
N#define CHECKSUM_GEN_TCP                1
N#endif
N
N/**
N * CHECKSUM_GEN_ICMP==1: Generate checksums in software for outgoing ICMP packets.
N */
N#ifndef CHECKSUM_GEN_ICMP
N#define CHECKSUM_GEN_ICMP               1
N#endif
N 
N/**
N * CHECKSUM_CHECK_IP==1: Check checksums in software for incoming IP packets.
N */
N#ifndef CHECKSUM_CHECK_IP
N#define CHECKSUM_CHECK_IP               1
N#endif
N 
N/**
N * CHECKSUM_CHECK_UDP==1: Check checksums in software for incoming UDP packets.
N */
N#ifndef CHECKSUM_CHECK_UDP
N#define CHECKSUM_CHECK_UDP              1
N#endif
N
N/**
N * CHECKSUM_CHECK_TCP==1: Check checksums in software for incoming TCP packets.
N */
N#ifndef CHECKSUM_CHECK_TCP
N#define CHECKSUM_CHECK_TCP              1
N#endif
N
N/**
N * LWIP_CHECKSUM_ON_COPY==1: Calculate checksum when copying data from
N * application buffers to pbufs.
N */
N#ifndef LWIP_CHECKSUM_ON_COPY
N#define LWIP_CHECKSUM_ON_COPY           0
N#endif
N
N/*
N   ---------------------------------------
N   ---------- Hook options ---------------
N   ---------------------------------------
N*/
N
N/* Hooks are undefined by default, define them to a function if you need them. */
N
N/**
N * LWIP_HOOK_IP4_INPUT(pbuf, input_netif):
N * - called from ip_input() (IPv4)
N * - pbuf: received struct pbuf passed to ip_input()
N * - input_netif: struct netif on which the packet has been received
N * Return values:
N * - 0: Hook has not consumed the packet, packet is processed as normal
N * - != 0: Hook has consumed the packet.
N * If the hook consumed the packet, 'pbuf' is in the responsibility of the hook
N * (i.e. free it when done).
N */
N
N/**
N * LWIP_HOOK_IP4_ROUTE(dest):
N * - called from ip_route() (IPv4)
N * - dest: destination IPv4 address
N * Returns the destination netif or NULL if no destination netif is found. In
N * that case, ip_route() continues as normal.
N */
N
N/*
N   ---------------------------------------
N   ---------- Debugging options ----------
N   ---------------------------------------
N*/
N/**
N * LWIP_DBG_MIN_LEVEL: After masking, the value of the debug is
N * compared against this value. If it is smaller, then debugging
N * messages are written.
N */
N#ifndef LWIP_DBG_MIN_LEVEL
N#define LWIP_DBG_MIN_LEVEL              LWIP_DBG_LEVEL_ALL
N#endif
N
N/**
N * LWIP_DBG_TYPES_ON: A mask that can be used to globally enable/disable
N * debug messages of certain types.
N */
N#ifndef LWIP_DBG_TYPES_ON
N#define LWIP_DBG_TYPES_ON               LWIP_DBG_ON
N#endif
N
N/**
N * ETHARP_DEBUG: Enable debugging in etharp.c.
N */
N#ifndef ETHARP_DEBUG
N#define ETHARP_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * NETIF_DEBUG: Enable debugging in netif.c.
N */
N#ifndef NETIF_DEBUG
N#define NETIF_DEBUG                     LWIP_DBG_OFF
N#endif
N
N/**
N * PBUF_DEBUG: Enable debugging in pbuf.c.
N */
N#ifndef PBUF_DEBUG
N#define PBUF_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * API_LIB_DEBUG: Enable debugging in api_lib.c.
N */
N#ifndef API_LIB_DEBUG
N#define API_LIB_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * API_MSG_DEBUG: Enable debugging in api_msg.c.
N */
N#ifndef API_MSG_DEBUG
N#define API_MSG_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * SOCKETS_DEBUG: Enable debugging in sockets.c.
N */
N#ifndef SOCKETS_DEBUG
N#define SOCKETS_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * ICMP_DEBUG: Enable debugging in icmp.c.
N */
N#ifndef ICMP_DEBUG
N#define ICMP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * IGMP_DEBUG: Enable debugging in igmp.c.
N */
N#ifndef IGMP_DEBUG
N#define IGMP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * INET_DEBUG: Enable debugging in inet.c.
N */
N#ifndef INET_DEBUG
N#define INET_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * IP_DEBUG: Enable debugging for IP.
N */
N#ifndef IP_DEBUG
N#define IP_DEBUG                        LWIP_DBG_OFF
N#endif
N
N/**
N * IP_REASS_DEBUG: Enable debugging in ip_frag.c for both frag & reass.
N */
N#ifndef IP_REASS_DEBUG
N#define IP_REASS_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * RAW_DEBUG: Enable debugging in raw.c.
N */
N#ifndef RAW_DEBUG
N#define RAW_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * MEM_DEBUG: Enable debugging in mem.c.
N */
N#ifndef MEM_DEBUG
N#define MEM_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * MEMP_DEBUG: Enable debugging in memp.c.
N */
N#ifndef MEMP_DEBUG
N#define MEMP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * SYS_DEBUG: Enable debugging in sys.c.
N */
N#ifndef SYS_DEBUG
N#define SYS_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * TIMERS_DEBUG: Enable debugging in timers.c.
N */
N#ifndef TIMERS_DEBUG
N#define TIMERS_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_DEBUG: Enable debugging for TCP.
N */
N#ifndef TCP_DEBUG
N#define TCP_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_INPUT_DEBUG: Enable debugging in tcp_in.c for incoming debug.
N */
N#ifndef TCP_INPUT_DEBUG
N#define TCP_INPUT_DEBUG                 LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_FR_DEBUG: Enable debugging in tcp_in.c for fast retransmit.
N */
N#ifndef TCP_FR_DEBUG
N#define TCP_FR_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_RTO_DEBUG: Enable debugging in TCP for retransmit
N * timeout.
N */
N#ifndef TCP_RTO_DEBUG
N#define TCP_RTO_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_CWND_DEBUG: Enable debugging for TCP congestion window.
N */
N#ifndef TCP_CWND_DEBUG
N#define TCP_CWND_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_WND_DEBUG: Enable debugging in tcp_in.c for window updating.
N */
N#ifndef TCP_WND_DEBUG
N#define TCP_WND_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_OUTPUT_DEBUG: Enable debugging in tcp_out.c output functions.
N */
N#ifndef TCP_OUTPUT_DEBUG
N#define TCP_OUTPUT_DEBUG                LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_RST_DEBUG: Enable debugging for TCP with the RST message.
N */
N#ifndef TCP_RST_DEBUG
N#define TCP_RST_DEBUG                   LWIP_DBG_OFF
N#endif
N
N/**
N * TCP_QLEN_DEBUG: Enable debugging for TCP queue lengths.
N */
N#ifndef TCP_QLEN_DEBUG
N#define TCP_QLEN_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * UDP_DEBUG: Enable debugging in UDP.
N */
N#ifndef UDP_DEBUG
N#define UDP_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * TCPIP_DEBUG: Enable debugging in tcpip.c.
N */
N#ifndef TCPIP_DEBUG
N#define TCPIP_DEBUG                     LWIP_DBG_OFF
N#endif
N
N/**
N * PPP_DEBUG: Enable debugging for PPP.
N */
N#ifndef PPP_DEBUG
N#define PPP_DEBUG                       LWIP_DBG_OFF
N#endif
N
N/**
N * SLIP_DEBUG: Enable debugging in slipif.c.
N */
N#ifndef SLIP_DEBUG
N#define SLIP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * DHCP_DEBUG: Enable debugging in dhcp.c.
N */
N#ifndef DHCP_DEBUG
N#define DHCP_DEBUG                      LWIP_DBG_OFF
N#endif
N
N/**
N * AUTOIP_DEBUG: Enable debugging in autoip.c.
N */
N#ifndef AUTOIP_DEBUG
N#define AUTOIP_DEBUG                    LWIP_DBG_OFF
N#endif
N
N/**
N * SNMP_MSG_DEBUG: Enable debugging for SNMP messages.
N */
N#ifndef SNMP_MSG_DEBUG
N#define SNMP_MSG_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * SNMP_MIB_DEBUG: Enable debugging for SNMP MIBs.
N */
N#ifndef SNMP_MIB_DEBUG
N#define SNMP_MIB_DEBUG                  LWIP_DBG_OFF
N#endif
N
N/**
N * DNS_DEBUG: Enable debugging for DNS.
N */
N#ifndef DNS_DEBUG
N#define DNS_DEBUG                       LWIP_DBG_OFF
N#endif
N
N#endif /* __LWIP_OPT_H__ */
L 42 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/ip.h"
L 1 "..\..\lwip\src\include\ipv4\lwip/ip.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_IP_H__
N#define __LWIP_IP_H__
N
N#include "lwip/opt.h"
N
N#include "lwip/def.h"
L 1 "..\..\lwip\src\include\lwip/def.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_DEF_H__
N#define __LWIP_DEF_H__
N
N/* arch.h might define NULL already */
N#include "lwip/arch.h"
N#include "lwip/opt.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define LWIP_MAX(x , y)  (((x) > (y)) ? (x) : (y))
N#define LWIP_MIN(x , y)  (((x) < (y)) ? (x) : (y))
N
N#ifndef NULL
S#define NULL ((void *)0)
N#endif
N
N/* Endianess-optimized shifting of two u8_t to create one u16_t */
N#if BYTE_ORDER == LITTLE_ENDIAN
X#if 1234 == 1234
N#define LWIP_MAKE_U16(a, b) ((a << 8) | b)
N#else
S#define LWIP_MAKE_U16(a, b) ((b << 8) | a)
N#endif 
N
N#ifndef LWIP_PLATFORM_BYTESWAP
N#define LWIP_PLATFORM_BYTESWAP 0
N#endif
N
N#ifndef LWIP_PREFIX_BYTEORDER_FUNCS
N/* workaround for naming collisions on some platforms */
N
N#ifdef htons
S#undef htons
N#endif /* htons */
N#ifdef htonl
S#undef htonl
N#endif /* htonl */
N#ifdef ntohs
S#undef ntohs
N#endif /* ntohs */
N#ifdef ntohl
S#undef ntohl
N#endif /* ntohl */
N
N#define htons(x) lwip_htons(x)
N#define ntohs(x) lwip_ntohs(x)
N#define htonl(x) lwip_htonl(x)
N#define ntohl(x) lwip_ntohl(x)
N#endif /* LWIP_PREFIX_BYTEORDER_FUNCS */
N
N#if BYTE_ORDER == BIG_ENDIAN
X#if 1234 == 4321
S#define lwip_htons(x) (x)
S#define lwip_ntohs(x) (x)
S#define lwip_htonl(x) (x)
S#define lwip_ntohl(x) (x)
S#define PP_HTONS(x) (x)
S#define PP_NTOHS(x) (x)
S#define PP_HTONL(x) (x)
S#define PP_NTOHL(x) (x)
N#else /* BYTE_ORDER != BIG_ENDIAN */
N#if LWIP_PLATFORM_BYTESWAP
X#if 0
S#define lwip_htons(x) LWIP_PLATFORM_HTONS(x)
S#define lwip_ntohs(x) LWIP_PLATFORM_HTONS(x)
S#define lwip_htonl(x) LWIP_PLATFORM_HTONL(x)
S#define lwip_ntohl(x) LWIP_PLATFORM_HTONL(x)
N#else /* LWIP_PLATFORM_BYTESWAP */
Nu16_t lwip_htons(u16_t x);
Nu16_t lwip_ntohs(u16_t x);
Nu32_t lwip_htonl(u32_t x);
Nu32_t lwip_ntohl(u32_t x);
N#endif /* LWIP_PLATFORM_BYTESWAP */
N
N/* These macros should be calculated by the preprocessor and are used
N   with compile-time constants only (so that there is no little-endian
N   overhead at runtime). */
N#define PP_HTONS(x) ((((x) & 0xff) << 8) | (((x) & 0xff00) >> 8))
N#define PP_NTOHS(x) PP_HTONS(x)
N#define PP_HTONL(x) ((((x) & 0xff) << 24) | \
N                     (((x) & 0xff00) << 8) | \
N                     (((x) & 0xff0000UL) >> 8) | \
N                     (((x) & 0xff000000UL) >> 24))
X#define PP_HTONL(x) ((((x) & 0xff) << 24) |                      (((x) & 0xff00) << 8) |                      (((x) & 0xff0000UL) >> 8) |                      (((x) & 0xff000000UL) >> 24))
N#define PP_NTOHL(x) PP_HTONL(x)
N
N#endif /* BYTE_ORDER == BIG_ENDIAN */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_DEF_H__ */
N
L 38 "..\..\lwip\src\include\ipv4\lwip/ip.h" 2
N#include "lwip/pbuf.h"
L 1 "..\..\lwip\src\include\lwip/pbuf.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N
N#ifndef __LWIP_PBUF_H__
N#define __LWIP_PBUF_H__
N
N#include "lwip/opt.h"
N#include "lwip/err.h"
L 1 "..\..\lwip\src\include\lwip/err.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_ERR_H__
N#define __LWIP_ERR_H__
N
N#include "lwip/opt.h"
N#include "lwip/arch.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** Define LWIP_ERR_T in cc.h if you want to use
N *  a different type for your platform (must be signed). */
N#ifdef LWIP_ERR_T
Stypedef LWIP_ERR_T err_t;
N#else /* LWIP_ERR_T */
Ntypedef s8_t err_t;
N#endif /* LWIP_ERR_T*/
N
N/* Definitions for error constants. */
N
N#define ERR_OK          0    /* No error, everything OK. */
N#define ERR_MEM        -1    /* Out of memory error.     */
N#define ERR_BUF        -2    /* Buffer error.            */
N#define ERR_TIMEOUT    -3    /* Timeout.                 */
N#define ERR_RTE        -4    /* Routing problem.         */
N#define ERR_INPROGRESS -5    /* Operation in progress    */
N#define ERR_VAL        -6    /* Illegal value.           */
N#define ERR_WOULDBLOCK -7    /* Operation would block.   */
N#define ERR_USE        -8    /* Address in use.          */
N#define ERR_ISCONN     -9    /* Already connected.       */
N
N#define ERR_IS_FATAL(e) ((e) < ERR_ISCONN)
N
N#define ERR_ABRT       -10   /* Connection aborted.      */
N#define ERR_RST        -11   /* Connection reset.        */
N#define ERR_CLSD       -12   /* Connection closed.       */
N#define ERR_CONN       -13   /* Not connected.           */
N
N#define ERR_ARG        -14   /* Illegal argument.        */
N
N#define ERR_IF         -15   /* Low-level netif error    */
N
N
N#ifdef LWIP_DEBUG
Nextern const char *lwip_strerr(err_t err);
N#else
S#define lwip_strerr(x) ""
N#endif /* LWIP_DEBUG */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_ERR_H__ */
L 38 "..\..\lwip\src\include\lwip/pbuf.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** Currently, the pbuf_custom code is only needed for one specific configuration
N * of IP_FRAG */
N#define LWIP_SUPPORT_CUSTOM_PBUF (IP_FRAG && !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF)
N
N#define PBUF_TRANSPORT_HLEN 20
N#define PBUF_IP_HLEN        20
N
Ntypedef enum {
N  PBUF_TRANSPORT,
N  PBUF_IP,
N  PBUF_LINK,
N  PBUF_RAW
N} pbuf_layer;
N
Ntypedef enum {
N  PBUF_RAM, /* pbuf data is stored in RAM */
N  PBUF_ROM, /* pbuf data is stored in ROM */
N  PBUF_REF, /* pbuf comes from the pbuf pool */
N  PBUF_POOL /* pbuf payload refers to RAM */
N} pbuf_type;
N
N
N/** indicates this packet's data should be immediately passed to the application */
N#define PBUF_FLAG_PUSH      0x01U
N/** indicates this is a custom pbuf: pbuf_free and pbuf_header handle such a
N    a pbuf differently */
N#define PBUF_FLAG_IS_CUSTOM 0x02U
N/** indicates this pbuf is UDP multicast to be looped back */
N#define PBUF_FLAG_MCASTLOOP 0x04U
N/** indicates this pbuf was received as link-level broadcast */
N#define PBUF_FLAG_LLBCAST   0x08U
N/** indicates this pbuf was received as link-level multicast */
N#define PBUF_FLAG_LLMCAST   0x10U
N/** indicates this pbuf includes a TCP FIN flag */
N#define PBUF_FLAG_TCP_FIN   0x20U
N
Nstruct pbuf {
N  /** next pbuf in singly linked pbuf chain */
N  struct pbuf *next;
N
N  /** pointer to the actual data in the buffer */
N  void *payload;
N
N  /**
N   * total length of this buffer and all next buffers in chain
N   * belonging to the same packet.
N   *
N   * For non-queue packet chains this is the invariant:
N   * p->tot_len == p->len + (p->next? p->next->tot_len: 0)
N   */
N  u16_t tot_len;
N
N  /** length of this buffer */
N  u16_t len;
N
N  /** pbuf_type as u8_t instead of enum to save space */
N  u8_t /*pbuf_type*/ type;
N
N  /** misc flags */
N  u8_t flags;
N
N  /**
N   * the reference count always equals the number of pointers
N   * that refer to this pbuf. This can be pointers from an application,
N   * the stack itself, or pbuf->next pointers from a chain.
N   */
N  u16_t ref;
N};
N
N#if LWIP_SUPPORT_CUSTOM_PBUF
X#if (1 && !0 && !0)
N/** Prototype for a function to free a custom pbuf */
Ntypedef void (*pbuf_free_custom_fn)(struct pbuf *p);
N
N/** A custom pbuf: like a pbuf, but following a function pointer to free it. */
Nstruct pbuf_custom {
N  /** The actual pbuf */
N  struct pbuf pbuf;
N  /** This function is called when pbuf_free deallocates this pbuf(_custom) */
N  pbuf_free_custom_fn custom_free_function;
N};
N#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
N
N#if LWIP_TCP && TCP_QUEUE_OOSEQ
X#if 1 && (1)
N/** Define this to 0 to prevent freeing ooseq pbufs when the PBUF_POOL is empty */
N#ifndef PBUF_POOL_FREE_OOSEQ
N#define PBUF_POOL_FREE_OOSEQ 1
N#endif /* PBUF_POOL_FREE_OOSEQ */
N#if NO_SYS && PBUF_POOL_FREE_OOSEQ
X#if 1 && 1
Nextern volatile u8_t pbuf_free_ooseq_pending;
W "..\..\lwip\src\include\lwip/pbuf.h" 132 6 Deprecated declaration pbuf_free_ooseq - give arg types
Nvoid pbuf_free_ooseq();
N/** When not using sys_check_timeouts(), call PBUF_CHECK_FREE_OOSEQ()
N    at regular intervals from main level to check if ooseq pbufs need to be
N    freed! */
N#define PBUF_CHECK_FREE_OOSEQ() do { if(pbuf_free_ooseq_pending) { \
N  /* pbuf_alloc() reported PBUF_POOL to be empty -> try to free some \
N     ooseq queued pbufs now */ \
N  pbuf_free_ooseq(); }}while(0)
X#define PBUF_CHECK_FREE_OOSEQ() do { if(pbuf_free_ooseq_pending) {       pbuf_free_ooseq(); }}while(0)
N#endif /* NO_SYS && PBUF_POOL_FREE_OOSEQ*/
N#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ */
N
N/* Initializes the pbuf module. This call is empty for now, but may not be in future. */
N#define pbuf_init()
N
Nstruct pbuf *pbuf_alloc(pbuf_layer l, u16_t length, pbuf_type type);
N#if LWIP_SUPPORT_CUSTOM_PBUF
X#if (1 && !0 && !0)
Nstruct pbuf *pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type,
N                                 struct pbuf_custom *p, void *payload_mem,
N                                 u16_t payload_mem_len);
N#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
Nvoid pbuf_realloc(struct pbuf *p, u16_t size); 
Nu8_t pbuf_header(struct pbuf *p, s16_t header_size);
Nvoid pbuf_ref(struct pbuf *p);
Nu8_t pbuf_free(struct pbuf *p);
Nu8_t pbuf_clen(struct pbuf *p);  
Nvoid pbuf_cat(struct pbuf *head, struct pbuf *tail);
Nvoid pbuf_chain(struct pbuf *head, struct pbuf *tail);
Nstruct pbuf *pbuf_dechain(struct pbuf *p);
Nerr_t pbuf_copy(struct pbuf *p_to, struct pbuf *p_from);
Nu16_t pbuf_copy_partial(struct pbuf *p, void *dataptr, u16_t len, u16_t offset);
Nerr_t pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len);
Nstruct pbuf *pbuf_coalesce(struct pbuf *p, pbuf_layer layer);
N#if LWIP_CHECKSUM_ON_COPY
X#if 0
Serr_t pbuf_fill_chksum(struct pbuf *p, u16_t start_offset, const void *dataptr,
S                       u16_t len, u16_t *chksum);
N#endif /* LWIP_CHECKSUM_ON_COPY */
N
Nu8_t pbuf_get_at(struct pbuf* p, u16_t offset);
Nu16_t pbuf_memcmp(struct pbuf* p, u16_t offset, const void* s2, u16_t n);
Nu16_t pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset);
Nu16_t pbuf_strstr(struct pbuf* p, const char* substr);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_PBUF_H__ */
L 39 "..\..\lwip\src\include\ipv4\lwip/ip.h" 2
N#include "lwip/ip_addr.h"
L 1 "..\..\lwip\src\include\ipv4\lwip/ip_addr.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N *
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_IP_ADDR_H__
N#define __LWIP_IP_ADDR_H__
N
N#include "lwip/opt.h"
N#include "lwip/def.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* This is the aligned version of ip_addr_t,
N   used as local variable, on the stack, etc. */
Nstruct ip_addr {
N  u32_t addr;
N};
N
N/* This is the packed version of ip_addr_t,
N   used in network headers that are itself packed */
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct ip_addr_packed {
N  PACK_STRUCT_FIELD(u32_t addr);
X  u32_t addr;
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N/** ip_addr_t uses a struct for convenience only, so that the same defines can
N * operate both on ip_addr_t as well as on ip_addr_p_t. */
Ntypedef struct ip_addr ip_addr_t;
Ntypedef struct ip_addr_packed ip_addr_p_t;
N
N/*
N * struct ipaddr2 is used in the definition of the ARP packet format in
N * order to support compilers that don't have structure packing.
N */
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct ip_addr2 {
N  PACK_STRUCT_FIELD(u16_t addrw[2]);
X  u16_t addrw[2];
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N/* Forward declaration to not include netif.h */
Nstruct netif;
N
Nextern const ip_addr_t ip_addr_any;
Nextern const ip_addr_t ip_addr_broadcast;
N
N/** IP_ADDR_ can be used as a fixed IP address
N *  for the wildcard and the broadcast address
N */
N#define IP_ADDR_ANY         ((ip_addr_t *)&ip_addr_any)
N#define IP_ADDR_BROADCAST   ((ip_addr_t *)&ip_addr_broadcast)
N
N/** 255.255.255.255 */
N#define IPADDR_NONE         ((u32_t)0xffffffffUL)
N/** 127.0.0.1 */
N#define IPADDR_LOOPBACK     ((u32_t)0x7f000001UL)
N/** 0.0.0.0 */
N#define IPADDR_ANY          ((u32_t)0x00000000UL)
N/** 255.255.255.255 */
N#define IPADDR_BROADCAST    ((u32_t)0xffffffffUL)
N
N/* Definitions of the bits in an Internet address integer.
N
N   On subnets, host and network parts are found according to
N   the subnet mask, not these masks.  */
N#define IP_CLASSA(a)        ((((u32_t)(a)) & 0x80000000UL) == 0)
N#define IP_CLASSA_NET       0xff000000
N#define IP_CLASSA_NSHIFT    24
N#define IP_CLASSA_HOST      (0xffffffff & ~IP_CLASSA_NET)
N#define IP_CLASSA_MAX       128
N
N#define IP_CLASSB(a)        ((((u32_t)(a)) & 0xc0000000UL) == 0x80000000UL)
N#define IP_CLASSB_NET       0xffff0000
N#define IP_CLASSB_NSHIFT    16
N#define IP_CLASSB_HOST      (0xffffffff & ~IP_CLASSB_NET)
N#define IP_CLASSB_MAX       65536
N
N#define IP_CLASSC(a)        ((((u32_t)(a)) & 0xe0000000UL) == 0xc0000000UL)
N#define IP_CLASSC_NET       0xffffff00
N#define IP_CLASSC_NSHIFT    8
N#define IP_CLASSC_HOST      (0xffffffff & ~IP_CLASSC_NET)
N
N#define IP_CLASSD(a)        (((u32_t)(a) & 0xf0000000UL) == 0xe0000000UL)
N#define IP_CLASSD_NET       0xf0000000          /* These ones aren't really */
N#define IP_CLASSD_NSHIFT    28                  /*   net and host fields, but */
N#define IP_CLASSD_HOST      0x0fffffff          /*   routing needn't know. */
N#define IP_MULTICAST(a)     IP_CLASSD(a)
N
N#define IP_EXPERIMENTAL(a)  (((u32_t)(a) & 0xf0000000UL) == 0xf0000000UL)
N#define IP_BADCLASS(a)      (((u32_t)(a) & 0xf0000000UL) == 0xf0000000UL)
N
N#define IP_LOOPBACKNET      127                 /* official! */
N
N
N#if BYTE_ORDER == BIG_ENDIAN
X#if 1234 == 4321
S/** Set an IP address given by the four byte-parts */
S#define IP4_ADDR(ipaddr, a,b,c,d) \
S        (ipaddr)->addr = ((u32_t)((a) & 0xff) << 24) | \
S                         ((u32_t)((b) & 0xff) << 16) | \
S                         ((u32_t)((c) & 0xff) << 8)  | \
S                          (u32_t)((d) & 0xff)
X#define IP4_ADDR(ipaddr, a,b,c,d)         (ipaddr)->addr = ((u32_t)((a) & 0xff) << 24) |                          ((u32_t)((b) & 0xff) << 16) |                          ((u32_t)((c) & 0xff) << 8)  |                           (u32_t)((d) & 0xff)
N#else
N/** Set an IP address given by the four byte-parts.
N    Little-endian version that prevents the use of htonl. */
N#define IP4_ADDR(ipaddr, a,b,c,d) \
N        (ipaddr)->addr = ((u32_t)((d) & 0xff) << 24) | \
N                         ((u32_t)((c) & 0xff) << 16) | \
N                         ((u32_t)((b) & 0xff) << 8)  | \
N                          (u32_t)((a) & 0xff)
X#define IP4_ADDR(ipaddr, a,b,c,d)         (ipaddr)->addr = ((u32_t)((d) & 0xff) << 24) |                          ((u32_t)((c) & 0xff) << 16) |                          ((u32_t)((b) & 0xff) << 8)  |                           (u32_t)((a) & 0xff)
N#endif
N
N/** MEMCPY-like copying of IP addresses where addresses are known to be
N * 16-bit-aligned if the port is correctly configured (so a port could define
N * this to copying 2 u16_t's) - no NULL-pointer-checking needed. */
N#ifndef IPADDR2_COPY
N#define IPADDR2_COPY(dest, src) SMEMCPY(dest, src, sizeof(ip_addr_t))
N#endif
N
N/** Copy IP address - faster than ip_addr_set: no NULL check */
N#define ip_addr_copy(dest, src) ((dest).addr = (src).addr)
N/** Safely copy one IP address to another (src may be NULL) */
N#define ip_addr_set(dest, src) ((dest)->addr = \
N                                    ((src) == NULL ? 0 : \
N                                    (src)->addr))
X#define ip_addr_set(dest, src) ((dest)->addr =                                     ((src) == NULL ? 0 :                                     (src)->addr))
N/** Set complete address to zero */
N#define ip_addr_set_zero(ipaddr)      ((ipaddr)->addr = 0)
N/** Set address to IPADDR_ANY (no need for htonl()) */
N#define ip_addr_set_any(ipaddr)       ((ipaddr)->addr = IPADDR_ANY)
N/** Set address to loopback address */
N#define ip_addr_set_loopback(ipaddr)  ((ipaddr)->addr = PP_HTONL(IPADDR_LOOPBACK))
N/** Safely copy one IP address to another and change byte order
N * from host- to network-order. */
N#define ip_addr_set_hton(dest, src) ((dest)->addr = \
N                               ((src) == NULL ? 0:\
N                               htonl((src)->addr)))
X#define ip_addr_set_hton(dest, src) ((dest)->addr =                                ((src) == NULL ? 0:                               htonl((src)->addr)))
N/** IPv4 only: set the IP address given as an u32_t */
N#define ip4_addr_set_u32(dest_ipaddr, src_u32) ((dest_ipaddr)->addr = (src_u32))
N/** IPv4 only: get the IP address as an u32_t */
N#define ip4_addr_get_u32(src_ipaddr) ((src_ipaddr)->addr)
N
N/** Get the network address by combining host address with netmask */
N#define ip_addr_get_network(target, host, netmask) ((target)->addr = ((host)->addr) & ((netmask)->addr))
N
N/**
N * Determine if two address are on the same network.
N *
N * @arg addr1 IP address 1
N * @arg addr2 IP address 2
N * @arg mask network identifier mask
N * @return !0 if the network identifiers of both address match
N */
N#define ip_addr_netcmp(addr1, addr2, mask) (((addr1)->addr & \
N                                              (mask)->addr) == \
N                                             ((addr2)->addr & \
N                                              (mask)->addr))
X#define ip_addr_netcmp(addr1, addr2, mask) (((addr1)->addr &                                               (mask)->addr) ==                                              ((addr2)->addr &                                               (mask)->addr))
N#define ip_addr_cmp(addr1, addr2) ((addr1)->addr == (addr2)->addr)
N
N#define ip_addr_isany(addr1) ((addr1) == NULL || (addr1)->addr == IPADDR_ANY)
N
N#define ip_addr_isbroadcast(ipaddr, netif) ip4_addr_isbroadcast((ipaddr)->addr, (netif))
Nu8_t ip4_addr_isbroadcast(u32_t addr, const struct netif *netif);
N
N#define ip_addr_netmask_valid(netmask) ip4_addr_netmask_valid((netmask)->addr)
Nu8_t ip4_addr_netmask_valid(u32_t netmask);
N
N#define ip_addr_ismulticast(addr1) (((addr1)->addr & PP_HTONL(0xf0000000UL)) == PP_HTONL(0xe0000000UL))
N
N#define ip_addr_islinklocal(addr1) (((addr1)->addr & PP_HTONL(0xffff0000UL)) == PP_HTONL(0xa9fe0000UL))
N
N#define ip_addr_debug_print(debug, ipaddr) \
N  LWIP_DEBUGF(debug, ("%"U16_F".%"U16_F".%"U16_F".%"U16_F,             \
N                      ipaddr != NULL ? ip4_addr1_16(ipaddr) : 0,       \
N                      ipaddr != NULL ? ip4_addr2_16(ipaddr) : 0,       \
N                      ipaddr != NULL ? ip4_addr3_16(ipaddr) : 0,       \
N                      ipaddr != NULL ? ip4_addr4_16(ipaddr) : 0))
X#define ip_addr_debug_print(debug, ipaddr)   LWIP_DEBUGF(debug, ("%"U16_F".%"U16_F".%"U16_F".%"U16_F,                                   ipaddr != NULL ? ip4_addr1_16(ipaddr) : 0,                             ipaddr != NULL ? ip4_addr2_16(ipaddr) : 0,                             ipaddr != NULL ? ip4_addr3_16(ipaddr) : 0,                             ipaddr != NULL ? ip4_addr4_16(ipaddr) : 0))
N
N/* Get one byte from the 4-byte address */
N#define ip4_addr1(ipaddr) (((u8_t*)(ipaddr))[0])
N#define ip4_addr2(ipaddr) (((u8_t*)(ipaddr))[1])
N#define ip4_addr3(ipaddr) (((u8_t*)(ipaddr))[2])
N#define ip4_addr4(ipaddr) (((u8_t*)(ipaddr))[3])
N/* These are cast to u16_t, with the intent that they are often arguments
N * to printf using the U16_F format from cc.h. */
N#define ip4_addr1_16(ipaddr) ((u16_t)ip4_addr1(ipaddr))
N#define ip4_addr2_16(ipaddr) ((u16_t)ip4_addr2(ipaddr))
N#define ip4_addr3_16(ipaddr) ((u16_t)ip4_addr3(ipaddr))
N#define ip4_addr4_16(ipaddr) ((u16_t)ip4_addr4(ipaddr))
N
N/** For backwards compatibility */
N#define ip_ntoa(ipaddr)  ipaddr_ntoa(ipaddr)
N
Nu32_t ipaddr_addr(const char *cp);
Nint ipaddr_aton(const char *cp, ip_addr_t *addr);
N/** returns ptr to static buffer; not reentrant! */
Nchar *ipaddr_ntoa(const ip_addr_t *addr);
Nchar *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_IP_ADDR_H__ */
L 40 "..\..\lwip\src\include\ipv4\lwip/ip.h" 2
N#include "lwip/err.h"
N#include "lwip/netif.h"
L 1 "..\..\lwip\src\include\lwip/netif.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_NETIF_H__
N#define __LWIP_NETIF_H__
N
N#include "lwip/opt.h"
N
N#define ENABLE_LOOPBACK (LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF)
N
N#include "lwip/err.h"
N
N#include "lwip/ip_addr.h"
N
N#include "lwip/def.h"
N#include "lwip/pbuf.h"
N#if LWIP_DHCP
X#if 0
Sstruct dhcp;
N#endif
N#if LWIP_AUTOIP
X#if 0
Sstruct autoip;
N#endif
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Throughout this file, IP addresses are expected to be in
N * the same byte order as in IP_PCB. */
N
N/** must be the maximum of all used hardware address lengths
N    across all types of interfaces in use */
N#define NETIF_MAX_HWADDR_LEN 6U
N
N/** Whether the network interface is 'up'. This is
N * a software flag used to control whether this network
N * interface is enabled and processes traffic.
N * It is set by the startup code (for static IP configuration) or
N * by dhcp/autoip when an address has been assigned.
N */
N#define NETIF_FLAG_UP           0x01U
N/** If set, the netif has broadcast capability.
N * Set by the netif driver in its init function. */
N#define NETIF_FLAG_BROADCAST    0x02U
N/** If set, the netif is one end of a point-to-point connection.
N * Set by the netif driver in its init function. */
N#define NETIF_FLAG_POINTTOPOINT 0x04U
N/** If set, the interface is configured using DHCP.
N * Set by the DHCP code when starting or stopping DHCP. */
N#define NETIF_FLAG_DHCP         0x08U
N/** If set, the interface has an active link
N *  (set by the network interface driver).
N * Either set by the netif driver in its init function (if the link
N * is up at that time) or at a later point once the link comes up
N * (if link detection is supported by the hardware). */
N#define NETIF_FLAG_LINK_UP      0x10U
N/** If set, the netif is an ethernet device using ARP.
N * Set by the netif driver in its init function.
N * Used to check input packet types and use of DHCP. */
N#define NETIF_FLAG_ETHARP       0x20U
N/** If set, the netif is an ethernet device. It might not use
N * ARP or TCP/IP if it is used for PPPoE only.
N */
N#define NETIF_FLAG_ETHERNET     0x40U
N/** If set, the netif has IGMP capability.
N * Set by the netif driver in its init function. */
N#define NETIF_FLAG_IGMP         0x80U
N
N/** Function prototype for netif init functions. Set up flags and output/linkoutput
N * callback functions in this function.
N *
N * @param netif The netif to initialize
N */
Ntypedef err_t (*netif_init_fn)(struct netif *netif);
N/** Function prototype for netif->input functions. This function is saved as 'input'
N * callback function in the netif struct. Call it when a packet has been received.
N *
N * @param p The received packet, copied into a pbuf
N * @param inp The netif which received the packet
N */
Ntypedef err_t (*netif_input_fn)(struct pbuf *p, struct netif *inp);
N/** Function prototype for netif->output functions. Called by lwIP when a packet
N * shall be sent. For ethernet netif, set this to 'etharp_output' and set
N * 'linkoutput'.
N *
N * @param netif The netif which shall send a packet
N * @param p The packet to send (p->payload points to IP header)
N * @param ipaddr The IP address to which the packet shall be sent
N */
Ntypedef err_t (*netif_output_fn)(struct netif *netif, struct pbuf *p,
N       ip_addr_t *ipaddr);
N/** Function prototype for netif->linkoutput functions. Only used for ethernet
N * netifs. This function is called by ARP when a packet shall be sent.
N *
N * @param netif The netif which shall send a packet
N * @param p The packet to send (raw ethernet packet)
N */
Ntypedef err_t (*netif_linkoutput_fn)(struct netif *netif, struct pbuf *p);
N/** Function prototype for netif status- or link-callback functions. */
Ntypedef void (*netif_status_callback_fn)(struct netif *netif);
N/** Function prototype for netif igmp_mac_filter functions */
Ntypedef err_t (*netif_igmp_mac_filter_fn)(struct netif *netif,
N       ip_addr_t *group, u8_t action);
N
N/** Generic data structure used for all lwIP network interfaces.
N *  The following fields should be filled in by the initialization
N *  function for the device driver: hwaddr_len, hwaddr[], mtu, flags */
Nstruct netif {
N  /** pointer to next in linked list */
N  struct netif *next;
N
N  /** IP address configuration in network byte order */
N  ip_addr_t ip_addr;
N  ip_addr_t netmask;
N  ip_addr_t gw;
N
N  /** This function is called by the network device driver
N   *  to pass a packet up the TCP/IP stack. */
N  netif_input_fn input;
N  /** This function is called by the IP module when it wants
N   *  to send a packet on the interface. This function typically
N   *  first resolves the hardware address, then sends the packet. */
N  netif_output_fn output;
N  /** This function is called by the ARP module when it wants
N   *  to send a packet on the interface. This function outputs
N   *  the pbuf as-is on the link medium. */
N  netif_linkoutput_fn linkoutput;
N#if LWIP_NETIF_STATUS_CALLBACK
X#if 0
S  /** This function is called when the netif state is set to up or down
S   */
S  netif_status_callback_fn status_callback;
N#endif /* LWIP_NETIF_STATUS_CALLBACK */
N#if LWIP_NETIF_LINK_CALLBACK
X#if 0
S  /** This function is called when the netif link is set to up or down
S   */
S  netif_status_callback_fn link_callback;
N#endif /* LWIP_NETIF_LINK_CALLBACK */
N#if LWIP_NETIF_REMOVE_CALLBACK
X#if 0
S  /** This function is called when the netif has been removed */
S  netif_status_callback_fn remove_callback;
N#endif /* LWIP_NETIF_REMOVE_CALLBACK */
N  /** This field can be set by the device driver and could point
N   *  to state information for the device. */
N  void *state;
N#if LWIP_DHCP
X#if 0
S  /** the DHCP client state information for this netif */
S  struct dhcp *dhcp;
N#endif /* LWIP_DHCP */
N#if LWIP_AUTOIP
X#if 0
S  /** the AutoIP client state information for this netif */
S  struct autoip *autoip;
N#endif
N#if LWIP_NETIF_HOSTNAME
X#if 0
S  /* the hostname for this netif, NULL is a valid value */
S  char*  hostname;
N#endif /* LWIP_NETIF_HOSTNAME */
N  /** maximum transfer unit (in bytes) */
N  u16_t mtu;
N  /** number of bytes used in hwaddr */
N  u8_t hwaddr_len;
N  /** link level hardware address of this interface */
N  u8_t hwaddr[NETIF_MAX_HWADDR_LEN];
X  u8_t hwaddr[6U];
N  /** flags (see NETIF_FLAG_ above) */
N  u8_t flags;
N  /** descriptive abbreviation */
N  char name[2];
N  /** number of this interface */
N  u8_t num;
N#if LWIP_SNMP
X#if 0
S  /** link type (from "snmp_ifType" enum from snmp.h) */
S  u8_t link_type;
S  /** (estimate) link speed */
S  u32_t link_speed;
S  /** timestamp at last change made (up/down) */
S  u32_t ts;
S  /** counters */
S  u32_t ifinoctets;
S  u32_t ifinucastpkts;
S  u32_t ifinnucastpkts;
S  u32_t ifindiscards;
S  u32_t ifoutoctets;
S  u32_t ifoutucastpkts;
S  u32_t ifoutnucastpkts;
S  u32_t ifoutdiscards;
N#endif /* LWIP_SNMP */
N#if LWIP_IGMP
X#if 0
S  /** This function could be called to add or delete a entry in the multicast
S      filter table of the ethernet MAC.*/
S  netif_igmp_mac_filter_fn igmp_mac_filter;
N#endif /* LWIP_IGMP */
N#if LWIP_NETIF_HWADDRHINT
X#if 0
S  u8_t *addr_hint;
N#endif /* LWIP_NETIF_HWADDRHINT */
N#if ENABLE_LOOPBACK
X#if (0 || 1)
N  /* List of packets to be queued for ourselves. */
N  struct pbuf *loop_first;
N  struct pbuf *loop_last;
N#if LWIP_LOOPBACK_MAX_PBUFS
X#if 0
S  u16_t loop_cnt_current;
N#endif /* LWIP_LOOPBACK_MAX_PBUFS */
N#endif /* ENABLE_LOOPBACK */
N};
N
N#if LWIP_SNMP
X#if 0
S#define NETIF_INIT_SNMP(netif, type, speed) \
S  /* use "snmp_ifType" enum from snmp.h for "type", snmp_ifType_ethernet_csmacd by example */ \
S  (netif)->link_type = (type);    \
S  /* your link speed here (units: bits per second) */  \
S  (netif)->link_speed = (speed);  \
S  (netif)->ts = 0;              \
S  (netif)->ifinoctets = 0;      \
S  (netif)->ifinucastpkts = 0;   \
S  (netif)->ifinnucastpkts = 0;  \
S  (netif)->ifindiscards = 0;    \
S  (netif)->ifoutoctets = 0;     \
S  (netif)->ifoutucastpkts = 0;  \
S  (netif)->ifoutnucastpkts = 0; \
S  (netif)->ifoutdiscards = 0
X#define NETIF_INIT_SNMP(netif, type, speed)       (netif)->link_type = (type);           (netif)->link_speed = (speed);    (netif)->ts = 0;                (netif)->ifinoctets = 0;        (netif)->ifinucastpkts = 0;     (netif)->ifinnucastpkts = 0;    (netif)->ifindiscards = 0;      (netif)->ifoutoctets = 0;       (netif)->ifoutucastpkts = 0;    (netif)->ifoutnucastpkts = 0;   (netif)->ifoutdiscards = 0
N#else /* LWIP_SNMP */
N#define NETIF_INIT_SNMP(netif, type, speed)
N#endif /* LWIP_SNMP */
N
N
N/** The list of network interfaces. */
Nextern struct netif *netif_list;
N/** The default network interface. */
Nextern struct netif *netif_default;
N
Nvoid netif_init(void);
N
Nstruct netif *netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
N      ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input);
N
Nvoid
Nnetif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
N      ip_addr_t *gw);
Nvoid netif_remove(struct netif * netif);
N
N/* Returns a network interface given its name. The name is of the form
N   "et0", where the first two letters are the "name" field in the
N   netif structure, and the digit is in the num field in the same
N   structure. */
Nstruct netif *netif_find(char *name);
N
Nvoid netif_set_default(struct netif *netif);
N
Nvoid netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr);
Nvoid netif_set_netmask(struct netif *netif, ip_addr_t *netmask);
Nvoid netif_set_gw(struct netif *netif, ip_addr_t *gw);
N
Nvoid netif_set_up(struct netif *netif);
Nvoid netif_set_down(struct netif *netif);
N/** Ask if an interface is up */
N#define netif_is_up(netif) (((netif)->flags & NETIF_FLAG_UP) ? (u8_t)1 : (u8_t)0)
N
N#if LWIP_NETIF_STATUS_CALLBACK
X#if 0
Svoid netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback);
N#endif /* LWIP_NETIF_STATUS_CALLBACK */
N#if LWIP_NETIF_REMOVE_CALLBACK
X#if 0
Svoid netif_set_remove_callback(struct netif *netif, netif_status_callback_fn remove_callback);
N#endif /* LWIP_NETIF_REMOVE_CALLBACK */
N
Nvoid netif_set_link_up(struct netif *netif);
Nvoid netif_set_link_down(struct netif *netif);
N/** Ask if a link is up */ 
N#define netif_is_link_up(netif) (((netif)->flags & NETIF_FLAG_LINK_UP) ? (u8_t)1 : (u8_t)0)
N
N#if LWIP_NETIF_LINK_CALLBACK
X#if 0
Svoid netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback);
N#endif /* LWIP_NETIF_LINK_CALLBACK */
N
N#if LWIP_NETIF_HOSTNAME
X#if 0
S#define netif_set_hostname(netif, name) do { if((netif) != NULL) { (netif)->hostname = name; }}while(0)
S#define netif_get_hostname(netif) (((netif) != NULL) ? ((netif)->hostname) : NULL)
N#endif /* LWIP_NETIF_HOSTNAME */
N
N#if LWIP_IGMP
X#if 0
S#define netif_set_igmp_mac_filter(netif, function) do { if((netif) != NULL) { (netif)->igmp_mac_filter = function; }}while(0)
S#define netif_get_igmp_mac_filter(netif) (((netif) != NULL) ? ((netif)->igmp_mac_filter) : NULL)
N#endif /* LWIP_IGMP */
N
N#if ENABLE_LOOPBACK
X#if (0 || 1)
Nerr_t netif_loop_output(struct netif *netif, struct pbuf *p, ip_addr_t *dest_ip);
Nvoid netif_poll(struct netif *netif);
N#if !LWIP_NETIF_LOOPBACK_MULTITHREADING
X#if !(!1)
Nvoid netif_poll_all(void);
N#endif /* !LWIP_NETIF_LOOPBACK_MULTITHREADING */
N#endif /* ENABLE_LOOPBACK */
N
N#if LWIP_NETIF_HWADDRHINT
X#if 0
S#define NETIF_SET_HWADDRHINT(netif, hint) ((netif)->addr_hint = (hint))
N#else /* LWIP_NETIF_HWADDRHINT */
N#define NETIF_SET_HWADDRHINT(netif, hint)
N#endif /* LWIP_NETIF_HWADDRHINT */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_NETIF_H__ */
L 42 "..\..\lwip\src\include\ipv4\lwip/ip.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** Currently, the function ip_output_if_opt() is only used with IGMP */
N#define IP_OPTIONS_SEND   LWIP_IGMP
N
N#define IP_HLEN 20
N
N#define IP_PROTO_ICMP    1
N#define IP_PROTO_IGMP    2
N#define IP_PROTO_UDP     17
N#define IP_PROTO_UDPLITE 136
N#define IP_PROTO_TCP     6
N
N/* This is passed as the destination address to ip_output_if (not
N   to ip_output), meaning that an IP header already is constructed
N   in the pbuf. This is used when TCP retransmits. */
N#ifdef IP_HDRINCL
S#undef IP_HDRINCL
N#endif /* IP_HDRINCL */
N#define IP_HDRINCL  NULL
N
N#if LWIP_NETIF_HWADDRHINT
X#if 0
S#define IP_PCB_ADDRHINT ;u8_t addr_hint
N#else
N#define IP_PCB_ADDRHINT
N#endif /* LWIP_NETIF_HWADDRHINT */
N
N/* This is the common part of all PCB types. It needs to be at the
N   beginning of a PCB type definition. It is located here so that
N   changes to this common part are made in one location instead of
N   having to change all PCB structs. */
N#define IP_PCB \
N  /* ip addresses in network byte order */ \
N  ip_addr_t local_ip; \
N  ip_addr_t remote_ip; \
N   /* Socket options */  \
N  u8_t so_options;      \
N   /* Type Of Service */ \
N  u8_t tos;              \
N  /* Time To Live */     \
N  u8_t ttl               \
N  /* link layer address resolution hint */ \
N  IP_PCB_ADDRHINT
X#define IP_PCB       ip_addr_t local_ip;   ip_addr_t remote_ip;         u8_t so_options;             u8_t tos;                        u8_t ttl                     IP_PCB_ADDRHINT
N
Nstruct ip_pcb {
N/* Common members of all PCB types */
N  IP_PCB;
X  ip_addr_t local_ip; ip_addr_t remote_ip; u8_t so_options; u8_t tos; u8_t ttl ;
N};
N
N/*
N * Option flags per-socket. These are the same like SO_XXX.
N */
N/*#define SOF_DEBUG       0x01U     Unimplemented: turn on debugging info recording */
N#define SOF_ACCEPTCONN    0x02U  /* socket has had listen() */
N#define SOF_REUSEADDR     0x04U  /* allow local address reuse */
N#define SOF_KEEPALIVE     0x08U  /* keep connections alive */
N/*#define SOF_DONTROUTE   0x10U     Unimplemented: just use interface addresses */
N#define SOF_BROADCAST     0x20U  /* permit to send and to receive broadcast messages (see IP_SOF_BROADCAST option) */
N/*#define SOF_USELOOPBACK 0x40U     Unimplemented: bypass hardware when possible */
N#define SOF_LINGER        0x80U  /* linger on close if data present */
N/*#define SOF_OOBINLINE   0x0100U   Unimplemented: leave received OOB data in line */
N/*#define SOF_REUSEPORT   0x0200U   Unimplemented: allow local address & port reuse */
N
N/* These flags are inherited (e.g. from a listen-pcb to a connection-pcb): */
N#define SOF_INHERITED   (SOF_REUSEADDR|SOF_KEEPALIVE|SOF_LINGER/*|SOF_DEBUG|SOF_DONTROUTE|SOF_OOBINLINE*/)
N
N
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct ip_hdr {
N  /* version / header length */
N  PACK_STRUCT_FIELD(u8_t _v_hl);
X  u8_t _v_hl;
N  /* type of service */
N  PACK_STRUCT_FIELD(u8_t _tos);
X  u8_t _tos;
N  /* total length */
N  PACK_STRUCT_FIELD(u16_t _len);
X  u16_t _len;
N  /* identification */
N  PACK_STRUCT_FIELD(u16_t _id);
X  u16_t _id;
N  /* fragment offset field */
N  PACK_STRUCT_FIELD(u16_t _offset);
X  u16_t _offset;
N#define IP_RF 0x8000U        /* reserved fragment flag */
N#define IP_DF 0x4000U        /* dont fragment flag */
N#define IP_MF 0x2000U        /* more fragments flag */
N#define IP_OFFMASK 0x1fffU   /* mask for fragmenting bits */
N  /* time to live */
N  PACK_STRUCT_FIELD(u8_t _ttl);
X  u8_t _ttl;
N  /* protocol*/
N  PACK_STRUCT_FIELD(u8_t _proto);
X  u8_t _proto;
N  /* checksum */
N  PACK_STRUCT_FIELD(u16_t _chksum);
X  u16_t _chksum;
N  /* source and destination IP addresses */
N  PACK_STRUCT_FIELD(ip_addr_p_t src);
X  ip_addr_p_t src;
N  PACK_STRUCT_FIELD(ip_addr_p_t dest); 
X  ip_addr_p_t dest; 
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N#define IPH_V(hdr)  ((hdr)->_v_hl >> 4)
N#define IPH_HL(hdr) ((hdr)->_v_hl & 0x0f)
N#define IPH_TOS(hdr) ((hdr)->_tos)
N#define IPH_LEN(hdr) ((hdr)->_len)
N#define IPH_ID(hdr) ((hdr)->_id)
N#define IPH_OFFSET(hdr) ((hdr)->_offset)
N#define IPH_TTL(hdr) ((hdr)->_ttl)
N#define IPH_PROTO(hdr) ((hdr)->_proto)
N#define IPH_CHKSUM(hdr) ((hdr)->_chksum)
N
N#define IPH_VHL_SET(hdr, v, hl) (hdr)->_v_hl = (((v) << 4) | (hl))
N#define IPH_TOS_SET(hdr, tos) (hdr)->_tos = (tos)
N#define IPH_LEN_SET(hdr, len) (hdr)->_len = (len)
N#define IPH_ID_SET(hdr, id) (hdr)->_id = (id)
N#define IPH_OFFSET_SET(hdr, off) (hdr)->_offset = (off)
N#define IPH_TTL_SET(hdr, ttl) (hdr)->_ttl = (u8_t)(ttl)
N#define IPH_PROTO_SET(hdr, proto) (hdr)->_proto = (u8_t)(proto)
N#define IPH_CHKSUM_SET(hdr, chksum) (hdr)->_chksum = (chksum)
N
N/** The interface that provided the packet for the current callback invocation. */
Nextern struct netif *current_netif;
N/** Header of the input packet currently being processed. */
Nextern const struct ip_hdr *current_header;
N/** Source IP address of current_header */
Nextern ip_addr_t current_iphdr_src;
N/** Destination IP address of current_header */
Nextern ip_addr_t current_iphdr_dest;
N
N#define ip_init() /* Compatibility define, not init needed. */
Nstruct netif *ip_route(ip_addr_t *dest);
Nerr_t ip_input(struct pbuf *p, struct netif *inp);
Nerr_t ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
N       u8_t ttl, u8_t tos, u8_t proto);
Nerr_t ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
N       u8_t ttl, u8_t tos, u8_t proto,
N       struct netif *netif);
N#if LWIP_NETIF_HWADDRHINT
X#if 0
Serr_t ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
S       u8_t ttl, u8_t tos, u8_t proto, u8_t *addr_hint);
N#endif /* LWIP_NETIF_HWADDRHINT */
N#if IP_OPTIONS_SEND
X#if 0
Serr_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
S       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
S       u16_t optlen);
N#endif /* IP_OPTIONS_SEND */
N/** Get the interface that received the current packet.
N * This function must only be called from a receive callback (udp_recv,
N * raw_recv, tcp_accept). It will return NULL otherwise. */
N#define ip_current_netif()  (current_netif)
N/** Get the IP header of the current packet.
N * This function must only be called from a receive callback (udp_recv,
N * raw_recv, tcp_accept). It will return NULL otherwise. */
N#define ip_current_header() (current_header)
N/** Source IP address of current_header */
N#define ip_current_src_addr()  (&current_iphdr_src)
N/** Destination IP address of current_header */
N#define ip_current_dest_addr() (&current_iphdr_dest)
N
N/** Gets an IP pcb option (SOF_* flags) */
N#define ip_get_option(pcb, opt)   ((pcb)->so_options & (opt))
N/** Sets an IP pcb option (SOF_* flags) */
N#define ip_set_option(pcb, opt)   ((pcb)->so_options |= (opt))
N/** Resets an IP pcb option (SOF_* flags) */
N#define ip_reset_option(pcb, opt) ((pcb)->so_options &= ~(opt))
N
N#if IP_DEBUG
X#if 0x00U
Svoid ip_debug_print(struct pbuf *p);
N#else
N#define ip_debug_print(p)
N#endif /* IP_DEBUG */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_IP_H__ */
N
N
L 43 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/def.h"
N#include "lwip/mem.h"
L 1 "..\..\lwip\src\include\lwip/mem.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_MEM_H__
N#define __LWIP_MEM_H__
N
N#include "lwip/opt.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#if MEM_LIBC_MALLOC
X#if 0
S
S#include <stddef.h> /* for size_t */
S
Stypedef size_t mem_size_t;
S#define MEM_SIZE_F SZT_F
S
S/* aliases for C library malloc() */
S#define mem_init()
S/* in case C library malloc() needs extra protection,
S * allow these defines to be overridden.
S */
S#ifndef mem_free
S#define mem_free free
S#endif
S#ifndef mem_malloc
S#define mem_malloc malloc
S#endif
S#ifndef mem_calloc
S#define mem_calloc calloc
S#endif
S/* Since there is no C library allocation function to shrink memory without
S   moving it, define this to nothing. */
S#ifndef mem_trim
S#define mem_trim(mem, size) (mem)
S#endif
N#else /* MEM_LIBC_MALLOC */
N
N/* MEM_SIZE would have to be aligned, but using 64000 here instead of
N * 65535 leaves some room for alignment...
N */
N#if MEM_SIZE > 64000L
X#if 1024*40 > 64000L
Stypedef u32_t mem_size_t;
S#define MEM_SIZE_F U32_F
N#else
Ntypedef u16_t mem_size_t;
N#define MEM_SIZE_F U16_F
N#endif /* MEM_SIZE > 64000 */
N
N#if MEM_USE_POOLS
X#if 0
S/** mem_init is not used when using pools instead of a heap */
S#define mem_init()
S/** mem_trim is not used when using pools instead of a heap:
S    we can't free part of a pool element and don't want to copy the rest */
S#define mem_trim(mem, size) (mem)
N#else /* MEM_USE_POOLS */
N/* lwIP alternative malloc */
Nvoid  mem_init(void);
Nvoid *mem_trim(void *mem, mem_size_t size);
N#endif /* MEM_USE_POOLS */
Nvoid *mem_malloc(mem_size_t size);
Nvoid *mem_calloc(mem_size_t count, mem_size_t size);
Nvoid  mem_free(void *mem);
N#endif /* MEM_LIBC_MALLOC */
N
N/** Calculate memory size for an aligned buffer - returns the next highest
N * multiple of MEM_ALIGNMENT (e.g. LWIP_MEM_ALIGN_SIZE(3) and
N * LWIP_MEM_ALIGN_SIZE(4) will both yield 4 for MEM_ALIGNMENT == 4).
N */
N#ifndef LWIP_MEM_ALIGN_SIZE
N#define LWIP_MEM_ALIGN_SIZE(size) (((size) + MEM_ALIGNMENT - 1) & ~(MEM_ALIGNMENT-1))
N#endif
N
N/** Calculate safe memory size for an aligned buffer when using an unaligned
N * type as storage. This includes a safety-margin on (MEM_ALIGNMENT - 1) at the
N * start (e.g. if buffer is u8_t[] and actual data will be u32_t*)
N */
N#ifndef LWIP_MEM_ALIGN_BUFFER
N#define LWIP_MEM_ALIGN_BUFFER(size) (((size) + MEM_ALIGNMENT - 1))
N#endif
N
N/** Align a memory pointer to the alignment defined by MEM_ALIGNMENT
N * so that ADDR % MEM_ALIGNMENT == 0
N */
N#ifndef LWIP_MEM_ALIGN
N#define LWIP_MEM_ALIGN(addr) ((void *)(((mem_ptr_t)(addr) + MEM_ALIGNMENT - 1) & ~(mem_ptr_t)(MEM_ALIGNMENT-1)))
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_MEM_H__ */
L 45 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/ip_frag.h"
L 1 "..\..\lwip\src\include\ipv4\lwip/ip_frag.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Jani Monoses <jani@iv.ro>
N *
N */
N
N#ifndef __LWIP_IP_FRAG_H__
N#define __LWIP_IP_FRAG_H__
N
N#include "lwip/opt.h"
N#include "lwip/err.h"
N#include "lwip/pbuf.h"
N#include "lwip/netif.h"
N#include "lwip/ip_addr.h"
N#include "lwip/ip.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#if IP_REASSEMBLY
X#if 1
N/* The IP reassembly timer interval in milliseconds. */
N#define IP_TMR_INTERVAL 1000
N
N/* IP reassembly helper struct.
N * This is exported because memp needs to know the size.
N */
Nstruct ip_reassdata {
N  struct ip_reassdata *next;
N  struct pbuf *p;
N  struct ip_hdr iphdr;
N  u16_t datagram_len;
N  u8_t flags;
N  u8_t timer;
N};
N
Nvoid ip_reass_init(void);
Nvoid ip_reass_tmr(void);
Nstruct pbuf * ip_reass(struct pbuf *p);
N#endif /* IP_REASSEMBLY */
N
N#if IP_FRAG
X#if 1
N#if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
X#if !0 && !0
N/** A custom pbuf that holds a reference to another pbuf, which is freed
N * when this custom pbuf is freed. This is used to create a custom PBUF_REF
N * that points into the original pbuf. */
Nstruct pbuf_custom_ref {
N  /** 'base class' */
N  struct pbuf_custom pc;
N  /** pointer to the original pbuf that is referenced */
N  struct pbuf *original;
N};
N#endif /* !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF */
N
Nerr_t ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest);
N#endif /* IP_FRAG */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_IP_FRAG_H__ */
L 46 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/inet_chksum.h"
L 1 "..\..\lwip\src\include\ipv4\lwip/inet_chksum.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_INET_CHKSUM_H__
N#define __LWIP_INET_CHKSUM_H__
N
N#include "lwip/opt.h"
N
N#include "lwip/pbuf.h"
N#include "lwip/ip_addr.h"
N
N/** Swap the bytes in an u16_t: much like htons() for little-endian */
N#ifndef SWAP_BYTES_IN_WORD
N#if LWIP_PLATFORM_BYTESWAP && (BYTE_ORDER == LITTLE_ENDIAN)
X#if 0 && (1234 == 1234)
S/* little endian and PLATFORM_BYTESWAP defined */
S#define SWAP_BYTES_IN_WORD(w) LWIP_PLATFORM_HTONS(w)
N#else /* LWIP_PLATFORM_BYTESWAP && (BYTE_ORDER == LITTLE_ENDIAN) */
N/* can't use htons on big endian (or PLATFORM_BYTESWAP not defined)... */
N#define SWAP_BYTES_IN_WORD(w) (((w) & 0xff) << 8) | (((w) & 0xff00) >> 8)
N#endif /* LWIP_PLATFORM_BYTESWAP && (BYTE_ORDER == LITTLE_ENDIAN)*/
N#endif /* SWAP_BYTES_IN_WORD */
N
N/** Split an u32_t in two u16_ts and add them up */
N#ifndef FOLD_U32T
N#define FOLD_U32T(u)          (((u) >> 16) + ((u) & 0x0000ffffUL))
N#endif
N
N#if LWIP_CHECKSUM_ON_COPY
X#if 0
S/** Function-like macro: same as MEMCPY but returns the checksum of copied data
S    as u16_t */
S#ifndef LWIP_CHKSUM_COPY
S#define LWIP_CHKSUM_COPY(dst, src, len) lwip_chksum_copy(dst, src, len)
S#ifndef LWIP_CHKSUM_COPY_ALGORITHM
S#define LWIP_CHKSUM_COPY_ALGORITHM 1
S#endif /* LWIP_CHKSUM_COPY_ALGORITHM */
S#endif /* LWIP_CHKSUM_COPY */
N#else /* LWIP_CHECKSUM_ON_COPY */
N#define LWIP_CHKSUM_COPY_ALGORITHM 0
N#endif /* LWIP_CHECKSUM_ON_COPY */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
Nu16_t inet_chksum(void *dataptr, u16_t len);
Nu16_t inet_chksum_pbuf(struct pbuf *p);
Nu16_t inet_chksum_pseudo(struct pbuf *p,
N       ip_addr_t *src, ip_addr_t *dest,
N       u8_t proto, u16_t proto_len);
Nu16_t inet_chksum_pseudo_partial(struct pbuf *p,
N       ip_addr_t *src, ip_addr_t *dest,
N       u8_t proto, u16_t proto_len, u16_t chksum_len);
N#if LWIP_CHKSUM_COPY_ALGORITHM
X#if 0
Su16_t lwip_chksum_copy(void *dst, const void *src, u16_t len);
N#endif /* LWIP_CHKSUM_COPY_ALGORITHM */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_INET_H__ */
N
L 47 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/netif.h"
N#include "lwip/icmp.h"
L 1 "..\..\lwip\src\include\ipv4\lwip/icmp.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_ICMP_H__
N#define __LWIP_ICMP_H__
N
N#include "lwip/opt.h"
N#include "lwip/pbuf.h"
N#include "lwip/ip_addr.h"
N#include "lwip/netif.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define ICMP_ER   0    /* echo reply */
N#define ICMP_DUR  3    /* destination unreachable */
N#define ICMP_SQ   4    /* source quench */
N#define ICMP_RD   5    /* redirect */
N#define ICMP_ECHO 8    /* echo */
N#define ICMP_TE  11    /* time exceeded */
N#define ICMP_PP  12    /* parameter problem */
N#define ICMP_TS  13    /* timestamp */
N#define ICMP_TSR 14    /* timestamp reply */
N#define ICMP_IRQ 15    /* information request */
N#define ICMP_IR  16    /* information reply */
N
Nenum icmp_dur_type {
N  ICMP_DUR_NET   = 0,  /* net unreachable */
N  ICMP_DUR_HOST  = 1,  /* host unreachable */
N  ICMP_DUR_PROTO = 2,  /* protocol unreachable */
N  ICMP_DUR_PORT  = 3,  /* port unreachable */
N  ICMP_DUR_FRAG  = 4,  /* fragmentation needed and DF set */
N  ICMP_DUR_SR    = 5   /* source route failed */
N};
N
Nenum icmp_te_type {
N  ICMP_TE_TTL  = 0,    /* time to live exceeded in transit */
N  ICMP_TE_FRAG = 1     /* fragment reassembly time exceeded */
N};
N
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
N/** This is the standard ICMP header only that the u32_t data
N *  is splitted to two u16_t like ICMP echo needs it.
N *  This header is also used for other ICMP types that do not
N *  use the data part.
N */
NPACK_STRUCT_BEGIN
X__packed
Nstruct icmp_echo_hdr {
N  PACK_STRUCT_FIELD(u8_t type);
X  u8_t type;
N  PACK_STRUCT_FIELD(u8_t code);
X  u8_t code;
N  PACK_STRUCT_FIELD(u16_t chksum);
X  u16_t chksum;
N  PACK_STRUCT_FIELD(u16_t id);
X  u16_t id;
N  PACK_STRUCT_FIELD(u16_t seqno);
X  u16_t seqno;
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N#define ICMPH_TYPE(hdr) ((hdr)->type)
N#define ICMPH_CODE(hdr) ((hdr)->code)
N
N/** Combines type and code to an u16_t */
N#define ICMPH_TYPE_SET(hdr, t) ((hdr)->type = (t))
N#define ICMPH_CODE_SET(hdr, c) ((hdr)->code = (c))
N
N
N#if LWIP_ICMP /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
Nvoid icmp_input(struct pbuf *p, struct netif *inp);
Nvoid icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t);
Nvoid icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t);
N
N#endif /* LWIP_ICMP */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_ICMP_H__ */
L 49 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/igmp.h"
L 1 "..\..\lwip\src\include\ipv4\lwip/igmp.h" 1
N/*
N * Copyright (c) 2002 CITEL Technologies Ltd.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without 
N * modification, are permitted provided that the following conditions 
N * are met: 
N * 1. Redistributions of source code must retain the above copyright 
N *    notice, this list of conditions and the following disclaimer. 
N * 2. Redistributions in binary form must reproduce the above copyright 
N *    notice, this list of conditions and the following disclaimer in the 
N *    documentation and/or other materials provided with the distribution. 
N * 3. Neither the name of CITEL Technologies Ltd nor the names of its contributors 
N *    may be used to endorse or promote products derived from this software 
N *    without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY CITEL TECHNOLOGIES AND CONTRIBUTORS ``AS IS''
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
N * ARE DISCLAIMED.  IN NO EVENT SHALL CITEL TECHNOLOGIES OR CONTRIBUTORS BE LIABLE 
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
N * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
N * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
N * SUCH DAMAGE. 
N *
N * This file is a contribution to the lwIP TCP/IP stack.
N * The Swedish Institute of Computer Science and Adam Dunkels
N * are specifically granted permission to redistribute this
N * source code.
N*/
N
N#ifndef __LWIP_IGMP_H__
N#define __LWIP_IGMP_H__
N
N#include "lwip/opt.h"
N#include "lwip/ip_addr.h"
N#include "lwip/netif.h"
N#include "lwip/pbuf.h"
N
N#if LWIP_IGMP /* don't build if not configured for use in lwipopts.h */
X#if 0  
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S
S/* IGMP timer */
S#define IGMP_TMR_INTERVAL              100 /* Milliseconds */
S#define IGMP_V1_DELAYING_MEMBER_TMR   (1000/IGMP_TMR_INTERVAL)
S#define IGMP_JOIN_DELAYING_MEMBER_TMR (500 /IGMP_TMR_INTERVAL)
S
S/* MAC Filter Actions, these are passed to a netif's
S * igmp_mac_filter callback function. */
S#define IGMP_DEL_MAC_FILTER            0
S#define IGMP_ADD_MAC_FILTER            1
S
S
S/**
S * igmp group structure - there is
S * a list of groups for each interface
S * these should really be linked from the interface, but
S * if we keep them separate we will not affect the lwip original code
S * too much
S * 
S * There will be a group for the all systems group address but this 
S * will not run the state machine as it is used to kick off reports
S * from all the other groups
S */
Sstruct igmp_group {
S  /** next link */
S  struct igmp_group *next;
S  /** interface on which the group is active */
S  struct netif      *netif;
S  /** multicast address */
S  ip_addr_t          group_address;
S  /** signifies we were the last person to report */
S  u8_t               last_reporter_flag;
S  /** current state of the group */
S  u8_t               group_state;
S  /** timer for reporting, negative is OFF */
S  u16_t              timer;
S  /** counter of simultaneous uses */
S  u8_t               use;
S};
S
S/*  Prototypes */
Svoid   igmp_init(void);
Serr_t  igmp_start(struct netif *netif);
Serr_t  igmp_stop(struct netif *netif);
Svoid   igmp_report_groups(struct netif *netif);
Sstruct igmp_group *igmp_lookfor_group(struct netif *ifp, ip_addr_t *addr);
Svoid   igmp_input(struct pbuf *p, struct netif *inp, ip_addr_t *dest);
Serr_t  igmp_joingroup(ip_addr_t *ifaddr, ip_addr_t *groupaddr);
Serr_t  igmp_leavegroup(ip_addr_t *ifaddr, ip_addr_t *groupaddr);
Svoid   igmp_tmr(void);
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* LWIP_IGMP */
N
N#endif /* __LWIP_IGMP_H__ */
L 50 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/raw.h"
L 1 "..\..\lwip\src\include\lwip/raw.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N *
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_RAW_H__
N#define __LWIP_RAW_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_RAW /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
N#include "lwip/pbuf.h"
N#include "lwip/def.h"
N#include "lwip/ip.h"
N#include "lwip/ip_addr.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
Nstruct raw_pcb;
N
N/** Function prototype for raw pcb receive callback functions.
N * @param arg user supplied argument (raw_pcb.recv_arg)
N * @param pcb the raw_pcb which received data
N * @param p the packet buffer that was received
N * @param addr the remote IP address from which the packet was received
N * @return 1 if the packet was 'eaten' (aka. deleted),
N *         0 if the packet lives on
N * If returning 1, the callback is responsible for freeing the pbuf
N * if it's not used any more.
N */
Ntypedef u8_t (*raw_recv_fn)(void *arg, struct raw_pcb *pcb, struct pbuf *p,
N    ip_addr_t *addr);
N
Nstruct raw_pcb {
N  /* Common members of all PCB types */
N  IP_PCB;
X  ip_addr_t local_ip; ip_addr_t remote_ip; u8_t so_options; u8_t tos; u8_t ttl ;
N
N  struct raw_pcb *next;
N
N  u8_t protocol;
N
N  /** receive callback function */
N  raw_recv_fn recv;
N  /* user-supplied argument for the recv callback */
N  void *recv_arg;
N};
N
N/* The following functions is the application layer interface to the
N   RAW code. */
Nstruct raw_pcb * raw_new        (u8_t proto);
Nvoid             raw_remove     (struct raw_pcb *pcb);
Nerr_t            raw_bind       (struct raw_pcb *pcb, ip_addr_t *ipaddr);
Nerr_t            raw_connect    (struct raw_pcb *pcb, ip_addr_t *ipaddr);
N
Nvoid             raw_recv       (struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg);
Nerr_t            raw_sendto     (struct raw_pcb *pcb, struct pbuf *p, ip_addr_t *ipaddr);
Nerr_t            raw_send       (struct raw_pcb *pcb, struct pbuf *p);
N
N/* The following functions are the lower layer interface to RAW. */
Nu8_t             raw_input      (struct pbuf *p, struct netif *inp);
N#define raw_init() /* Compatibility define, not init needed. */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* LWIP_RAW */
N
N#endif /* __LWIP_RAW_H__ */
L 51 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/udp.h"
L 1 "..\..\lwip\src\include\lwip/udp.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_UDP_H__
N#define __LWIP_UDP_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_UDP /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
N#include "lwip/pbuf.h"
N#include "lwip/netif.h"
N#include "lwip/ip_addr.h"
N#include "lwip/ip.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define UDP_HLEN 8
N
N/* Fields are (of course) in network byte order. */
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct udp_hdr {
N  PACK_STRUCT_FIELD(u16_t src);
X  u16_t src;
N  PACK_STRUCT_FIELD(u16_t dest);  /* src/dest UDP ports */
X  u16_t dest;   
N  PACK_STRUCT_FIELD(u16_t len);
X  u16_t len;
N  PACK_STRUCT_FIELD(u16_t chksum);
X  u16_t chksum;
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N#define UDP_FLAGS_NOCHKSUM       0x01U
N#define UDP_FLAGS_UDPLITE        0x02U
N#define UDP_FLAGS_CONNECTED      0x04U
N#define UDP_FLAGS_MULTICAST_LOOP 0x08U
N
Nstruct udp_pcb;
N
N/** Function prototype for udp pcb receive callback functions
N * addr and port are in same byte order as in the pcb
N * The callback is responsible for freeing the pbuf
N * if it's not used any more.
N *
N * ATTENTION: Be aware that 'addr' points into the pbuf 'p' so freeing this pbuf
N *            makes 'addr' invalid, too.
N *
N * @param arg user supplied argument (udp_pcb.recv_arg)
N * @param pcb the udp_pcb which received data
N * @param p the packet buffer that was received
N * @param addr the remote IP address from which the packet was received
N * @param port the remote port from which the packet was received
N */
Ntypedef void (*udp_recv_fn)(void *arg, struct udp_pcb *pcb, struct pbuf *p,
N    ip_addr_t *addr, u16_t port);
N
N
Nstruct udp_pcb {
N/* Common members of all PCB types */
N  IP_PCB;
X  ip_addr_t local_ip; ip_addr_t remote_ip; u8_t so_options; u8_t tos; u8_t ttl ;
N
N/* Protocol specific PCB members */
N
N  struct udp_pcb *next;
N
N  u8_t flags;
N  /** ports are in host byte order */
N  u16_t local_port, remote_port;
N
N#if LWIP_IGMP
X#if 0
S  /** outgoing network interface for multicast packets */
S  ip_addr_t multicast_ip;
N#endif /* LWIP_IGMP */
N
N#if LWIP_UDPLITE
X#if 0
S  /** used for UDP_LITE only */
S  u16_t chksum_len_rx, chksum_len_tx;
N#endif /* LWIP_UDPLITE */
N
N  /** receive callback function */
N  udp_recv_fn recv;
N  /** user-supplied argument for the recv callback */
N  void *recv_arg;  
N};
N/* udp_pcbs export for exernal reference (e.g. SNMP agent) */
Nextern struct udp_pcb *udp_pcbs;
N
N/* The following functions is the application layer interface to the
N   UDP code. */
Nstruct udp_pcb * udp_new        (void);
Nvoid             udp_remove     (struct udp_pcb *pcb);
Nerr_t            udp_bind       (struct udp_pcb *pcb, ip_addr_t *ipaddr,
N                                 u16_t port);
Nerr_t            udp_connect    (struct udp_pcb *pcb, ip_addr_t *ipaddr,
N                                 u16_t port);
Nvoid             udp_disconnect (struct udp_pcb *pcb);
Nvoid             udp_recv       (struct udp_pcb *pcb, udp_recv_fn recv,
N                                 void *recv_arg);
Nerr_t            udp_sendto_if  (struct udp_pcb *pcb, struct pbuf *p,
N                                 ip_addr_t *dst_ip, u16_t dst_port,
N                                 struct netif *netif);
Nerr_t            udp_sendto     (struct udp_pcb *pcb, struct pbuf *p,
N                                 ip_addr_t *dst_ip, u16_t dst_port);
Nerr_t            udp_send       (struct udp_pcb *pcb, struct pbuf *p);
N
N#if LWIP_CHECKSUM_ON_COPY
X#if 0
Serr_t            udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p,
S                                 ip_addr_t *dst_ip, u16_t dst_port,
S                                 struct netif *netif, u8_t have_chksum,
S                                 u16_t chksum);
Serr_t            udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p,
S                                 ip_addr_t *dst_ip, u16_t dst_port,
S                                 u8_t have_chksum, u16_t chksum);
Serr_t            udp_send_chksum(struct udp_pcb *pcb, struct pbuf *p,
S                                 u8_t have_chksum, u16_t chksum);
N#endif /* LWIP_CHECKSUM_ON_COPY */
N
N#define          udp_flags(pcb) ((pcb)->flags)
N#define          udp_setflags(pcb, f)  ((pcb)->flags = (f))
N
N/* The following functions are the lower layer interface to UDP. */
Nvoid             udp_input      (struct pbuf *p, struct netif *inp);
N
Nvoid             udp_init       (void);
N
N#if UDP_DEBUG
X#if 0x00U
Svoid udp_debug_print(struct udp_hdr *udphdr);
N#else
N#define udp_debug_print(udphdr)
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* LWIP_UDP */
N
N#endif /* __LWIP_UDP_H__ */
L 52 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/tcp_impl.h"
L 1 "..\..\lwip\src\include\lwip/tcp_impl.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_TCP_IMPL_H__
N#define __LWIP_TCP_IMPL_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_TCP /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
N#include "lwip/tcp.h"
L 1 "..\..\lwip\src\include\lwip/tcp.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_TCP_H__
N#define __LWIP_TCP_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_TCP /* don't build if not configured for use in lwipopts.h */
X#if 1  
N
N#include "lwip/mem.h"
N#include "lwip/pbuf.h"
N#include "lwip/ip.h"
N#include "lwip/icmp.h"
N#include "lwip/err.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
Nstruct tcp_pcb;
N
N/** Function prototype for tcp accept callback functions. Called when a new
N * connection can be accepted on a listening pcb.
N *
N * @param arg Additional argument to pass to the callback function (@see tcp_arg())
N * @param newpcb The new connection pcb
N * @param err An error code if there has been an error accepting.
N *            Only return ERR_ABRT if you have called tcp_abort from within the
N *            callback function!
N */
Ntypedef err_t (*tcp_accept_fn)(void *arg, struct tcp_pcb *newpcb, err_t err);
N
N/** Function prototype for tcp receive callback functions. Called when data has
N * been received.
N *
N * @param arg Additional argument to pass to the callback function (@see tcp_arg())
N * @param tpcb The connection pcb which received data
N * @param p The received data (or NULL when the connection has been closed!)
N * @param err An error code if there has been an error receiving
N *            Only return ERR_ABRT if you have called tcp_abort from within the
N *            callback function!
N */
Ntypedef err_t (*tcp_recv_fn)(void *arg, struct tcp_pcb *tpcb,
N                             struct pbuf *p, err_t err);
N
N/** Function prototype for tcp sent callback functions. Called when sent data has
N * been acknowledged by the remote side. Use it to free corresponding resources.
N * This also means that the pcb has now space available to send new data.
N *
N * @param arg Additional argument to pass to the callback function (@see tcp_arg())
N * @param tpcb The connection pcb for which data has been acknowledged
N * @param len The amount of bytes acknowledged
N * @return ERR_OK: try to send some data by calling tcp_output
N *            Only return ERR_ABRT if you have called tcp_abort from within the
N *            callback function!
N */
Ntypedef err_t (*tcp_sent_fn)(void *arg, struct tcp_pcb *tpcb,
N                              u16_t len);
N
N/** Function prototype for tcp poll callback functions. Called periodically as
N * specified by @see tcp_poll.
N *
N * @param arg Additional argument to pass to the callback function (@see tcp_arg())
N * @param tpcb tcp pcb
N * @return ERR_OK: try to send some data by calling tcp_output
N *            Only return ERR_ABRT if you have called tcp_abort from within the
N *            callback function!
N */
Ntypedef err_t (*tcp_poll_fn)(void *arg, struct tcp_pcb *tpcb);
N
N/** Function prototype for tcp error callback functions. Called when the pcb
N * receives a RST or is unexpectedly closed for any other reason.
N *
N * @note The corresponding pcb is already freed when this callback is called!
N *
N * @param arg Additional argument to pass to the callback function (@see tcp_arg())
N * @param err Error code to indicate why the pcb has been closed
N *            ERR_ABRT: aborted through tcp_abort or by a TCP timer
N *            ERR_RST: the connection was reset by the remote host
N */
Ntypedef void  (*tcp_err_fn)(void *arg, err_t err);
N
N/** Function prototype for tcp connected callback functions. Called when a pcb
N * is connected to the remote side after initiating a connection attempt by
N * calling tcp_connect().
N *
N * @param arg Additional argument to pass to the callback function (@see tcp_arg())
N * @param tpcb The connection pcb which is connected
N * @param err An unused error code, always ERR_OK currently ;-) TODO!
N *            Only return ERR_ABRT if you have called tcp_abort from within the
N *            callback function!
N *
N * @note When a connection attempt fails, the error callback is currently called!
N */
Ntypedef err_t (*tcp_connected_fn)(void *arg, struct tcp_pcb *tpcb, err_t err);
N
Nenum tcp_state {
N  CLOSED      = 0,
N  LISTEN      = 1,
N  SYN_SENT    = 2,
N  SYN_RCVD    = 3,
N  ESTABLISHED = 4,
N  FIN_WAIT_1  = 5,
N  FIN_WAIT_2  = 6,
N  CLOSE_WAIT  = 7,
N  CLOSING     = 8,
N  LAST_ACK    = 9,
N  TIME_WAIT   = 10
N};
N
N#if LWIP_CALLBACK_API
X#if 1
N  /* Function to call when a listener has been connected.
N   * @param arg user-supplied argument (tcp_pcb.callback_arg)
N   * @param pcb a new tcp_pcb that now is connected
N   * @param err an error argument (TODO: that is current always ERR_OK?)
N   * @return ERR_OK: accept the new connection,
N   *                 any other err_t abortsthe new connection
N   */
N#define DEF_ACCEPT_CALLBACK  tcp_accept_fn accept;
N#else /* LWIP_CALLBACK_API */
S#define DEF_ACCEPT_CALLBACK
N#endif /* LWIP_CALLBACK_API */
N
N/**
N * members common to struct tcp_pcb and struct tcp_listen_pcb
N */
N#define TCP_PCB_COMMON(type) \
N  type *next; /* for the linked list */ \
N  void *callback_arg; \
N  /* the accept callback for listen- and normal pcbs, if LWIP_CALLBACK_API */ \
N  DEF_ACCEPT_CALLBACK \
N  enum tcp_state state; /* TCP state */ \
N  u8_t prio; \
N  /* ports are in host byte order */ \
N  u16_t local_port
X#define TCP_PCB_COMMON(type)   type *next;     void *callback_arg;       DEF_ACCEPT_CALLBACK   enum tcp_state state;     u8_t prio;       u16_t local_port
N
N
N/* the TCP protocol control block */
Nstruct tcp_pcb {
N/** common PCB members */
N  IP_PCB;
X  ip_addr_t local_ip; ip_addr_t remote_ip; u8_t so_options; u8_t tos; u8_t ttl ;
N/** protocol specific PCB members */
N  TCP_PCB_COMMON(struct tcp_pcb);
X  struct tcp_pcb *next; void *callback_arg; tcp_accept_fn accept; enum tcp_state state; u8_t prio; u16_t local_port;
N
N  /* ports are in host byte order */
N  u16_t remote_port;
N  
N  u8_t flags;
N#define TF_ACK_DELAY   ((u8_t)0x01U)   /* Delayed ACK. */
N#define TF_ACK_NOW     ((u8_t)0x02U)   /* Immediate ACK. */
N#define TF_INFR        ((u8_t)0x04U)   /* In fast recovery. */
N#define TF_TIMESTAMP   ((u8_t)0x08U)   /* Timestamp option enabled */
N#define TF_RXCLOSED    ((u8_t)0x10U)   /* rx closed by tcp_shutdown */
N#define TF_FIN         ((u8_t)0x20U)   /* Connection was closed locally (FIN segment enqueued). */
N#define TF_NODELAY     ((u8_t)0x40U)   /* Disable Nagle algorithm */
N#define TF_NAGLEMEMERR ((u8_t)0x80U)   /* nagle enabled, memerr, try to output to prevent delayed ACK to happen */
N
N  /* the rest of the fields are in host byte order
N     as we have to do some math with them */
N
N  /* Timers */
N  u8_t polltmr, pollinterval;
N  u8_t last_timer;
N  u32_t tmr;
N
N  /* receiver variables */
N  u32_t rcv_nxt;   /* next seqno expected */
N  u16_t rcv_wnd;   /* receiver window available */
N  u16_t rcv_ann_wnd; /* receiver window to announce */
N  u32_t rcv_ann_right_edge; /* announced right edge of window */
N
N  /* Retransmission timer. */
N  s16_t rtime;
N
N  u16_t mss;   /* maximum segment size */
N
N  /* RTT (round trip time) estimation variables */
N  u32_t rttest; /* RTT estimate in 500ms ticks */
N  u32_t rtseq;  /* sequence number being timed */
N  s16_t sa, sv; /* @todo document this */
N
N  s16_t rto;    /* retransmission time-out */
N  u8_t nrtx;    /* number of retransmissions */
N
N  /* fast retransmit/recovery */
N  u8_t dupacks;
N  u32_t lastack; /* Highest acknowledged seqno. */
N
N  /* congestion avoidance/control variables */
N  u16_t cwnd;
N  u16_t ssthresh;
N
N  /* sender variables */
N  u32_t snd_nxt;   /* next new seqno to be sent */
N  u32_t snd_wl1, snd_wl2; /* Sequence and acknowledgement numbers of last
N                             window update. */
N  u32_t snd_lbb;       /* Sequence number of next byte to be buffered. */
N  u16_t snd_wnd;   /* sender window */
N  u16_t snd_wnd_max; /* the maximum sender window announced by the remote host */
N
N  u16_t acked;
N
N  u16_t snd_buf;   /* Available buffer space for sending (in bytes). */
N#define TCP_SNDQUEUELEN_OVERFLOW (0xffffU-3)
N  u16_t snd_queuelen; /* Available buffer space for sending (in tcp_segs). */
N
N#if TCP_OVERSIZE
X#if 1000
N  /* Extra bytes available at the end of the last pbuf in unsent. */
N  u16_t unsent_oversize;
N#endif /* TCP_OVERSIZE */ 
N
N  /* These are ordered by sequence number: */
N  struct tcp_seg *unsent;   /* Unsent (queued) segments. */
N  struct tcp_seg *unacked;  /* Sent but unacknowledged segments. */
N#if TCP_QUEUE_OOSEQ  
X#if (1)  
N  struct tcp_seg *ooseq;    /* Received out of sequence segments. */
N#endif /* TCP_QUEUE_OOSEQ */
N
N  struct pbuf *refused_data; /* Data previously received but not yet taken by upper layer */
N
N#if LWIP_CALLBACK_API
X#if 1
N  /* Function to be called when more send buffer space is available. */
N  tcp_sent_fn sent;
N  /* Function to be called when (in-sequence) data has arrived. */
N  tcp_recv_fn recv;
N  /* Function to be called when a connection has been set up. */
N  tcp_connected_fn connected;
N  /* Function which is called periodically. */
N  tcp_poll_fn poll;
N  /* Function to be called whenever a fatal error occurs. */
N  tcp_err_fn errf;
N#endif /* LWIP_CALLBACK_API */
N
N#if LWIP_TCP_TIMESTAMPS
X#if 0
S  u32_t ts_lastacksent;
S  u32_t ts_recent;
N#endif /* LWIP_TCP_TIMESTAMPS */
N
N  /* idle time before KEEPALIVE is sent */
N  u32_t keep_idle;
N#if LWIP_TCP_KEEPALIVE
X#if 0
S  u32_t keep_intvl;
S  u32_t keep_cnt;
N#endif /* LWIP_TCP_KEEPALIVE */
N  
N  /* Persist timer counter */
N  u8_t persist_cnt;
N  /* Persist timer back-off */
N  u8_t persist_backoff;
N
N  /* KEEPALIVE counter */
N  u8_t keep_cnt_sent;
N};
N
Nstruct tcp_pcb_listen {  
N/* Common members of all PCB types */
N  IP_PCB;
X  ip_addr_t local_ip; ip_addr_t remote_ip; u8_t so_options; u8_t tos; u8_t ttl ;
N/* Protocol specific PCB members */
N  TCP_PCB_COMMON(struct tcp_pcb_listen);
X  struct tcp_pcb_listen *next; void *callback_arg; tcp_accept_fn accept; enum tcp_state state; u8_t prio; u16_t local_port;
N
N#if TCP_LISTEN_BACKLOG
X#if 0
S  u8_t backlog;
S  u8_t accepts_pending;
N#endif /* TCP_LISTEN_BACKLOG */
N};
N
N#if LWIP_EVENT_API
X#if 0
S
Senum lwip_event {
S  LWIP_EVENT_ACCEPT,
S  LWIP_EVENT_SENT,
S  LWIP_EVENT_RECV,
S  LWIP_EVENT_CONNECTED,
S  LWIP_EVENT_POLL,
S  LWIP_EVENT_ERR
S};
S
Serr_t lwip_tcp_event(void *arg, struct tcp_pcb *pcb,
S         enum lwip_event,
S         struct pbuf *p,
S         u16_t size,
S         err_t err);
S
N#endif /* LWIP_EVENT_API */
N
N/* Application program's interface: */
Nstruct tcp_pcb * tcp_new     (void);
N
Nvoid             tcp_arg     (struct tcp_pcb *pcb, void *arg);
Nvoid             tcp_accept  (struct tcp_pcb *pcb, tcp_accept_fn accept);
Nvoid             tcp_recv    (struct tcp_pcb *pcb, tcp_recv_fn recv);
Nvoid             tcp_sent    (struct tcp_pcb *pcb, tcp_sent_fn sent);
Nvoid             tcp_poll    (struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval);
Nvoid             tcp_err     (struct tcp_pcb *pcb, tcp_err_fn err);
N
N#define          tcp_mss(pcb)             (((pcb)->flags & TF_TIMESTAMP) ? ((pcb)->mss - 12)  : (pcb)->mss)
N#define          tcp_sndbuf(pcb)          ((pcb)->snd_buf)
N#define          tcp_sndqueuelen(pcb)     ((pcb)->snd_queuelen)
N#define          tcp_nagle_disable(pcb)   ((pcb)->flags |= TF_NODELAY)
N#define          tcp_nagle_enable(pcb)    ((pcb)->flags &= ~TF_NODELAY)
N#define          tcp_nagle_disabled(pcb)  (((pcb)->flags & TF_NODELAY) != 0)
N
N#if TCP_LISTEN_BACKLOG
X#if 0
S#define          tcp_accepted(pcb) do { \
S  LWIP_ASSERT("pcb->state == LISTEN (called for wrong pcb?)", pcb->state == LISTEN); \
S  (((struct tcp_pcb_listen *)(pcb))->accepts_pending--); } while(0)
X#define          tcp_accepted(pcb) do {   LWIP_ASSERT("pcb->state == LISTEN (called for wrong pcb?)", pcb->state == LISTEN);   (((struct tcp_pcb_listen *)(pcb))->accepts_pending--); } while(0)
N#else  /* TCP_LISTEN_BACKLOG */
N#define          tcp_accepted(pcb) LWIP_ASSERT("pcb->state == LISTEN (called for wrong pcb?)", \
N                                               (pcb)->state == LISTEN)
X#define          tcp_accepted(pcb) LWIP_ASSERT("pcb->state == LISTEN (called for wrong pcb?)",                                                (pcb)->state == LISTEN)
N#endif /* TCP_LISTEN_BACKLOG */
N
Nvoid             tcp_recved  (struct tcp_pcb *pcb, u16_t len);
Nerr_t            tcp_bind    (struct tcp_pcb *pcb, ip_addr_t *ipaddr,
N                              u16_t port);
Nerr_t            tcp_connect (struct tcp_pcb *pcb, ip_addr_t *ipaddr,
N                              u16_t port, tcp_connected_fn connected);
N
Nstruct tcp_pcb * tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog);
N#define          tcp_listen(pcb) tcp_listen_with_backlog(pcb, TCP_DEFAULT_LISTEN_BACKLOG)
N
Nvoid             tcp_abort (struct tcp_pcb *pcb);
Nerr_t            tcp_close   (struct tcp_pcb *pcb);
Nerr_t            tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx);
N
N/* Flags for "apiflags" parameter in tcp_write */
N#define TCP_WRITE_FLAG_COPY 0x01
N#define TCP_WRITE_FLAG_MORE 0x02
N
Nerr_t            tcp_write   (struct tcp_pcb *pcb, const void *dataptr, u16_t len,
N                              u8_t apiflags);
N
Nvoid             tcp_setprio (struct tcp_pcb *pcb, u8_t prio);
N
N#define TCP_PRIO_MIN    1
N#define TCP_PRIO_NORMAL 64
N#define TCP_PRIO_MAX    127
N
Nerr_t            tcp_output  (struct tcp_pcb *pcb);
N
N
Nconst char* tcp_debug_state_str(enum tcp_state s);
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* LWIP_TCP */
N
N#endif /* __LWIP_TCP_H__ */
L 40 "..\..\lwip\src\include\lwip/tcp_impl.h" 2
N#include "lwip/mem.h"
N#include "lwip/pbuf.h"
N#include "lwip/ip.h"
N#include "lwip/icmp.h"
N#include "lwip/err.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Functions for interfacing with TCP: */
N
N/* Lower layer interface to TCP: */
Nvoid             tcp_init    (void);  /* Initialize this module. */
Nvoid             tcp_tmr     (void);  /* Must be called every
N                                         TCP_TMR_INTERVAL
N                                         ms. (Typically 250 ms). */
N/* It is also possible to call these two functions at the right
N   intervals (instead of calling tcp_tmr()). */
Nvoid             tcp_slowtmr (void);
Nvoid             tcp_fasttmr (void);
N
N
N/* Only used by IP to pass a TCP segment to TCP: */
Nvoid             tcp_input   (struct pbuf *p, struct netif *inp);
N/* Used within the TCP code only: */
Nstruct tcp_pcb * tcp_alloc   (u8_t prio);
Nvoid             tcp_abandon (struct tcp_pcb *pcb, int reset);
Nerr_t            tcp_send_empty_ack(struct tcp_pcb *pcb);
Nvoid             tcp_rexmit  (struct tcp_pcb *pcb);
Nvoid             tcp_rexmit_rto  (struct tcp_pcb *pcb);
Nvoid             tcp_rexmit_fast (struct tcp_pcb *pcb);
Nu32_t            tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb);
Nerr_t            tcp_process_refused_data(struct tcp_pcb *pcb);
N
N/**
N * This is the Nagle algorithm: try to combine user data to send as few TCP
N * segments as possible. Only send if
N * - no previously transmitted data on the connection remains unacknowledged or
N * - the TF_NODELAY flag is set (nagle algorithm turned off for this pcb) or
N * - the only unsent segment is at least pcb->mss bytes long (or there is more
N *   than one unsent segment - with lwIP, this can happen although unsent->len < mss)
N * - or if we are in fast-retransmit (TF_INFR)
N */
N#define tcp_do_output_nagle(tpcb) ((((tpcb)->unacked == NULL) || \
N                            ((tpcb)->flags & (TF_NODELAY | TF_INFR)) || \
N                            (((tpcb)->unsent != NULL) && (((tpcb)->unsent->next != NULL) || \
N                              ((tpcb)->unsent->len >= (tpcb)->mss))) || \
N                            ((tcp_sndbuf(tpcb) == 0) || (tcp_sndqueuelen(tpcb) >= TCP_SND_QUEUELEN)) \
N                            ) ? 1 : 0)
X#define tcp_do_output_nagle(tpcb) ((((tpcb)->unacked == NULL) ||                             ((tpcb)->flags & (TF_NODELAY | TF_INFR)) ||                             (((tpcb)->unsent != NULL) && (((tpcb)->unsent->next != NULL) ||                               ((tpcb)->unsent->len >= (tpcb)->mss))) ||                             ((tcp_sndbuf(tpcb) == 0) || (tcp_sndqueuelen(tpcb) >= TCP_SND_QUEUELEN))                             ) ? 1 : 0)
N#define tcp_output_nagle(tpcb) (tcp_do_output_nagle(tpcb) ? tcp_output(tpcb) : ERR_OK)
N
N
N#define TCP_SEQ_LT(a,b)     ((s32_t)((u32_t)(a) - (u32_t)(b)) < 0)
N#define TCP_SEQ_LEQ(a,b)    ((s32_t)((u32_t)(a) - (u32_t)(b)) <= 0)
N#define TCP_SEQ_GT(a,b)     ((s32_t)((u32_t)(a) - (u32_t)(b)) > 0)
N#define TCP_SEQ_GEQ(a,b)    ((s32_t)((u32_t)(a) - (u32_t)(b)) >= 0)
N/* is b<=a<=c? */
N#if 0 /* see bug #10548 */
S#define TCP_SEQ_BETWEEN(a,b,c) ((c)-(b) >= (a)-(b))
N#endif
N#define TCP_SEQ_BETWEEN(a,b,c) (TCP_SEQ_GEQ(a,b) && TCP_SEQ_LEQ(a,c))
N#define TCP_FIN 0x01U
N#define TCP_SYN 0x02U
N#define TCP_RST 0x04U
N#define TCP_PSH 0x08U
N#define TCP_ACK 0x10U
N#define TCP_URG 0x20U
N#define TCP_ECE 0x40U
N#define TCP_CWR 0x80U
N
N#define TCP_FLAGS 0x3fU
N
N/* Length of the TCP header, excluding options. */
N#define TCP_HLEN 20
N
N#ifndef TCP_TMR_INTERVAL
N#define TCP_TMR_INTERVAL       250  /* The TCP timer interval in milliseconds. */
N#endif /* TCP_TMR_INTERVAL */
N
N#ifndef TCP_FAST_INTERVAL
N#define TCP_FAST_INTERVAL      TCP_TMR_INTERVAL /* the fine grained timeout in milliseconds */
N#endif /* TCP_FAST_INTERVAL */
N
N#ifndef TCP_SLOW_INTERVAL
N#define TCP_SLOW_INTERVAL      (2*TCP_TMR_INTERVAL)  /* the coarse grained timeout in milliseconds */
N#endif /* TCP_SLOW_INTERVAL */
N
N#define TCP_FIN_WAIT_TIMEOUT 20000 /* milliseconds */
N#define TCP_SYN_RCVD_TIMEOUT 20000 /* milliseconds */
N
N#define TCP_OOSEQ_TIMEOUT        6U /* x RTO */
N
N#ifndef TCP_MSL
N#define TCP_MSL 60000UL /* The maximum segment lifetime in milliseconds */
N#endif
N
N/* Keepalive values, compliant with RFC 1122. Don't change this unless you know what you're doing */
N#ifndef  TCP_KEEPIDLE_DEFAULT
N#define  TCP_KEEPIDLE_DEFAULT     7200000UL /* Default KEEPALIVE timer in milliseconds */
N#endif
N
N#ifndef  TCP_KEEPINTVL_DEFAULT
N#define  TCP_KEEPINTVL_DEFAULT    75000UL   /* Default Time between KEEPALIVE probes in milliseconds */
N#endif
N
N#ifndef  TCP_KEEPCNT_DEFAULT
N#define  TCP_KEEPCNT_DEFAULT      9U        /* Default Counter for KEEPALIVE probes */
N#endif
N
N#define  TCP_MAXIDLE              TCP_KEEPCNT_DEFAULT * TCP_KEEPINTVL_DEFAULT  /* Maximum KEEPALIVE probe time */
N
N/* Fields are (of course) in network byte order.
N * Some fields are converted to host byte order in tcp_input().
N */
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
N#endif
NPACK_STRUCT_BEGIN
X__packed
Nstruct tcp_hdr {
N  PACK_STRUCT_FIELD(u16_t src);
X  u16_t src;
N  PACK_STRUCT_FIELD(u16_t dest);
X  u16_t dest;
N  PACK_STRUCT_FIELD(u32_t seqno);
X  u32_t seqno;
N  PACK_STRUCT_FIELD(u32_t ackno);
X  u32_t ackno;
N  PACK_STRUCT_FIELD(u16_t _hdrlen_rsvd_flags);
X  u16_t _hdrlen_rsvd_flags;
N  PACK_STRUCT_FIELD(u16_t wnd);
X  u16_t wnd;
N  PACK_STRUCT_FIELD(u16_t chksum);
X  u16_t chksum;
N  PACK_STRUCT_FIELD(u16_t urgp);
X  u16_t urgp;
N} PACK_STRUCT_STRUCT;
X} ;
NPACK_STRUCT_END
X
N#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
N#endif
N
N#define TCPH_HDRLEN(phdr) (ntohs((phdr)->_hdrlen_rsvd_flags) >> 12)
N#define TCPH_FLAGS(phdr)  (ntohs((phdr)->_hdrlen_rsvd_flags) & TCP_FLAGS)
N
N#define TCPH_HDRLEN_SET(phdr, len) (phdr)->_hdrlen_rsvd_flags = htons(((len) << 12) | TCPH_FLAGS(phdr))
N#define TCPH_FLAGS_SET(phdr, flags) (phdr)->_hdrlen_rsvd_flags = (((phdr)->_hdrlen_rsvd_flags & PP_HTONS((u16_t)(~(u16_t)(TCP_FLAGS)))) | htons(flags))
N#define TCPH_HDRLEN_FLAGS_SET(phdr, len, flags) (phdr)->_hdrlen_rsvd_flags = htons(((len) << 12) | (flags))
N
N#define TCPH_SET_FLAG(phdr, flags ) (phdr)->_hdrlen_rsvd_flags = ((phdr)->_hdrlen_rsvd_flags | htons(flags))
N#define TCPH_UNSET_FLAG(phdr, flags) (phdr)->_hdrlen_rsvd_flags = htons(ntohs((phdr)->_hdrlen_rsvd_flags) | (TCPH_FLAGS(phdr) & ~(flags)) )
N
N#define TCP_TCPLEN(seg) ((seg)->len + ((TCPH_FLAGS((seg)->tcphdr) & (TCP_FIN | TCP_SYN)) != 0))
N
N/** Flags used on input processing, not on pcb->flags
N*/
N#define TF_RESET     (u8_t)0x08U   /* Connection was reset. */
N#define TF_CLOSED    (u8_t)0x10U   /* Connection was sucessfully closed. */
N#define TF_GOT_FIN   (u8_t)0x20U   /* Connection was closed by the remote end. */
N
N
N#if LWIP_EVENT_API
X#if 0
S
S#define TCP_EVENT_ACCEPT(pcb,err,ret)    ret = lwip_tcp_event((pcb)->callback_arg, (pcb),\
S                LWIP_EVENT_ACCEPT, NULL, 0, err)
X#define TCP_EVENT_ACCEPT(pcb,err,ret)    ret = lwip_tcp_event((pcb)->callback_arg, (pcb),                LWIP_EVENT_ACCEPT, NULL, 0, err)
S#define TCP_EVENT_SENT(pcb,space,ret) ret = lwip_tcp_event((pcb)->callback_arg, (pcb),\
S                   LWIP_EVENT_SENT, NULL, space, ERR_OK)
X#define TCP_EVENT_SENT(pcb,space,ret) ret = lwip_tcp_event((pcb)->callback_arg, (pcb),                   LWIP_EVENT_SENT, NULL, space, ERR_OK)
S#define TCP_EVENT_RECV(pcb,p,err,ret) ret = lwip_tcp_event((pcb)->callback_arg, (pcb),\
S                LWIP_EVENT_RECV, (p), 0, (err))
X#define TCP_EVENT_RECV(pcb,p,err,ret) ret = lwip_tcp_event((pcb)->callback_arg, (pcb),                LWIP_EVENT_RECV, (p), 0, (err))
S#define TCP_EVENT_CLOSED(pcb,ret) ret = lwip_tcp_event((pcb)->callback_arg, (pcb),\
S                LWIP_EVENT_RECV, NULL, 0, ERR_OK)
X#define TCP_EVENT_CLOSED(pcb,ret) ret = lwip_tcp_event((pcb)->callback_arg, (pcb),                LWIP_EVENT_RECV, NULL, 0, ERR_OK)
S#define TCP_EVENT_CONNECTED(pcb,err,ret) ret = lwip_tcp_event((pcb)->callback_arg, (pcb),\
S                LWIP_EVENT_CONNECTED, NULL, 0, (err))
X#define TCP_EVENT_CONNECTED(pcb,err,ret) ret = lwip_tcp_event((pcb)->callback_arg, (pcb),                LWIP_EVENT_CONNECTED, NULL, 0, (err))
S#define TCP_EVENT_POLL(pcb,ret)       ret = lwip_tcp_event((pcb)->callback_arg, (pcb),\
S                LWIP_EVENT_POLL, NULL, 0, ERR_OK)
X#define TCP_EVENT_POLL(pcb,ret)       ret = lwip_tcp_event((pcb)->callback_arg, (pcb),                LWIP_EVENT_POLL, NULL, 0, ERR_OK)
S#define TCP_EVENT_ERR(errf,arg,err)  lwip_tcp_event((arg), NULL, \
S                LWIP_EVENT_ERR, NULL, 0, (err))
X#define TCP_EVENT_ERR(errf,arg,err)  lwip_tcp_event((arg), NULL,                 LWIP_EVENT_ERR, NULL, 0, (err))
S
N#else /* LWIP_EVENT_API */
N
N#define TCP_EVENT_ACCEPT(pcb,err,ret)                          \
N  do {                                                         \
N    if((pcb)->accept != NULL)                                  \
N      (ret) = (pcb)->accept((pcb)->callback_arg,(pcb),(err));  \
N    else (ret) = ERR_ARG;                                      \
N  } while (0)
X#define TCP_EVENT_ACCEPT(pcb,err,ret)                            do {                                                             if((pcb)->accept != NULL)                                        (ret) = (pcb)->accept((pcb)->callback_arg,(pcb),(err));      else (ret) = ERR_ARG;                                        } while (0)
N
N#define TCP_EVENT_SENT(pcb,space,ret)                          \
N  do {                                                         \
N    if((pcb)->sent != NULL)                                    \
N      (ret) = (pcb)->sent((pcb)->callback_arg,(pcb),(space));  \
N    else (ret) = ERR_OK;                                       \
N  } while (0)
X#define TCP_EVENT_SENT(pcb,space,ret)                            do {                                                             if((pcb)->sent != NULL)                                          (ret) = (pcb)->sent((pcb)->callback_arg,(pcb),(space));      else (ret) = ERR_OK;                                         } while (0)
N
N#define TCP_EVENT_RECV(pcb,p,err,ret)                          \
N  do {                                                         \
N    if((pcb)->recv != NULL) {                                  \
N      (ret) = (pcb)->recv((pcb)->callback_arg,(pcb),(p),(err));\
N    } else {                                                   \
N      (ret) = tcp_recv_null(NULL, (pcb), (p), (err));          \
N    }                                                          \
N  } while (0)
X#define TCP_EVENT_RECV(pcb,p,err,ret)                            do {                                                             if((pcb)->recv != NULL) {                                        (ret) = (pcb)->recv((pcb)->callback_arg,(pcb),(p),(err));    } else {                                                         (ret) = tcp_recv_null(NULL, (pcb), (p), (err));              }                                                            } while (0)
N
N#define TCP_EVENT_CLOSED(pcb,ret)                                \
N  do {                                                           \
N    if(((pcb)->recv != NULL)) {                                  \
N      (ret) = (pcb)->recv((pcb)->callback_arg,(pcb),NULL,ERR_OK);\
N    } else {                                                     \
N      (ret) = ERR_OK;                                            \
N    }                                                            \
N  } while (0)
X#define TCP_EVENT_CLOSED(pcb,ret)                                  do {                                                               if(((pcb)->recv != NULL)) {                                        (ret) = (pcb)->recv((pcb)->callback_arg,(pcb),NULL,ERR_OK);    } else {                                                           (ret) = ERR_OK;                                                }                                                              } while (0)
N
N#define TCP_EVENT_CONNECTED(pcb,err,ret)                         \
N  do {                                                           \
N    if((pcb)->connected != NULL)                                 \
N      (ret) = (pcb)->connected((pcb)->callback_arg,(pcb),(err)); \
N    else (ret) = ERR_OK;                                         \
N  } while (0)
X#define TCP_EVENT_CONNECTED(pcb,err,ret)                           do {                                                               if((pcb)->connected != NULL)                                       (ret) = (pcb)->connected((pcb)->callback_arg,(pcb),(err));     else (ret) = ERR_OK;                                           } while (0)
N
N#define TCP_EVENT_POLL(pcb,ret)                                \
N  do {                                                         \
N    if((pcb)->poll != NULL)                                    \
N      (ret) = (pcb)->poll((pcb)->callback_arg,(pcb));          \
N    else (ret) = ERR_OK;                                       \
N  } while (0)
X#define TCP_EVENT_POLL(pcb,ret)                                  do {                                                             if((pcb)->poll != NULL)                                          (ret) = (pcb)->poll((pcb)->callback_arg,(pcb));              else (ret) = ERR_OK;                                         } while (0)
N
N#define TCP_EVENT_ERR(errf,arg,err)                            \
N  do {                                                         \
N    if((errf) != NULL)                                         \
N      (errf)((arg),(err));                                     \
N  } while (0)
X#define TCP_EVENT_ERR(errf,arg,err)                              do {                                                             if((errf) != NULL)                                               (errf)((arg),(err));                                       } while (0)
N
N#endif /* LWIP_EVENT_API */
N
N/** Enabled extra-check for TCP_OVERSIZE if LWIP_DEBUG is enabled */
N#if TCP_OVERSIZE && defined(LWIP_DEBUG)
X#if 1000 && 1L
N#define TCP_OVERSIZE_DBGCHECK 1
N#else
S#define TCP_OVERSIZE_DBGCHECK 0
N#endif
N
N/** Don't generate checksum on copy if CHECKSUM_GEN_TCP is disabled */
N#define TCP_CHECKSUM_ON_COPY  (LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_TCP)
N
N/* This structure represents a TCP segment on the unsent, unacked and ooseq queues */
Nstruct tcp_seg {
N  struct tcp_seg *next;    /* used when putting segements on a queue */
N  struct pbuf *p;          /* buffer containing data + TCP header */
N  u16_t len;               /* the TCP length of this segment */
N#if TCP_OVERSIZE_DBGCHECK
X#if 1
N  u16_t oversize_left;     /* Extra bytes available at the end of the last
N                              pbuf in unsent (used for asserting vs.
N                              tcp_pcb.unsent_oversized only) */
N#endif /* TCP_OVERSIZE_DBGCHECK */ 
N#if TCP_CHECKSUM_ON_COPY
X#if (0 && 1)
S  u16_t chksum;
S  u8_t  chksum_swapped;
N#endif /* TCP_CHECKSUM_ON_COPY */
N  u8_t  flags;
N#define TF_SEG_OPTS_MSS         (u8_t)0x01U /* Include MSS option. */
N#define TF_SEG_OPTS_TS          (u8_t)0x02U /* Include timestamp option. */
N#define TF_SEG_DATA_CHECKSUMMED (u8_t)0x04U /* ALL data (not the header) is
N                                               checksummed into 'chksum' */
N  struct tcp_hdr *tcphdr;  /* the TCP header */
N};
N
N#define LWIP_TCP_OPT_LENGTH(flags)              \
N  (flags & TF_SEG_OPTS_MSS ? 4  : 0) +          \
N  (flags & TF_SEG_OPTS_TS  ? 12 : 0)
X#define LWIP_TCP_OPT_LENGTH(flags)                (flags & TF_SEG_OPTS_MSS ? 4  : 0) +            (flags & TF_SEG_OPTS_TS  ? 12 : 0)
N
N/** This returns a TCP header option for MSS in an u32_t */
N#define TCP_BUILD_MSS_OPTION(mss) htonl(0x02040000 | ((mss) & 0xFFFF))
N
N/* Global variables: */
Nextern struct tcp_pcb *tcp_input_pcb;
Nextern u32_t tcp_ticks;
Nextern u8_t tcp_active_pcbs_changed;
N
N/* The TCP PCB lists. */
Nunion tcp_listen_pcbs_t { /* List of all TCP PCBs in LISTEN state. */
N  struct tcp_pcb_listen *listen_pcbs; 
N  struct tcp_pcb *pcbs;
N};
Nextern struct tcp_pcb *tcp_bound_pcbs;
Nextern union tcp_listen_pcbs_t tcp_listen_pcbs;
Nextern struct tcp_pcb *tcp_active_pcbs;  /* List of all TCP PCBs that are in a
N              state in which they accept or send
N              data. */
Nextern struct tcp_pcb *tcp_tw_pcbs;      /* List of all TCP PCBs in TIME-WAIT. */
N
Nextern struct tcp_pcb *tcp_tmp_pcb;      /* Only used for temporary storage. */
N
N/* Axioms about the above lists:   
N   1) Every TCP PCB that is not CLOSED is in one of the lists.
N   2) A PCB is only in one of the lists.
N   3) All PCBs in the tcp_listen_pcbs list is in LISTEN state.
N   4) All PCBs in the tcp_tw_pcbs list is in TIME-WAIT state.
N*/
N/* Define two macros, TCP_REG and TCP_RMV that registers a TCP PCB
N   with a PCB list or removes a PCB from a list, respectively. */
N#ifndef TCP_DEBUG_PCB_LISTS
N#define TCP_DEBUG_PCB_LISTS 0
N#endif
N#if TCP_DEBUG_PCB_LISTS
X#if 0
S#define TCP_REG(pcbs, npcb) do {\
S                            LWIP_DEBUGF(TCP_DEBUG, ("TCP_REG %p local port %d\n", (npcb), (npcb)->local_port)); \
S                            for(tcp_tmp_pcb = *(pcbs); \
S          tcp_tmp_pcb != NULL; \
S        tcp_tmp_pcb = tcp_tmp_pcb->next) { \
S                                LWIP_ASSERT("TCP_REG: already registered\n", tcp_tmp_pcb != (npcb)); \
S                            } \
S                            LWIP_ASSERT("TCP_REG: pcb->state != CLOSED", ((pcbs) == &tcp_bound_pcbs) || ((npcb)->state != CLOSED)); \
S                            (npcb)->next = *(pcbs); \
S                            LWIP_ASSERT("TCP_REG: npcb->next != npcb", (npcb)->next != (npcb)); \
S                            *(pcbs) = (npcb); \
S                            LWIP_ASSERT("TCP_RMV: tcp_pcbs sane", tcp_pcbs_sane()); \
S              tcp_timer_needed(); \
S                            } while(0)
X#define TCP_REG(pcbs, npcb) do {                            LWIP_DEBUGF(TCP_DEBUG, ("TCP_REG %p local port %d\n", (npcb), (npcb)->local_port));                             for(tcp_tmp_pcb = *(pcbs);           tcp_tmp_pcb != NULL;         tcp_tmp_pcb = tcp_tmp_pcb->next) {                                 LWIP_ASSERT("TCP_REG: already registered\n", tcp_tmp_pcb != (npcb));                             }                             LWIP_ASSERT("TCP_REG: pcb->state != CLOSED", ((pcbs) == &tcp_bound_pcbs) || ((npcb)->state != CLOSED));                             (npcb)->next = *(pcbs);                             LWIP_ASSERT("TCP_REG: npcb->next != npcb", (npcb)->next != (npcb));                             *(pcbs) = (npcb);                             LWIP_ASSERT("TCP_RMV: tcp_pcbs sane", tcp_pcbs_sane());               tcp_timer_needed();                             } while(0)
S#define TCP_RMV(pcbs, npcb) do { \
S                            LWIP_ASSERT("TCP_RMV: pcbs != NULL", *(pcbs) != NULL); \
S                            LWIP_DEBUGF(TCP_DEBUG, ("TCP_RMV: removing %p from %p\n", (npcb), *(pcbs))); \
S                            if(*(pcbs) == (npcb)) { \
S                               *(pcbs) = (*pcbs)->next; \
S                            } else for(tcp_tmp_pcb = *(pcbs); tcp_tmp_pcb != NULL; tcp_tmp_pcb = tcp_tmp_pcb->next) { \
S                               if(tcp_tmp_pcb->next == (npcb)) { \
S                                  tcp_tmp_pcb->next = (npcb)->next; \
S                                  break; \
S                               } \
S                            } \
S                            (npcb)->next = NULL; \
S                            LWIP_ASSERT("TCP_RMV: tcp_pcbs sane", tcp_pcbs_sane()); \
S                            LWIP_DEBUGF(TCP_DEBUG, ("TCP_RMV: removed %p from %p\n", (npcb), *(pcbs))); \
S                            } while(0)
X#define TCP_RMV(pcbs, npcb) do {                             LWIP_ASSERT("TCP_RMV: pcbs != NULL", *(pcbs) != NULL);                             LWIP_DEBUGF(TCP_DEBUG, ("TCP_RMV: removing %p from %p\n", (npcb), *(pcbs)));                             if(*(pcbs) == (npcb)) {                                *(pcbs) = (*pcbs)->next;                             } else for(tcp_tmp_pcb = *(pcbs); tcp_tmp_pcb != NULL; tcp_tmp_pcb = tcp_tmp_pcb->next) {                                if(tcp_tmp_pcb->next == (npcb)) {                                   tcp_tmp_pcb->next = (npcb)->next;                                   break;                                }                             }                             (npcb)->next = NULL;                             LWIP_ASSERT("TCP_RMV: tcp_pcbs sane", tcp_pcbs_sane());                             LWIP_DEBUGF(TCP_DEBUG, ("TCP_RMV: removed %p from %p\n", (npcb), *(pcbs)));                             } while(0)
S
N#else /* LWIP_DEBUG */
N
N#define TCP_REG(pcbs, npcb)                        \
N  do {                                             \
N    (npcb)->next = *pcbs;                          \
N    *(pcbs) = (npcb);                              \
N    tcp_timer_needed();                            \
N  } while (0)
X#define TCP_REG(pcbs, npcb)                          do {                                                 (npcb)->next = *pcbs;                              *(pcbs) = (npcb);                                  tcp_timer_needed();                              } while (0)
N
N#define TCP_RMV(pcbs, npcb)                        \
N  do {                                             \
N    if(*(pcbs) == (npcb)) {                        \
N      (*(pcbs)) = (*pcbs)->next;                   \
N    }                                              \
N    else {                                         \
N      for(tcp_tmp_pcb = *pcbs;                     \
N          tcp_tmp_pcb != NULL;                     \
N          tcp_tmp_pcb = tcp_tmp_pcb->next) {       \
N        if(tcp_tmp_pcb->next == (npcb)) {          \
N          tcp_tmp_pcb->next = (npcb)->next;        \
N          break;                                   \
N        }                                          \
N      }                                            \
N    }                                              \
N    (npcb)->next = NULL;                           \
N  } while(0)
X#define TCP_RMV(pcbs, npcb)                          do {                                                 if(*(pcbs) == (npcb)) {                              (*(pcbs)) = (*pcbs)->next;                       }                                                  else {                                               for(tcp_tmp_pcb = *pcbs;                               tcp_tmp_pcb != NULL;                               tcp_tmp_pcb = tcp_tmp_pcb->next) {               if(tcp_tmp_pcb->next == (npcb)) {                    tcp_tmp_pcb->next = (npcb)->next;                  break;                                           }                                                }                                                }                                                  (npcb)->next = NULL;                             } while(0)
N
N#endif /* LWIP_DEBUG */
N
N#define TCP_REG_ACTIVE(npcb)                       \
N  do {                                             \
N    TCP_REG(&tcp_active_pcbs, npcb);               \
N    tcp_active_pcbs_changed = 1;                   \
N  } while (0)
X#define TCP_REG_ACTIVE(npcb)                         do {                                                 TCP_REG(&tcp_active_pcbs, npcb);                   tcp_active_pcbs_changed = 1;                     } while (0)
N
N#define TCP_RMV_ACTIVE(npcb)                       \
N  do {                                             \
N    TCP_RMV(&tcp_active_pcbs, npcb);               \
N    tcp_active_pcbs_changed = 1;                   \
N  } while (0)
X#define TCP_RMV_ACTIVE(npcb)                         do {                                                 TCP_RMV(&tcp_active_pcbs, npcb);                   tcp_active_pcbs_changed = 1;                     } while (0)
N
N#define TCP_PCB_REMOVE_ACTIVE(pcb)                 \
N  do {                                             \
N    tcp_pcb_remove(&tcp_active_pcbs, pcb);         \
N    tcp_active_pcbs_changed = 1;                   \
N  } while (0)
X#define TCP_PCB_REMOVE_ACTIVE(pcb)                   do {                                                 tcp_pcb_remove(&tcp_active_pcbs, pcb);             tcp_active_pcbs_changed = 1;                     } while (0)
N
N
N/* Internal functions: */
Nstruct tcp_pcb *tcp_pcb_copy(struct tcp_pcb *pcb);
Nvoid tcp_pcb_purge(struct tcp_pcb *pcb);
Nvoid tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb);
N
Nvoid tcp_segs_free(struct tcp_seg *seg);
Nvoid tcp_seg_free(struct tcp_seg *seg);
Nstruct tcp_seg *tcp_seg_copy(struct tcp_seg *seg);
N
N#define tcp_ack(pcb)                               \
N  do {                                             \
N    if((pcb)->flags & TF_ACK_DELAY) {              \
N      (pcb)->flags &= ~TF_ACK_DELAY;               \
N      (pcb)->flags |= TF_ACK_NOW;                  \
N    }                                              \
N    else {                                         \
N      (pcb)->flags |= TF_ACK_DELAY;                \
N    }                                              \
N  } while (0)
X#define tcp_ack(pcb)                                 do {                                                 if((pcb)->flags & TF_ACK_DELAY) {                    (pcb)->flags &= ~TF_ACK_DELAY;                     (pcb)->flags |= TF_ACK_NOW;                      }                                                  else {                                               (pcb)->flags |= TF_ACK_DELAY;                    }                                                } while (0)
N
N#define tcp_ack_now(pcb)                           \
N  do {                                             \
N    (pcb)->flags |= TF_ACK_NOW;                    \
N  } while (0)
X#define tcp_ack_now(pcb)                             do {                                                 (pcb)->flags |= TF_ACK_NOW;                      } while (0)
N
Nerr_t tcp_send_fin(struct tcp_pcb *pcb);
Nerr_t tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags);
N
Nvoid tcp_rexmit_seg(struct tcp_pcb *pcb, struct tcp_seg *seg);
N
Nvoid tcp_rst(u32_t seqno, u32_t ackno,
N       ip_addr_t *local_ip, ip_addr_t *remote_ip,
N       u16_t local_port, u16_t remote_port);
N
Nu32_t tcp_next_iss(void);
N
Nvoid tcp_keepalive(struct tcp_pcb *pcb);
Nvoid tcp_zero_window_probe(struct tcp_pcb *pcb);
N
N#if TCP_CALCULATE_EFF_SEND_MSS
X#if 1
Nu16_t tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr);
N#endif /* TCP_CALCULATE_EFF_SEND_MSS */
N
N#if LWIP_CALLBACK_API
X#if 1
Nerr_t tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err);
N#endif /* LWIP_CALLBACK_API */
N
N#if TCP_DEBUG || TCP_INPUT_DEBUG || TCP_OUTPUT_DEBUG
X#if 0x00U || 0x00U || 0x00U
Svoid tcp_debug_print(struct tcp_hdr *tcphdr);
Svoid tcp_debug_print_flags(u8_t flags);
Svoid tcp_debug_print_state(enum tcp_state s);
Svoid tcp_debug_print_pcbs(void);
Ss16_t tcp_pcbs_sane(void);
N#else
N#  define tcp_debug_print(tcphdr)
N#  define tcp_debug_print_flags(flags)
N#  define tcp_debug_print_state(s)
N#  define tcp_debug_print_pcbs()
N#  define tcp_pcbs_sane() 1
N#endif /* TCP_DEBUG */
N
N/** External function (implemented in timers.c), called when TCP detects
N * that a timer is needed (i.e. active- or time-wait-pcb found). */
Nvoid tcp_timer_needed(void);
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* LWIP_TCP */
N
N#endif /* __LWIP_TCP_H__ */
L 53 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/snmp.h"
L 1 "..\..\lwip\src\include\lwip/snmp.h" 1
N/*
N * Copyright (c) 2001, 2002 Leon Woestenberg <leon.woestenberg@axon.tv>
N * Copyright (c) 2001, 2002 Axon Digital Design B.V., The Netherlands.
N * All rights reserved.
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Leon Woestenberg <leon.woestenberg@axon.tv>
N *
N */
N#ifndef __LWIP_SNMP_H__
N#define __LWIP_SNMP_H__
N
N#include "lwip/opt.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "lwip/ip_addr.h"
N
Nstruct udp_pcb;
Nstruct netif;
N
N/**
N * @see RFC1213, "MIB-II, 6. Definitions"
N */
Nenum snmp_ifType {
N  snmp_ifType_other=1,                /* none of the following */
N  snmp_ifType_regular1822,
N  snmp_ifType_hdh1822,
N  snmp_ifType_ddn_x25,
N  snmp_ifType_rfc877_x25,
N  snmp_ifType_ethernet_csmacd,
N  snmp_ifType_iso88023_csmacd,
N  snmp_ifType_iso88024_tokenBus,
N  snmp_ifType_iso88025_tokenRing,
N  snmp_ifType_iso88026_man,
N  snmp_ifType_starLan,
N  snmp_ifType_proteon_10Mbit,
N  snmp_ifType_proteon_80Mbit,
N  snmp_ifType_hyperchannel,
N  snmp_ifType_fddi,
N  snmp_ifType_lapb,
N  snmp_ifType_sdlc,
N  snmp_ifType_ds1,                    /* T-1 */
N  snmp_ifType_e1,                     /* european equiv. of T-1 */
N  snmp_ifType_basicISDN,
N  snmp_ifType_primaryISDN,            /* proprietary serial */
N  snmp_ifType_propPointToPointSerial,
N  snmp_ifType_ppp,
N  snmp_ifType_softwareLoopback,
N  snmp_ifType_eon,                    /* CLNP over IP [11] */
N  snmp_ifType_ethernet_3Mbit,
N  snmp_ifType_nsip,                   /* XNS over IP */
N  snmp_ifType_slip,                   /* generic SLIP */
N  snmp_ifType_ultra,                  /* ULTRA technologies */
N  snmp_ifType_ds3,                    /* T-3 */
N  snmp_ifType_sip,                    /* SMDS */
N  snmp_ifType_frame_relay
N};
N
N#if LWIP_SNMP /* don't build if not configured for use in lwipopts.h */
X#if 0  
S
S/** SNMP "sysuptime" Interval */
S#define SNMP_SYSUPTIME_INTERVAL 10
S
S/** fixed maximum length for object identifier type */
S#define LWIP_SNMP_OBJ_ID_LEN 32
S
S/** internal object identifier representation */
Sstruct snmp_obj_id
S{
S  u8_t len;
S  s32_t id[LWIP_SNMP_OBJ_ID_LEN];
S};
S
S/* system */
Svoid snmp_set_sysdesr(u8_t* str, u8_t* len);
Svoid snmp_set_sysobjid(struct snmp_obj_id *oid);
Svoid snmp_get_sysobjid_ptr(struct snmp_obj_id **oid);
Svoid snmp_inc_sysuptime(void);
Svoid snmp_add_sysuptime(u32_t value);
Svoid snmp_get_sysuptime(u32_t *value);
Svoid snmp_set_syscontact(u8_t *ocstr, u8_t *ocstrlen);
Svoid snmp_set_sysname(u8_t *ocstr, u8_t *ocstrlen);
Svoid snmp_set_syslocation(u8_t *ocstr, u8_t *ocstrlen);
S
S/* network interface */
Svoid snmp_add_ifinoctets(struct netif *ni, u32_t value); 
Svoid snmp_inc_ifinucastpkts(struct netif *ni);
Svoid snmp_inc_ifinnucastpkts(struct netif *ni);
Svoid snmp_inc_ifindiscards(struct netif *ni);
Svoid snmp_add_ifoutoctets(struct netif *ni, u32_t value);
Svoid snmp_inc_ifoutucastpkts(struct netif *ni);
Svoid snmp_inc_ifoutnucastpkts(struct netif *ni);
Svoid snmp_inc_ifoutdiscards(struct netif *ni);
Svoid snmp_inc_iflist(void);
Svoid snmp_dec_iflist(void);
S
S/* ARP (for atTable and ipNetToMediaTable) */
Svoid snmp_insert_arpidx_tree(struct netif *ni, ip_addr_t *ip);
Svoid snmp_delete_arpidx_tree(struct netif *ni, ip_addr_t *ip);
S
S/* IP */
Svoid snmp_inc_ipinreceives(void);
Svoid snmp_inc_ipinhdrerrors(void);
Svoid snmp_inc_ipinaddrerrors(void);
Svoid snmp_inc_ipforwdatagrams(void);
Svoid snmp_inc_ipinunknownprotos(void);
Svoid snmp_inc_ipindiscards(void);
Svoid snmp_inc_ipindelivers(void);
Svoid snmp_inc_ipoutrequests(void);
Svoid snmp_inc_ipoutdiscards(void);
Svoid snmp_inc_ipoutnoroutes(void);
Svoid snmp_inc_ipreasmreqds(void);
Svoid snmp_inc_ipreasmoks(void);
Svoid snmp_inc_ipreasmfails(void);
Svoid snmp_inc_ipfragoks(void);
Svoid snmp_inc_ipfragfails(void);
Svoid snmp_inc_ipfragcreates(void);
Svoid snmp_inc_iproutingdiscards(void);
Svoid snmp_insert_ipaddridx_tree(struct netif *ni);
Svoid snmp_delete_ipaddridx_tree(struct netif *ni);
Svoid snmp_insert_iprteidx_tree(u8_t dflt, struct netif *ni);
Svoid snmp_delete_iprteidx_tree(u8_t dflt, struct netif *ni);
S
S/* ICMP */
Svoid snmp_inc_icmpinmsgs(void);
Svoid snmp_inc_icmpinerrors(void);
Svoid snmp_inc_icmpindestunreachs(void);
Svoid snmp_inc_icmpintimeexcds(void);
Svoid snmp_inc_icmpinparmprobs(void);
Svoid snmp_inc_icmpinsrcquenchs(void);
Svoid snmp_inc_icmpinredirects(void);
Svoid snmp_inc_icmpinechos(void);
Svoid snmp_inc_icmpinechoreps(void);
Svoid snmp_inc_icmpintimestamps(void);
Svoid snmp_inc_icmpintimestampreps(void);
Svoid snmp_inc_icmpinaddrmasks(void);
Svoid snmp_inc_icmpinaddrmaskreps(void);
Svoid snmp_inc_icmpoutmsgs(void);
Svoid snmp_inc_icmpouterrors(void);
Svoid snmp_inc_icmpoutdestunreachs(void);
Svoid snmp_inc_icmpouttimeexcds(void);
Svoid snmp_inc_icmpoutparmprobs(void);
Svoid snmp_inc_icmpoutsrcquenchs(void);
Svoid snmp_inc_icmpoutredirects(void); 
Svoid snmp_inc_icmpoutechos(void);
Svoid snmp_inc_icmpoutechoreps(void);
Svoid snmp_inc_icmpouttimestamps(void);
Svoid snmp_inc_icmpouttimestampreps(void);
Svoid snmp_inc_icmpoutaddrmasks(void);
Svoid snmp_inc_icmpoutaddrmaskreps(void);
S
S/* TCP */
Svoid snmp_inc_tcpactiveopens(void);
Svoid snmp_inc_tcppassiveopens(void);
Svoid snmp_inc_tcpattemptfails(void);
Svoid snmp_inc_tcpestabresets(void);
Svoid snmp_inc_tcpinsegs(void);
Svoid snmp_inc_tcpoutsegs(void);
Svoid snmp_inc_tcpretranssegs(void);
Svoid snmp_inc_tcpinerrs(void);
Svoid snmp_inc_tcpoutrsts(void);
S
S/* UDP */
Svoid snmp_inc_udpindatagrams(void);
Svoid snmp_inc_udpnoports(void);
Svoid snmp_inc_udpinerrors(void);
Svoid snmp_inc_udpoutdatagrams(void);
Svoid snmp_insert_udpidx_tree(struct udp_pcb *pcb);
Svoid snmp_delete_udpidx_tree(struct udp_pcb *pcb);
S
S/* SNMP */
Svoid snmp_inc_snmpinpkts(void);
Svoid snmp_inc_snmpoutpkts(void);
Svoid snmp_inc_snmpinbadversions(void);
Svoid snmp_inc_snmpinbadcommunitynames(void);
Svoid snmp_inc_snmpinbadcommunityuses(void);
Svoid snmp_inc_snmpinasnparseerrs(void);
Svoid snmp_inc_snmpintoobigs(void);
Svoid snmp_inc_snmpinnosuchnames(void);
Svoid snmp_inc_snmpinbadvalues(void);
Svoid snmp_inc_snmpinreadonlys(void);
Svoid snmp_inc_snmpingenerrs(void);
Svoid snmp_add_snmpintotalreqvars(u8_t value);
Svoid snmp_add_snmpintotalsetvars(u8_t value);
Svoid snmp_inc_snmpingetrequests(void);
Svoid snmp_inc_snmpingetnexts(void);
Svoid snmp_inc_snmpinsetrequests(void);
Svoid snmp_inc_snmpingetresponses(void);
Svoid snmp_inc_snmpintraps(void);
Svoid snmp_inc_snmpouttoobigs(void);
Svoid snmp_inc_snmpoutnosuchnames(void);
Svoid snmp_inc_snmpoutbadvalues(void);
Svoid snmp_inc_snmpoutgenerrs(void);
Svoid snmp_inc_snmpoutgetrequests(void);
Svoid snmp_inc_snmpoutgetnexts(void);
Svoid snmp_inc_snmpoutsetrequests(void);
Svoid snmp_inc_snmpoutgetresponses(void);
Svoid snmp_inc_snmpouttraps(void);
Svoid snmp_get_snmpgrpid_ptr(struct snmp_obj_id **oid);
Svoid snmp_set_snmpenableauthentraps(u8_t *value);
Svoid snmp_get_snmpenableauthentraps(u8_t *value);
S
S/* LWIP_SNMP support not available */
S/* define everything to be empty */
N#else
N
N/* system */
N#define snmp_set_sysdesr(str, len)
N#define snmp_set_sysobjid(oid);
N#define snmp_get_sysobjid_ptr(oid)
N#define snmp_inc_sysuptime()
N#define snmp_add_sysuptime(value)
N#define snmp_get_sysuptime(value)
N#define snmp_set_syscontact(ocstr, ocstrlen);
N#define snmp_set_sysname(ocstr, ocstrlen);
N#define snmp_set_syslocation(ocstr, ocstrlen);
N
N/* network interface */
N#define snmp_add_ifinoctets(ni,value) 
N#define snmp_inc_ifinucastpkts(ni)
N#define snmp_inc_ifinnucastpkts(ni)
N#define snmp_inc_ifindiscards(ni)
N#define snmp_add_ifoutoctets(ni,value)
N#define snmp_inc_ifoutucastpkts(ni)
N#define snmp_inc_ifoutnucastpkts(ni)
N#define snmp_inc_ifoutdiscards(ni)
N#define snmp_inc_iflist()
N#define snmp_dec_iflist()
N
N/* ARP */
N#define snmp_insert_arpidx_tree(ni,ip)
N#define snmp_delete_arpidx_tree(ni,ip)
N
N/* IP */
N#define snmp_inc_ipinreceives()
N#define snmp_inc_ipinhdrerrors()
N#define snmp_inc_ipinaddrerrors()
N#define snmp_inc_ipforwdatagrams()
N#define snmp_inc_ipinunknownprotos()
N#define snmp_inc_ipindiscards()
N#define snmp_inc_ipindelivers()
N#define snmp_inc_ipoutrequests()
N#define snmp_inc_ipoutdiscards()
N#define snmp_inc_ipoutnoroutes()
N#define snmp_inc_ipreasmreqds()
N#define snmp_inc_ipreasmoks()
N#define snmp_inc_ipreasmfails()
N#define snmp_inc_ipfragoks()
N#define snmp_inc_ipfragfails()
N#define snmp_inc_ipfragcreates()
N#define snmp_inc_iproutingdiscards()
N#define snmp_insert_ipaddridx_tree(ni)
N#define snmp_delete_ipaddridx_tree(ni)
N#define snmp_insert_iprteidx_tree(dflt, ni)
N#define snmp_delete_iprteidx_tree(dflt, ni)
N
N/* ICMP */
N#define snmp_inc_icmpinmsgs()
N#define snmp_inc_icmpinerrors() 
N#define snmp_inc_icmpindestunreachs() 
N#define snmp_inc_icmpintimeexcds()
N#define snmp_inc_icmpinparmprobs() 
N#define snmp_inc_icmpinsrcquenchs() 
N#define snmp_inc_icmpinredirects() 
N#define snmp_inc_icmpinechos() 
N#define snmp_inc_icmpinechoreps()
N#define snmp_inc_icmpintimestamps() 
N#define snmp_inc_icmpintimestampreps()
N#define snmp_inc_icmpinaddrmasks()
N#define snmp_inc_icmpinaddrmaskreps()
N#define snmp_inc_icmpoutmsgs()
N#define snmp_inc_icmpouterrors()
N#define snmp_inc_icmpoutdestunreachs() 
N#define snmp_inc_icmpouttimeexcds() 
N#define snmp_inc_icmpoutparmprobs()
N#define snmp_inc_icmpoutsrcquenchs()
N#define snmp_inc_icmpoutredirects() 
N#define snmp_inc_icmpoutechos() 
N#define snmp_inc_icmpoutechoreps()
N#define snmp_inc_icmpouttimestamps()
N#define snmp_inc_icmpouttimestampreps()
N#define snmp_inc_icmpoutaddrmasks()
N#define snmp_inc_icmpoutaddrmaskreps()
N/* TCP */
N#define snmp_inc_tcpactiveopens()
N#define snmp_inc_tcppassiveopens()
N#define snmp_inc_tcpattemptfails()
N#define snmp_inc_tcpestabresets()
N#define snmp_inc_tcpinsegs()
N#define snmp_inc_tcpoutsegs()
N#define snmp_inc_tcpretranssegs()
N#define snmp_inc_tcpinerrs()
N#define snmp_inc_tcpoutrsts()
N
N/* UDP */
N#define snmp_inc_udpindatagrams()
N#define snmp_inc_udpnoports()
N#define snmp_inc_udpinerrors()
N#define snmp_inc_udpoutdatagrams()
N#define snmp_insert_udpidx_tree(pcb)
N#define snmp_delete_udpidx_tree(pcb)
N
N/* SNMP */
N#define snmp_inc_snmpinpkts()
N#define snmp_inc_snmpoutpkts()
N#define snmp_inc_snmpinbadversions()
N#define snmp_inc_snmpinbadcommunitynames()
N#define snmp_inc_snmpinbadcommunityuses()
N#define snmp_inc_snmpinasnparseerrs()
N#define snmp_inc_snmpintoobigs()
N#define snmp_inc_snmpinnosuchnames()
N#define snmp_inc_snmpinbadvalues()
N#define snmp_inc_snmpinreadonlys()
N#define snmp_inc_snmpingenerrs()
N#define snmp_add_snmpintotalreqvars(value)
N#define snmp_add_snmpintotalsetvars(value)
N#define snmp_inc_snmpingetrequests()
N#define snmp_inc_snmpingetnexts()
N#define snmp_inc_snmpinsetrequests()
N#define snmp_inc_snmpingetresponses()
N#define snmp_inc_snmpintraps()
N#define snmp_inc_snmpouttoobigs()
N#define snmp_inc_snmpoutnosuchnames()
N#define snmp_inc_snmpoutbadvalues()
N#define snmp_inc_snmpoutgenerrs()
N#define snmp_inc_snmpoutgetrequests()
N#define snmp_inc_snmpoutgetnexts()
N#define snmp_inc_snmpoutsetrequests()
N#define snmp_inc_snmpoutgetresponses()
N#define snmp_inc_snmpouttraps()
N#define snmp_get_snmpgrpid_ptr(oid)
N#define snmp_set_snmpenableauthentraps(value)
N#define snmp_get_snmpenableauthentraps(value)
N
N#endif /* LWIP_SNMP */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_SNMP_H__ */
L 54 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/dhcp.h"
L 1 "..\..\lwip\src\include\lwip/dhcp.h" 1
N/** @file
N */
N
N#ifndef __LWIP_DHCP_H__
N#define __LWIP_DHCP_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_DHCP /* don't build if not configured for use in lwipopts.h */
X#if 0  
S
S#include "lwip/netif.h"
S#include "lwip/udp.h"
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/** period (in seconds) of the application calling dhcp_coarse_tmr() */
S#define DHCP_COARSE_TIMER_SECS 60 
S/** period (in milliseconds) of the application calling dhcp_coarse_tmr() */
S#define DHCP_COARSE_TIMER_MSECS (DHCP_COARSE_TIMER_SECS * 1000UL)
S/** period (in milliseconds) of the application calling dhcp_fine_tmr() */
S#define DHCP_FINE_TIMER_MSECS 500 
S
S#define DHCP_CHADDR_LEN 16U
S#define DHCP_SNAME_LEN  64U
S#define DHCP_FILE_LEN   128U
S
Sstruct dhcp
S{
S  /** transaction identifier of last sent request */ 
S  u32_t xid;
S  /** our connection to the DHCP server */ 
S  struct udp_pcb *pcb;
S  /** incoming msg */
S  struct dhcp_msg *msg_in;
S  /** current DHCP state machine state */
S  u8_t state;
S  /** retries of current request */
S  u8_t tries;
S#if LWIP_DHCP_AUTOIP_COOP
S  u8_t autoip_coop_state;
S#endif
S  u8_t subnet_mask_given;
S
S  struct pbuf *p_out; /* pbuf of outcoming msg */
S  struct dhcp_msg *msg_out; /* outgoing msg */
S  u16_t options_out_len; /* outgoing msg options length */
S  u16_t request_timeout; /* #ticks with period DHCP_FINE_TIMER_SECS for request timeout */
S  u16_t t1_timeout;  /* #ticks with period DHCP_COARSE_TIMER_SECS for renewal time */
S  u16_t t2_timeout;  /* #ticks with period DHCP_COARSE_TIMER_SECS for rebind time */
S  ip_addr_t server_ip_addr; /* dhcp server address that offered this lease */
S  ip_addr_t offered_ip_addr;
S  ip_addr_t offered_sn_mask;
S  ip_addr_t offered_gw_addr;
S 
S  u32_t offered_t0_lease; /* lease period (in seconds) */
S  u32_t offered_t1_renew; /* recommended renew time (usually 50% of lease period) */
S  u32_t offered_t2_rebind; /* recommended rebind time (usually 66% of lease period)  */
S  /* @todo: LWIP_DHCP_BOOTP_FILE configuration option?
S     integrate with possible TFTP-client for booting? */
S#if LWIP_DHCP_BOOTP_FILE
S  ip_addr_t offered_si_addr;
S  char boot_file_name[DHCP_FILE_LEN];
S#endif /* LWIP_DHCP_BOOTPFILE */
S};
S
S/* MUST be compiled with "pack structs" or equivalent! */
S#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/bpstruct.h"
S#endif
SPACK_STRUCT_BEGIN
S/** minimum set of fields of any DHCP message */
Sstruct dhcp_msg
S{
S  PACK_STRUCT_FIELD(u8_t op);
S  PACK_STRUCT_FIELD(u8_t htype);
S  PACK_STRUCT_FIELD(u8_t hlen);
S  PACK_STRUCT_FIELD(u8_t hops);
S  PACK_STRUCT_FIELD(u32_t xid);
S  PACK_STRUCT_FIELD(u16_t secs);
S  PACK_STRUCT_FIELD(u16_t flags);
S  PACK_STRUCT_FIELD(ip_addr_p_t ciaddr);
S  PACK_STRUCT_FIELD(ip_addr_p_t yiaddr);
S  PACK_STRUCT_FIELD(ip_addr_p_t siaddr);
S  PACK_STRUCT_FIELD(ip_addr_p_t giaddr);
S  PACK_STRUCT_FIELD(u8_t chaddr[DHCP_CHADDR_LEN]);
S  PACK_STRUCT_FIELD(u8_t sname[DHCP_SNAME_LEN]);
S  PACK_STRUCT_FIELD(u8_t file[DHCP_FILE_LEN]);
S  PACK_STRUCT_FIELD(u32_t cookie);
S#define DHCP_MIN_OPTIONS_LEN 68U
S/** make sure user does not configure this too small */
S#if ((defined(DHCP_OPTIONS_LEN)) && (DHCP_OPTIONS_LEN < DHCP_MIN_OPTIONS_LEN))
S#  undef DHCP_OPTIONS_LEN
S#endif
S/** allow this to be configured in lwipopts.h, but not too small */
S#if (!defined(DHCP_OPTIONS_LEN))
S/** set this to be sufficient for your options in outgoing DHCP msgs */
S#  define DHCP_OPTIONS_LEN DHCP_MIN_OPTIONS_LEN
S#endif
S  PACK_STRUCT_FIELD(u8_t options[DHCP_OPTIONS_LEN]);
S} PACK_STRUCT_STRUCT;
SPACK_STRUCT_END
S#ifdef PACK_STRUCT_USE_INCLUDES
S#  include "arch/epstruct.h"
S#endif
S
Svoid dhcp_set_struct(struct netif *netif, struct dhcp *dhcp);
S/** Remove a struct dhcp previously set to the netif using dhcp_set_struct() */
S#define dhcp_remove_struct(netif) do { (netif)->dhcp = NULL; } while(0)
Svoid dhcp_cleanup(struct netif *netif);
S/** start DHCP configuration */
Serr_t dhcp_start(struct netif *netif);
S/** enforce early lease renewal (not needed normally)*/
Serr_t dhcp_renew(struct netif *netif);
S/** release the DHCP lease, usually called before dhcp_stop()*/
Serr_t dhcp_release(struct netif *netif);
S/** stop DHCP configuration */
Svoid dhcp_stop(struct netif *netif);
S/** inform server of our manual IP address */
Svoid dhcp_inform(struct netif *netif);
S/** Handle a possible change in the network configuration */
Svoid dhcp_network_changed(struct netif *netif);
S
S/** if enabled, check whether the offered IP address is not in use, using ARP */
S#if DHCP_DOES_ARP_CHECK
Svoid dhcp_arp_reply(struct netif *netif, ip_addr_t *addr);
S#endif
S
S/** to be called every minute */
Svoid dhcp_coarse_tmr(void);
S/** to be called every half second */
Svoid dhcp_fine_tmr(void);
S 
S/** DHCP message item offsets and length */
S#define DHCP_OP_OFS       0
S#define DHCP_HTYPE_OFS    1
S#define DHCP_HLEN_OFS     2
S#define DHCP_HOPS_OFS     3
S#define DHCP_XID_OFS      4
S#define DHCP_SECS_OFS     8
S#define DHCP_FLAGS_OFS    10
S#define DHCP_CIADDR_OFS   12
S#define DHCP_YIADDR_OFS   16
S#define DHCP_SIADDR_OFS   20
S#define DHCP_GIADDR_OFS   24
S#define DHCP_CHADDR_OFS   28
S#define DHCP_SNAME_OFS    44
S#define DHCP_FILE_OFS     108
S#define DHCP_MSG_LEN      236
S
S#define DHCP_COOKIE_OFS   DHCP_MSG_LEN
S#define DHCP_OPTIONS_OFS  (DHCP_MSG_LEN + 4)
S
S#define DHCP_CLIENT_PORT  68  
S#define DHCP_SERVER_PORT  67
S
S/** DHCP client states */
S#define DHCP_OFF          0
S#define DHCP_REQUESTING   1
S#define DHCP_INIT         2
S#define DHCP_REBOOTING    3
S#define DHCP_REBINDING    4
S#define DHCP_RENEWING     5
S#define DHCP_SELECTING    6
S#define DHCP_INFORMING    7
S#define DHCP_CHECKING     8
S#define DHCP_PERMANENT    9
S#define DHCP_BOUND        10
S/** not yet implemented #define DHCP_RELEASING 11 */
S#define DHCP_BACKING_OFF  12
S
S/** AUTOIP cooperatation flags */
S#define DHCP_AUTOIP_COOP_STATE_OFF  0
S#define DHCP_AUTOIP_COOP_STATE_ON   1
S 
S#define DHCP_BOOTREQUEST  1
S#define DHCP_BOOTREPLY    2
S
S/** DHCP message types */
S#define DHCP_DISCOVER 1
S#define DHCP_OFFER    2
S#define DHCP_REQUEST  3
S#define DHCP_DECLINE  4
S#define DHCP_ACK      5
S#define DHCP_NAK      6
S#define DHCP_RELEASE  7
S#define DHCP_INFORM   8
S
S/** DHCP hardware type, currently only ethernet is supported */
S#define DHCP_HTYPE_ETH 1
S
S#define DHCP_MAGIC_COOKIE 0x63825363UL
S
S/* This is a list of options for BOOTP and DHCP, see RFC 2132 for descriptions */
S
S/** BootP options */
S#define DHCP_OPTION_PAD 0
S#define DHCP_OPTION_SUBNET_MASK 1 /* RFC 2132 3.3 */
S#define DHCP_OPTION_ROUTER 3
S#define DHCP_OPTION_DNS_SERVER 6 
S#define DHCP_OPTION_HOSTNAME 12
S#define DHCP_OPTION_IP_TTL 23
S#define DHCP_OPTION_MTU 26
S#define DHCP_OPTION_BROADCAST 28
S#define DHCP_OPTION_TCP_TTL 37
S#define DHCP_OPTION_END 255
S
S/** DHCP options */
S#define DHCP_OPTION_REQUESTED_IP 50 /* RFC 2132 9.1, requested IP address */
S#define DHCP_OPTION_LEASE_TIME 51 /* RFC 2132 9.2, time in seconds, in 4 bytes */
S#define DHCP_OPTION_OVERLOAD 52 /* RFC2132 9.3, use file and/or sname field for options */
S
S#define DHCP_OPTION_MESSAGE_TYPE 53 /* RFC 2132 9.6, important for DHCP */
S#define DHCP_OPTION_MESSAGE_TYPE_LEN 1
S
S#define DHCP_OPTION_SERVER_ID 54 /* RFC 2132 9.7, server IP address */
S#define DHCP_OPTION_PARAMETER_REQUEST_LIST 55 /* RFC 2132 9.8, requested option types */
S
S#define DHCP_OPTION_MAX_MSG_SIZE 57 /* RFC 2132 9.10, message size accepted >= 576 */
S#define DHCP_OPTION_MAX_MSG_SIZE_LEN 2
S
S#define DHCP_OPTION_T1 58 /* T1 renewal time */
S#define DHCP_OPTION_T2 59 /* T2 rebinding time */
S#define DHCP_OPTION_US 60
S#define DHCP_OPTION_CLIENT_ID 61
S#define DHCP_OPTION_TFTP_SERVERNAME 66
S#define DHCP_OPTION_BOOTFILE 67
S
S/** possible combinations of overloading the file and sname fields with options */
S#define DHCP_OVERLOAD_NONE 0
S#define DHCP_OVERLOAD_FILE 1
S#define DHCP_OVERLOAD_SNAME  2
S#define DHCP_OVERLOAD_SNAME_FILE 3
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* LWIP_DHCP */
N
N#endif /*__LWIP_DHCP_H__*/
L 55 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/autoip.h"
L 1 "..\..\lwip\src\include\ipv4\lwip/autoip.h" 1
N/**
N * @file
N *
N * AutoIP Automatic LinkLocal IP Configuration
N */
N
N/*
N *
N * Copyright (c) 2007 Dominik Spies <kontakt@dspies.de>
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
N * OF SUCH DAMAGE.
N *
N * Author: Dominik Spies <kontakt@dspies.de>
N *
N * This is a AutoIP implementation for the lwIP TCP/IP stack. It aims to conform
N * with RFC 3927.
N *
N *
N * Please coordinate changes and requests with Dominik Spies
N * <kontakt@dspies.de>
N */
N 
N#ifndef __LWIP_AUTOIP_H__
N#define __LWIP_AUTOIP_H__
N
N#include "lwip/opt.h"
N
N#if LWIP_AUTOIP /* don't build if not configured for use in lwipopts.h */
X#if 0  
S
S#include "lwip/netif.h"
S#include "lwip/udp.h"
S#include "netif/etharp.h"
S
S#ifdef __cplusplus
Sextern "C" {
S#endif
S
S/* AutoIP Timing */
S#define AUTOIP_TMR_INTERVAL      100
S#define AUTOIP_TICKS_PER_SECOND (1000 / AUTOIP_TMR_INTERVAL)
S
S/* RFC 3927 Constants */
S#define PROBE_WAIT               1   /* second   (initial random delay)                 */
S#define PROBE_MIN                1   /* second   (minimum delay till repeated probe)    */
S#define PROBE_MAX                2   /* seconds  (maximum delay till repeated probe)    */
S#define PROBE_NUM                3   /*          (number of probe packets)              */
S#define ANNOUNCE_NUM             2   /*          (number of announcement packets)       */
S#define ANNOUNCE_INTERVAL        2   /* seconds  (time between announcement packets)    */
S#define ANNOUNCE_WAIT            2   /* seconds  (delay before announcing)              */
S#define MAX_CONFLICTS            10  /*          (max conflicts before rate limiting)   */
S#define RATE_LIMIT_INTERVAL      60  /* seconds  (delay between successive attempts)    */
S#define DEFEND_INTERVAL          10  /* seconds  (min. wait between defensive ARPs)     */
S
S/* AutoIP client states */
S#define AUTOIP_STATE_OFF         0
S#define AUTOIP_STATE_PROBING     1
S#define AUTOIP_STATE_ANNOUNCING  2
S#define AUTOIP_STATE_BOUND       3
S
Sstruct autoip
S{
S  ip_addr_t llipaddr;       /* the currently selected, probed, announced or used LL IP-Address */
S  u8_t state;               /* current AutoIP state machine state */
S  u8_t sent_num;            /* sent number of probes or announces, dependent on state */
S  u16_t ttw;                /* ticks to wait, tick is AUTOIP_TMR_INTERVAL long */
S  u8_t lastconflict;        /* ticks until a conflict can be solved by defending */
S  u8_t tried_llipaddr;      /* total number of probed/used Link Local IP-Addresses */
S};
S
S
S#define autoip_init() /* Compatibility define, no init needed. */
S
S/** Set a struct autoip allocated by the application to work with */
Svoid autoip_set_struct(struct netif *netif, struct autoip *autoip);
S
S/** Start AutoIP client */
Serr_t autoip_start(struct netif *netif);
S
S/** Stop AutoIP client */
Serr_t autoip_stop(struct netif *netif);
S
S/** Handles every incoming ARP Packet, called by etharp_arp_input */
Svoid autoip_arp_reply(struct netif *netif, struct etharp_hdr *hdr);
S
S/** Has to be called in loop every AUTOIP_TMR_INTERVAL milliseconds */
Svoid autoip_tmr(void);
S
S/** Handle a possible change in the network configuration */
Svoid autoip_network_changed(struct netif *netif);
S
S#ifdef __cplusplus
S}
S#endif
S
N#endif /* LWIP_AUTOIP */
N
N#endif /* __LWIP_AUTOIP_H__ */
L 56 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "lwip/stats.h"
L 1 "..\..\lwip\src\include\lwip/stats.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N#ifndef __LWIP_STATS_H__
N#define __LWIP_STATS_H__
N
N#include "lwip/opt.h"
N
N#include "lwip/mem.h"
N#include "lwip/memp.h"
L 1 "..\..\lwip\src\include\lwip/memp.h" 1
N/*
N * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
N * All rights reserved. 
N * 
N * Redistribution and use in source and binary forms, with or without modification, 
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice,
N *    this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright notice,
N *    this list of conditions and the following disclaimer in the documentation
N *    and/or other materials provided with the distribution.
N * 3. The name of the author may not be used to endorse or promote products
N *    derived from this software without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
N * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
N * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
N * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
N * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
N * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
N * OF SUCH DAMAGE.
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N */
N
N#ifndef __LWIP_MEMP_H__
N#define __LWIP_MEMP_H__
N
N#include "lwip/opt.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Create the list of all memory pools managed by memp. MEMP_MAX represents a NULL pool at the end */
Ntypedef enum {
N#define LWIP_MEMPOOL(name,num,size,desc)  MEMP_##name,
N#include "lwip/memp_std.h"
L 1 "..\..\lwip\src\include\lwip/memp_std.h" 1
N/*
N * SETUP: Make sure we define everything we will need.
N *
N * We have create three types of pools:
N *   1) MEMPOOL - standard pools
N *   2) MALLOC_MEMPOOL - to be used by mem_malloc in mem.c
N *   3) PBUF_MEMPOOL - a mempool of pbuf's, so include space for the pbuf struct
N *
N * If the include'r doesn't require any special treatment of each of the types
N * above, then will declare #2 & #3 to be just standard mempools.
N */
N#ifndef LWIP_MALLOC_MEMPOOL
N/* This treats "malloc pools" just like any other pool.
N   The pools are a little bigger to provide 'size' as the amount of user data. */
N#define LWIP_MALLOC_MEMPOOL(num, size) LWIP_MEMPOOL(POOL_##size, num, (size + sizeof(struct memp_malloc_helper)), "MALLOC_"#size)
N#define LWIP_MALLOC_MEMPOOL_START
N#define LWIP_MALLOC_MEMPOOL_END
N#endif /* LWIP_MALLOC_MEMPOOL */ 
N
N#ifndef LWIP_PBUF_MEMPOOL
N/* This treats "pbuf pools" just like any other pool.
N * Allocates buffers for a pbuf struct AND a payload size */
N#define LWIP_PBUF_MEMPOOL(name, num, payload, desc) LWIP_MEMPOOL(name, num, (MEMP_ALIGN_SIZE(sizeof(struct pbuf)) + MEMP_ALIGN_SIZE(payload)), desc)
N#endif /* LWIP_PBUF_MEMPOOL */
N
N
N/*
N * A list of internal pools used by LWIP.
N *
N * LWIP_MEMPOOL(pool_name, number_elements, element_size, pool_description)
N *     creates a pool name MEMP_pool_name. description is used in stats.c
N */
N#if LWIP_RAW
X#if 1
NLWIP_MEMPOOL(RAW_PCB,        MEMP_NUM_RAW_PCB,         sizeof(struct raw_pcb),        "RAW_PCB")
XMEMP_RAW_PCB,
N#endif /* LWIP_RAW */
N
N#if LWIP_UDP
X#if 1
NLWIP_MEMPOOL(UDP_PCB,        MEMP_NUM_UDP_PCB,         sizeof(struct udp_pcb),        "UDP_PCB")
XMEMP_UDP_PCB,
N#endif /* LWIP_UDP */
N
N#if LWIP_TCP
X#if 1
NLWIP_MEMPOOL(TCP_PCB,        MEMP_NUM_TCP_PCB,         sizeof(struct tcp_pcb),        "TCP_PCB")
XMEMP_TCP_PCB,
NLWIP_MEMPOOL(TCP_PCB_LISTEN, MEMP_NUM_TCP_PCB_LISTEN,  sizeof(struct tcp_pcb_listen), "TCP_PCB_LISTEN")
XMEMP_TCP_PCB_LISTEN,
NLWIP_MEMPOOL(TCP_SEG,        MEMP_NUM_TCP_SEG,         sizeof(struct tcp_seg),        "TCP_SEG")
XMEMP_TCP_SEG,
N#endif /* LWIP_TCP */
N
N#if IP_REASSEMBLY
X#if 1
NLWIP_MEMPOOL(REASSDATA,      MEMP_NUM_REASSDATA,       sizeof(struct ip_reassdata),   "REASSDATA")
XMEMP_REASSDATA,
N#endif /* IP_REASSEMBLY */
N#if IP_FRAG && !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
X#if 1 && !0 && !0
NLWIP_MEMPOOL(FRAG_PBUF,      MEMP_NUM_FRAG_PBUF,       sizeof(struct pbuf_custom_ref),"FRAG_PBUF")
XMEMP_FRAG_PBUF,
N#endif /* IP_FRAG && !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF */
N
N#if LWIP_NETCONN
X#if 0
SLWIP_MEMPOOL(NETBUF,         MEMP_NUM_NETBUF,          sizeof(struct netbuf),         "NETBUF")
SLWIP_MEMPOOL(NETCONN,        MEMP_NUM_NETCONN,         sizeof(struct netconn),        "NETCONN")
N#endif /* LWIP_NETCONN */
N
N#if NO_SYS==0
X#if 1==0
SLWIP_MEMPOOL(TCPIP_MSG_API,  MEMP_NUM_TCPIP_MSG_API,   sizeof(struct tcpip_msg),      "TCPIP_MSG_API")
S#if !LWIP_TCPIP_CORE_LOCKING_INPUT
SLWIP_MEMPOOL(TCPIP_MSG_INPKT,MEMP_NUM_TCPIP_MSG_INPKT, sizeof(struct tcpip_msg),      "TCPIP_MSG_INPKT")
S#endif /* !LWIP_TCPIP_CORE_LOCKING_INPUT */
N#endif /* NO_SYS==0 */
N
N#if LWIP_ARP && ARP_QUEUEING
X#if 1 && 0
SLWIP_MEMPOOL(ARP_QUEUE,      MEMP_NUM_ARP_QUEUE,       sizeof(struct etharp_q_entry), "ARP_QUEUE")
N#endif /* LWIP_ARP && ARP_QUEUEING */
N
N#if LWIP_IGMP
X#if 0
SLWIP_MEMPOOL(IGMP_GROUP,     MEMP_NUM_IGMP_GROUP,      sizeof(struct igmp_group),     "IGMP_GROUP")
N#endif /* LWIP_IGMP */
N
N#if (!NO_SYS || (NO_SYS && !NO_SYS_NO_TIMERS)) /* LWIP_TIMERS */
X#if (!1 || (1 && !0))  
NLWIP_MEMPOOL(SYS_TIMEOUT,    MEMP_NUM_SYS_TIMEOUT,     sizeof(struct sys_timeo),      "SYS_TIMEOUT")
XMEMP_SYS_TIMEOUT,
N#endif /* LWIP_TIMERS */
N
N#if LWIP_SNMP
X#if 0
SLWIP_MEMPOOL(SNMP_ROOTNODE,  MEMP_NUM_SNMP_ROOTNODE,   sizeof(struct mib_list_rootnode), "SNMP_ROOTNODE")
SLWIP_MEMPOOL(SNMP_NODE,      MEMP_NUM_SNMP_NODE,       sizeof(struct mib_list_node),     "SNMP_NODE")
SLWIP_MEMPOOL(SNMP_VARBIND,   MEMP_NUM_SNMP_VARBIND,    sizeof(struct snmp_varbind),      "SNMP_VARBIND")
SLWIP_MEMPOOL(SNMP_VALUE,     MEMP_NUM_SNMP_VALUE,      SNMP_MAX_VALUE_SIZE,              "SNMP_VALUE")
N#endif /* LWIP_SNMP */
N#if LWIP_DNS && LWIP_SOCKET
X#if 0 && 0
SLWIP_MEMPOOL(NETDB,          MEMP_NUM_NETDB,           NETDB_ELEM_SIZE,               "NETDB")
N#endif /* LWIP_DNS && LWIP_SOCKET */
N#if LWIP_DNS && DNS_LOCAL_HOSTLIST && DNS_LOCAL_HOSTLIST_IS_DYNAMIC
X#if 0 && 0 && 0
SLWIP_MEMPOOL(LOCALHOSTLIST,  MEMP_NUM_LOCALHOSTLIST,   LOCALHOSTLIST_ELEM_SIZE,       "LOCALHOSTLIST")
N#endif /* LWIP_DNS && DNS_LOCAL_HOSTLIST && DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
N#if PPP_SUPPORT && PPPOE_SUPPORT
X#if 0 && 0
SLWIP_MEMPOOL(PPPOE_IF,      MEMP_NUM_PPPOE_INTERFACES, sizeof(struct pppoe_softc),    "PPPOE_IF")
N#endif /* PPP_SUPPORT && PPPOE_SUPPORT */
N
N/*
N * A list of pools of pbuf's used by LWIP.
N *
N * LWIP_PBUF_MEMPOOL(pool_name, number_elements, pbuf_payload_size, pool_description)
N *     creates a pool name MEMP_pool_name. description is used in stats.c
N *     This allocates enough space for the pbuf struct and a payload.
N *     (Example: pbuf_payload_size=0 allocates only size for the struct)
N */
NLWIP_PBUF_MEMPOOL(PBUF,      MEMP_NUM_PBUF,            0,                             "PBUF_REF/ROM")
XMEMP_PBUF,
NLWIP_PBUF_MEMPOOL(PBUF_POOL, PBUF_POOL_SIZE,           PBUF_POOL_BUFSIZE,             "PBUF_POOL")
XMEMP_PBUF_POOL,
N
N
N/*
N * Allow for user-defined pools; this must be explicitly set in lwipopts.h
N * since the default is to NOT look for lwippools.h
N */
N#if MEMP_USE_CUSTOM_POOLS
X#if 0
S#include "lwippools.h"
N#endif /* MEMP_USE_CUSTOM_POOLS */
N
N/*
N * REQUIRED CLEANUP: Clear up so we don't get "multiply defined" error later
N * (#undef is ignored for something that is not defined)
N */
N#undef LWIP_MEMPOOL
N#undef LWIP_MALLOC_MEMPOOL
N#undef LWIP_MALLOC_MEMPOOL_START
N#undef LWIP_MALLOC_MEMPOOL_END
N#undef LWIP_PBUF_MEMPOOL
L 46 "..\..\lwip\src\include\lwip/memp.h" 2
N  MEMP_MAX
N} memp_t;
N
N#if MEM_USE_POOLS
X#if 0
S/* Use a helper type to get the start and end of the user "memory pools" for mem_malloc */
Stypedef enum {
S    /* Get the first (via:
S       MEMP_POOL_HELPER_START = ((u8_t) 1*MEMP_POOL_A + 0*MEMP_POOL_B + 0*MEMP_POOL_C + 0)*/
S    MEMP_POOL_HELPER_FIRST = ((u8_t)
S#define LWIP_MEMPOOL(name,num,size,desc)
S#define LWIP_MALLOC_MEMPOOL_START 1
S#define LWIP_MALLOC_MEMPOOL(num, size) * MEMP_POOL_##size + 0
S#define LWIP_MALLOC_MEMPOOL_END
S#include "lwip/memp_std.h"
S    ) ,
S    /* Get the last (via:
S       MEMP_POOL_HELPER_END = ((u8_t) 0 + MEMP_POOL_A*0 + MEMP_POOL_B*0 + MEMP_POOL_C*1) */
S    MEMP_POOL_HELPER_LAST = ((u8_t)
S#define LWIP_MEMPOOL(name,num,size,desc)
S#define LWIP_MALLOC_MEMPOOL_START
S#define LWIP_MALLOC_MEMPOOL(num, size) 0 + MEMP_POOL_##size *
S#define LWIP_MALLOC_MEMPOOL_END 1
S#include "lwip/memp_std.h"
S    )
S} memp_pool_helper_t;
S
S/* The actual start and stop values are here (cast them over)
S   We use this helper type and these defines so we can avoid using const memp_t values */
S#define MEMP_POOL_FIRST ((memp_t) MEMP_POOL_HELPER_FIRST)
S#define MEMP_POOL_LAST   ((memp_t) MEMP_POOL_HELPER_LAST)
N#endif /* MEM_USE_POOLS */
N
N#if MEMP_MEM_MALLOC || MEM_USE_POOLS
X#if 0 || 0
Sextern const u16_t memp_sizes[MEMP_MAX];
N#endif /* MEMP_MEM_MALLOC || MEM_USE_POOLS */
N
N#if MEMP_MEM_MALLOC
X#if 0
S
S#include "mem.h"
S
S#define memp_init()
S#define memp_malloc(type)     mem_malloc(memp_sizes[type])
S#define memp_free(type, mem)  mem_free(mem)
S
N#else /* MEMP_MEM_MALLOC */
N
N#if MEM_USE_POOLS
X#if 0
S/** This structure is used to save the pool one element came from. */
Sstruct memp_malloc_helper
S{
S   memp_t poolnr;
S};
N#endif /* MEM_USE_POOLS */
N
Nvoid  memp_init(void);
N
N#if MEMP_OVERFLOW_CHECK
X#if 0
Svoid *memp_malloc_fn(memp_t type, const char* file, const int line);
S#define memp_malloc(t) memp_malloc_fn((t), __FILE__, __LINE__)
N#else
Nvoid *memp_malloc(memp_t type);
N#endif
Nvoid  memp_free(memp_t type, void *mem);
N
N#endif /* MEMP_MEM_MALLOC */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_MEMP_H__ */
L 39 "..\..\lwip\src\include\lwip/stats.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#if LWIP_STATS
X#if 1
N
N#ifndef LWIP_STATS_LARGE
N#define LWIP_STATS_LARGE 0
N#endif
N
N#if LWIP_STATS_LARGE
X#if 0
S#define STAT_COUNTER     u32_t
S#define STAT_COUNTER_F   U32_F
N#else
N#define STAT_COUNTER     u16_t
N#define STAT_COUNTER_F   U16_F
N#endif 
N
Nstruct stats_proto {
N  STAT_COUNTER xmit;             /* Transmitted packets. */
X  u16_t xmit;              
N  STAT_COUNTER recv;             /* Received packets. */
X  u16_t recv;              
N  STAT_COUNTER fw;               /* Forwarded packets. */
X  u16_t fw;                
N  STAT_COUNTER drop;             /* Dropped packets. */
X  u16_t drop;              
N  STAT_COUNTER chkerr;           /* Checksum error. */
X  u16_t chkerr;            
N  STAT_COUNTER lenerr;           /* Invalid length error. */
X  u16_t lenerr;            
N  STAT_COUNTER memerr;           /* Out of memory error. */
X  u16_t memerr;            
N  STAT_COUNTER rterr;            /* Routing error. */
X  u16_t rterr;             
N  STAT_COUNTER proterr;          /* Protocol error. */
X  u16_t proterr;           
N  STAT_COUNTER opterr;           /* Error in options. */
X  u16_t opterr;            
N  STAT_COUNTER err;              /* Misc error. */
X  u16_t err;               
N  STAT_COUNTER cachehit;
X  u16_t cachehit;
N};
N
Nstruct stats_igmp {
N  STAT_COUNTER xmit;             /* Transmitted packets. */
X  u16_t xmit;              
N  STAT_COUNTER recv;             /* Received packets. */
X  u16_t recv;              
N  STAT_COUNTER drop;             /* Dropped packets. */
X  u16_t drop;              
N  STAT_COUNTER chkerr;           /* Checksum error. */
X  u16_t chkerr;            
N  STAT_COUNTER lenerr;           /* Invalid length error. */
X  u16_t lenerr;            
N  STAT_COUNTER memerr;           /* Out of memory error. */
X  u16_t memerr;            
N  STAT_COUNTER proterr;          /* Protocol error. */
X  u16_t proterr;           
N  STAT_COUNTER rx_v1;            /* Received v1 frames. */
X  u16_t rx_v1;             
N  STAT_COUNTER rx_group;         /* Received group-specific queries. */
X  u16_t rx_group;          
N  STAT_COUNTER rx_general;       /* Received general queries. */
X  u16_t rx_general;        
N  STAT_COUNTER rx_report;        /* Received reports. */
X  u16_t rx_report;         
N  STAT_COUNTER tx_join;          /* Sent joins. */
X  u16_t tx_join;           
N  STAT_COUNTER tx_leave;         /* Sent leaves. */
X  u16_t tx_leave;          
N  STAT_COUNTER tx_report;        /* Sent reports. */
X  u16_t tx_report;         
N};
N
Nstruct stats_mem {
N#ifdef LWIP_DEBUG
N  const char *name;
N#endif /* LWIP_DEBUG */
N  mem_size_t avail;
N  mem_size_t used;
N  mem_size_t max;
N  STAT_COUNTER err;
X  u16_t err;
N  STAT_COUNTER illegal;
X  u16_t illegal;
N};
N
Nstruct stats_syselem {
N  STAT_COUNTER used;
X  u16_t used;
N  STAT_COUNTER max;
X  u16_t max;
N  STAT_COUNTER err;
X  u16_t err;
N};
N
Nstruct stats_sys {
N  struct stats_syselem sem;
N  struct stats_syselem mutex;
N  struct stats_syselem mbox;
N};
N
Nstruct stats_ {
N#if LINK_STATS
X#if 1
N  struct stats_proto link;
N#endif
N#if ETHARP_STATS
X#if (1)
N  struct stats_proto etharp;
N#endif
N#if IPFRAG_STATS
X#if (1 || 1)
N  struct stats_proto ip_frag;
N#endif
N#if IP_STATS
X#if 1
N  struct stats_proto ip;
N#endif
N#if ICMP_STATS
X#if 1
N  struct stats_proto icmp;
N#endif
N#if IGMP_STATS
X#if (0)
S  struct stats_igmp igmp;
N#endif
N#if UDP_STATS
X#if (1)
N  struct stats_proto udp;
N#endif
N#if TCP_STATS
X#if (1)
N  struct stats_proto tcp;
N#endif
N#if MEM_STATS
X#if ((0 == 0) && (0 == 0))
N  struct stats_mem mem;
N#endif
N#if MEMP_STATS
X#if (0 == 0)
N  struct stats_mem memp[MEMP_MAX];
N#endif
N#if SYS_STATS
X#if (1 == 0)
S  struct stats_sys sys;
N#endif
N};
N
Nextern struct stats_ lwip_stats;
N
Nvoid stats_init(void);
N
N#define STATS_INC(x) ++lwip_stats.x
N#define STATS_DEC(x) --lwip_stats.x
N#define STATS_INC_USED(x, y) do { lwip_stats.x.used += y; \
N                                if (lwip_stats.x.max < lwip_stats.x.used) { \
N                                    lwip_stats.x.max = lwip_stats.x.used; \
N                                } \
N                             } while(0)
X#define STATS_INC_USED(x, y) do { lwip_stats.x.used += y;                                 if (lwip_stats.x.max < lwip_stats.x.used) {                                     lwip_stats.x.max = lwip_stats.x.used;                                 }                              } while(0)
N#else /* LWIP_STATS */
S#define stats_init()
S#define STATS_INC(x)
S#define STATS_DEC(x)
S#define STATS_INC_USED(x)
N#endif /* LWIP_STATS */
N
N#if TCP_STATS
X#if (1)
N#define TCP_STATS_INC(x) STATS_INC(x)
N#define TCP_STATS_DISPLAY() stats_display_proto(&lwip_stats.tcp, "TCP")
N#else
S#define TCP_STATS_INC(x)
S#define TCP_STATS_DISPLAY()
N#endif
N
N#if UDP_STATS
X#if (1)
N#define UDP_STATS_INC(x) STATS_INC(x)
N#define UDP_STATS_DISPLAY() stats_display_proto(&lwip_stats.udp, "UDP")
N#else
S#define UDP_STATS_INC(x)
S#define UDP_STATS_DISPLAY()
N#endif
N
N#if ICMP_STATS
X#if 1
N#define ICMP_STATS_INC(x) STATS_INC(x)
N#define ICMP_STATS_DISPLAY() stats_display_proto(&lwip_stats.icmp, "ICMP")
N#else
S#define ICMP_STATS_INC(x)
S#define ICMP_STATS_DISPLAY()
N#endif
N
N#if IGMP_STATS
X#if (0)
S#define IGMP_STATS_INC(x) STATS_INC(x)
S#define IGMP_STATS_DISPLAY() stats_display_igmp(&lwip_stats.igmp)
N#else
N#define IGMP_STATS_INC(x)
N#define IGMP_STATS_DISPLAY()
N#endif
N
N#if IP_STATS
X#if 1
N#define IP_STATS_INC(x) STATS_INC(x)
N#define IP_STATS_DISPLAY() stats_display_proto(&lwip_stats.ip, "IP")
N#else
S#define IP_STATS_INC(x)
S#define IP_STATS_DISPLAY()
N#endif
N
N#if IPFRAG_STATS
X#if (1 || 1)
N#define IPFRAG_STATS_INC(x) STATS_INC(x)
N#define IPFRAG_STATS_DISPLAY() stats_display_proto(&lwip_stats.ip_frag, "IP_FRAG")
N#else
S#define IPFRAG_STATS_INC(x)
S#define IPFRAG_STATS_DISPLAY()
N#endif
N
N#if ETHARP_STATS
X#if (1)
N#define ETHARP_STATS_INC(x) STATS_INC(x)
N#define ETHARP_STATS_DISPLAY() stats_display_proto(&lwip_stats.etharp, "ETHARP")
N#else
S#define ETHARP_STATS_INC(x)
S#define ETHARP_STATS_DISPLAY()
N#endif
N
N#if LINK_STATS
X#if 1
N#define LINK_STATS_INC(x) STATS_INC(x)
N#define LINK_STATS_DISPLAY() stats_display_proto(&lwip_stats.link, "LINK")
N#else
S#define LINK_STATS_INC(x)
S#define LINK_STATS_DISPLAY()
N#endif
N
N#if MEM_STATS
X#if ((0 == 0) && (0 == 0))
N#define MEM_STATS_AVAIL(x, y) lwip_stats.mem.x = y
N#define MEM_STATS_INC(x) STATS_INC(mem.x)
N#define MEM_STATS_INC_USED(x, y) STATS_INC_USED(mem, y)
N#define MEM_STATS_DEC_USED(x, y) lwip_stats.mem.x -= y
N#define MEM_STATS_DISPLAY() stats_display_mem(&lwip_stats.mem, "HEAP")
N#else
S#define MEM_STATS_AVAIL(x, y)
S#define MEM_STATS_INC(x)
S#define MEM_STATS_INC_USED(x, y)
S#define MEM_STATS_DEC_USED(x, y)
S#define MEM_STATS_DISPLAY()
N#endif
N
N#if MEMP_STATS
X#if (0 == 0)
N#define MEMP_STATS_AVAIL(x, i, y) lwip_stats.memp[i].x = y
N#define MEMP_STATS_INC(x, i) STATS_INC(memp[i].x)
N#define MEMP_STATS_DEC(x, i) STATS_DEC(memp[i].x)
N#define MEMP_STATS_INC_USED(x, i) STATS_INC_USED(memp[i], 1)
N#define MEMP_STATS_DISPLAY(i) stats_display_memp(&lwip_stats.memp[i], i)
N#else
S#define MEMP_STATS_AVAIL(x, i, y)
S#define MEMP_STATS_INC(x, i)
S#define MEMP_STATS_DEC(x, i)
S#define MEMP_STATS_INC_USED(x, i)
S#define MEMP_STATS_DISPLAY(i)
N#endif
N
N#if SYS_STATS
X#if (1 == 0)
S#define SYS_STATS_INC(x) STATS_INC(sys.x)
S#define SYS_STATS_DEC(x) STATS_DEC(sys.x)
S#define SYS_STATS_INC_USED(x) STATS_INC_USED(sys.x, 1)
S#define SYS_STATS_DISPLAY() stats_display_sys(&lwip_stats.sys)
N#else
N#define SYS_STATS_INC(x)
N#define SYS_STATS_DEC(x)
N#define SYS_STATS_INC_USED(x)
N#define SYS_STATS_DISPLAY()
N#endif
N
N/* Display of statistics */
N#if LWIP_STATS_DISPLAY
X#if 0
Svoid stats_display(void);
Svoid stats_display_proto(struct stats_proto *proto, const char *name);
Svoid stats_display_igmp(struct stats_igmp *igmp);
Svoid stats_display_mem(struct stats_mem *mem, const char *name);
Svoid stats_display_memp(struct stats_mem *mem, int index);
Svoid stats_display_sys(struct stats_sys *sys);
N#else /* LWIP_STATS_DISPLAY */
N#define stats_display()
N#define stats_display_proto(proto, name)
N#define stats_display_igmp(igmp)
N#define stats_display_mem(mem, name)
N#define stats_display_memp(mem, index)
N#define stats_display_sys(sys)
N#endif /* LWIP_STATS_DISPLAY */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __LWIP_STATS_H__ */
L 57 "..\..\lwip\src\core\ipv4\ip.c" 2
N#include "arch/perf.h"
L 1 "..\..\lwip\src\arch/perf.h" 1
N/*
N * Copyright (c) 2001, Swedish Institute of Computer Science.
N * All rights reserved. 
N *
N * Redistribution and use in source and binary forms, with or without 
N * modification, are permitted provided that the following conditions 
N * are met: 
N * 1. Redistributions of source code must retain the above copyright 
N *    notice, this list of conditions and the following disclaimer. 
N * 2. Redistributions in binary form must reproduce the above copyright 
N *    notice, this list of conditions and the following disclaimer in the 
N *    documentation and/or other materials provided with the distribution. 
N * 3. Neither the name of the Institute nor the names of its contributors 
N *    may be used to endorse or promote products derived from this software 
N *    without specific prior written permission. 
N *
N * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND 
N * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
N * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE 
N * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
N * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
N * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
N * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
N * SUCH DAMAGE. 
N *
N * This file is part of the lwIP TCP/IP stack.
N * 
N * Author: Adam Dunkels <adam@sics.se>
N *
N * $Id: perf.h,v 1.1.1.1 2003/05/17 05:06:56 chenyu Exp $
N */
N#ifndef __PERF_H__
N#define __PERF_H__
N
N#define PERF_START    /* null definition */
N#define PERF_STOP(x)  /* null definition */
N
N#endif /* __PERF_H__ */
L 58 "..\..\lwip\src\core\ipv4\ip.c" 2
N
N#include <string.h>
L 1 "D:\Program Files\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060002
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 60 "..\..\lwip\src\core\ipv4\ip.c" 2
N
N/** Set this to 0 in the rare case of wanting to call an extra function to
N * generate the IP checksum (in contrast to calculating it on-the-fly). */
N#ifndef LWIP_INLINE_IP_CHKSUM
N#define LWIP_INLINE_IP_CHKSUM   1
N#endif
N#if LWIP_INLINE_IP_CHKSUM && CHECKSUM_GEN_IP
X#if 1 && 1
N#define CHECKSUM_GEN_IP_INLINE  1
N#else
S#define CHECKSUM_GEN_IP_INLINE  0
N#endif
N
N#if LWIP_DHCP || defined(LWIP_IP_ACCEPT_UDP_PORT)
X#if 0 || 0L
S#define IP_ACCEPT_LINK_LAYER_ADDRESSING 1
S
S/** Some defines for DHCP to let link-layer-addressed packets through while the
S * netif is down.
S * To use this in your own application/protocol, define LWIP_IP_ACCEPT_UDP_PORT
S * to return 1 if the port is accepted and 0 if the port is not accepted.
S */
S#if LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT)
S/* accept DHCP client port and custom port */
S#define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) (((port) == PP_NTOHS(DHCP_CLIENT_PORT)) \
S         || (LWIP_IP_ACCEPT_UDP_PORT(port)))
X#define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) (((port) == PP_NTOHS(DHCP_CLIENT_PORT))          || (LWIP_IP_ACCEPT_UDP_PORT(port)))
S#elif defined(LWIP_IP_ACCEPT_UDP_PORT) /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
S/* accept custom port only */
S#define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) (LWIP_IP_ACCEPT_UDP_PORT(port))
S#else /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
S/* accept DHCP client port only */
S#define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) ((port) == PP_NTOHS(DHCP_CLIENT_PORT))
S#endif /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
S
N#else /* LWIP_DHCP */
N#define IP_ACCEPT_LINK_LAYER_ADDRESSING 0
N#endif /* LWIP_DHCP */
N
N/**
N * The interface that provided the packet for the current callback
N * invocation.
N */
Nstruct netif *current_netif;
N
N/**
N * Header of the input packet currently being processed.
N */
Nconst struct ip_hdr *current_header;
N/** Source IP address of current_header */
Nip_addr_t current_iphdr_src;
N/** Destination IP address of current_header */
Nip_addr_t current_iphdr_dest;
N
N/** The IP header ID of the next outgoing IP packet */
Nstatic u16_t ip_id;
N
N/**
N * Finds the appropriate network interface for a given IP address. It
N * searches the list of network interfaces linearly. A match is found
N * if the masked IP address of the network interface equals the masked
N * IP address given to the function.
N *
N * @param dest the destination IP address for which to find the route
N * @return the netif on which to send to reach dest
N */
Nstruct netif *
Nip_route(ip_addr_t *dest)
N{
N  struct netif *netif;
N
N#ifdef LWIP_HOOK_IP4_ROUTE
S  netif = LWIP_HOOK_IP4_ROUTE(dest);
S  if (netif != NULL) {
S    return netif;
S  }
N#endif
N
N  /* iterate through netifs */
N  for (netif = netif_list; netif != NULL; netif = netif->next) {
X  for (netif = netif_list; netif != 0; netif = netif->next) {
N    /* network mask matches? */
N    if (netif_is_up(netif)) {
X    if ((((netif)->flags & 0x01U) ? (u8_t)1 : (u8_t)0)) {
N      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
X      if ((((dest)->addr & (&(netif->netmask))->addr) == ((&(netif->ip_addr))->addr & (&(netif->netmask))->addr))) {
N        /* return netif on which to forward IP packet */
N        return netif;
N      }
N    }
N  }
N  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
X  if ((netif_default == 0) || (!(((netif_default)->flags & 0x01U) ? (u8_t)1 : (u8_t)0))) {
N    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
N      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
X    do { if ( ((0x00U | 0x02) & 0x80U) && ((0x00U | 0x02) & 0x80U) && ((s16_t)((0x00U | 0x02) & 0x03) >= 0x00)) { {printf ("ip_route: No route to %" "u" ".%" "u" ".%" "u" ".%" "u" "\n", ((u16_t)(((u8_t*)(dest))[0])), ((u16_t)(((u8_t*)(dest))[1])), ((u16_t)(((u8_t*)(dest))[2])), ((u16_t)(((u8_t*)(dest))[3])));}; if ((0x00U | 0x02) & 0x08U) { while(1); } } } while(0);
N    IP_STATS_INC(ip.rterr);
X    ++lwip_stats . ip . rterr;
N    snmp_inc_ipoutnoroutes();
X    ;
N    return NULL;
X    return 0;
N  }
N  /* no matching netif found, use default netif */
N  return netif_default;
N}
N
N#if IP_FORWARD
X#if 0
S/**
S * Determine whether an IP address is in a reserved set of addresses
S * that may not be forwarded, or whether datagrams to that destination
S * may be forwarded.
S * @param p the packet to forward
S * @param dest the destination IP address
S * @return 1: can forward 0: discard
S */
Sstatic int
Sip_canforward(struct pbuf *p)
S{
S  u32_t addr = ip4_addr_get_u32(ip_current_dest_addr());
S
S  if (p->flags & PBUF_FLAG_LLBCAST) {
S    /* don't route link-layer broadcasts */
S    return 0;
S  }
S  if ((p->flags & PBUF_FLAG_LLMCAST) && !IP_MULTICAST(addr)) {
S    /* don't route link-layer multicasts unless the destination address is an IP
S       multicast address */
S    return 0;
S  }
S  if (IP_EXPERIMENTAL(addr)) {
S    return 0;
S  }
S  if (IP_CLASSA(addr)) {
S    u32_t net = addr & IP_CLASSA_NET;
S    if ((net == 0) || (net == (IP_LOOPBACKNET << IP_CLASSA_NSHIFT))) {
S      /* don't route loopback packets */
S      return 0;
S    }
S  }
S  return 1;
S}
S
S/**
S * Forwards an IP packet. It finds an appropriate route for the
S * packet, decrements the TTL value of the packet, adjusts the
S * checksum and outputs the packet on the appropriate interface.
S *
S * @param p the packet to forward (p->payload points to IP header)
S * @param iphdr the IP header of the input packet
S * @param inp the netif on which this packet was received
S */
Sstatic void
Sip_forward(struct pbuf *p, struct ip_hdr *iphdr, struct netif *inp)
S{
S  struct netif *netif;
S
S  PERF_START;
S
S  if (!ip_canforward(p)) {
S    goto return_noroute;
S  }
S
S  /* RFC3927 2.7: do not forward link-local addresses */
S  if (ip_addr_islinklocal(&current_iphdr_dest)) {
S    LWIP_DEBUGF(IP_DEBUG, ("ip_forward: not forwarding LLA %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
S      ip4_addr1_16(&current_iphdr_dest), ip4_addr2_16(&current_iphdr_dest),
S      ip4_addr3_16(&current_iphdr_dest), ip4_addr4_16(&current_iphdr_dest)));
S    goto return_noroute;
S  }
S
S  /* Find network interface where to forward this IP packet to. */
S  netif = ip_route(&current_iphdr_dest);
S  if (netif == NULL) {
S    LWIP_DEBUGF(IP_DEBUG, ("ip_forward: no forwarding route for %"U16_F".%"U16_F".%"U16_F".%"U16_F" found\n",
S      ip4_addr1_16(&current_iphdr_dest), ip4_addr2_16(&current_iphdr_dest),
S      ip4_addr3_16(&current_iphdr_dest), ip4_addr4_16(&current_iphdr_dest)));
S    /* @todo: send ICMP_DUR_NET? */
S    goto return_noroute;
S  }
S#if !IP_FORWARD_ALLOW_TX_ON_RX_NETIF
S  /* Do not forward packets onto the same network interface on which
S   * they arrived. */
S  if (netif == inp) {
S    LWIP_DEBUGF(IP_DEBUG, ("ip_forward: not bouncing packets back on incoming interface.\n"));
S    goto return_noroute;
S  }
S#endif /* IP_FORWARD_ALLOW_TX_ON_RX_NETIF */
S
S  /* decrement TTL */
S  IPH_TTL_SET(iphdr, IPH_TTL(iphdr) - 1);
S  /* send ICMP if TTL == 0 */
S  if (IPH_TTL(iphdr) == 0) {
S    snmp_inc_ipinhdrerrors();
S#if LWIP_ICMP
S    /* Don't send ICMP messages in response to ICMP messages */
S    if (IPH_PROTO(iphdr) != IP_PROTO_ICMP) {
S      icmp_time_exceeded(p, ICMP_TE_TTL);
S    }
S#endif /* LWIP_ICMP */
S    return;
S  }
S
S  /* Incrementally update the IP checksum. */
S  if (IPH_CHKSUM(iphdr) >= PP_HTONS(0xffffU - 0x100)) {
S    IPH_CHKSUM_SET(iphdr, IPH_CHKSUM(iphdr) + PP_HTONS(0x100) + 1);
S  } else {
S    IPH_CHKSUM_SET(iphdr, IPH_CHKSUM(iphdr) + PP_HTONS(0x100));
S  }
S
S  LWIP_DEBUGF(IP_DEBUG, ("ip_forward: forwarding packet to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
S    ip4_addr1_16(&current_iphdr_dest), ip4_addr2_16(&current_iphdr_dest),
S    ip4_addr3_16(&current_iphdr_dest), ip4_addr4_16(&current_iphdr_dest)));
S
S  IP_STATS_INC(ip.fw);
S  IP_STATS_INC(ip.xmit);
S  snmp_inc_ipforwdatagrams();
S
S  PERF_STOP("ip_forward");
S  /* don't fragment if interface has mtu set to 0 [loopif] */
S  if (netif->mtu && (p->tot_len > netif->mtu)) {
S    if ((IPH_OFFSET(iphdr) & PP_NTOHS(IP_DF)) == 0) {
S#if IP_FRAG
S      ip_frag(p, netif, ip_current_dest_addr());
S#else /* IP_FRAG */
S      /* @todo: send ICMP Destination Unreacheable code 13 "Communication administratively prohibited"? */
S#endif /* IP_FRAG */
S    } else {
S      /* send ICMP Destination Unreacheable code 4: "Fragmentation Needed and DF Set" */
S      icmp_dest_unreach(p, ICMP_DUR_FRAG);
S    }
S    return;
S  }
S  /* transmit pbuf on chosen interface */
S  netif->output(netif, p, &current_iphdr_dest);
S  return;
Sreturn_noroute:
S  snmp_inc_ipoutnoroutes();
S}
N#endif /* IP_FORWARD */
N
N/**
N * This function is called by the network interface device driver when
N * an IP packet is received. The function does the basic checks of the
N * IP header such as packet size being at least larger than the header
N * size etc. If the packet was not destined for us, the packet is
N * forwarded (using ip_forward). The IP checksum is always checked.
N *
N * Finally, the packet is sent to the upper layer protocol input function.
N * 
N * @param p the received IP packet (p->payload points to IP header)
N * @param inp the netif on which this packet was received
N * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
N *         processed, but currently always returns ERR_OK)
N */
Nerr_t
Nip_input(struct pbuf *p, struct netif *inp)
N{
N  struct ip_hdr *iphdr;
N  struct netif *netif;
N  u16_t iphdr_hlen;
N  u16_t iphdr_len;
N#if IP_ACCEPT_LINK_LAYER_ADDRESSING
X#if 0
S  int check_ip_src=1;
N#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
N
N  IP_STATS_INC(ip.recv);
X  ++lwip_stats . ip . recv;
N  snmp_inc_ipinreceives();
X  ;
N
N  /* identify the IP header */
N  iphdr = (struct ip_hdr *)p->payload;
N  if (IPH_V(iphdr) != 4) {
X  if (((iphdr)->_v_hl >> 4) != 4) {
N    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
X    do { if ( ((0x00U | 0x01) & 0x80U) && ((0x00U | 0x01) & 0x80U) && ((s16_t)((0x00U | 0x01) & 0x03) >= 0x00)) { {printf ("IP packet dropped due to bad version number %" "u" "\n", ((iphdr)->_v_hl >> 4));}; if ((0x00U | 0x01) & 0x08U) { while(1); } } } while(0);
N    ip_debug_print(p);
X    ;
N    pbuf_free(p);
N    IP_STATS_INC(ip.err);
X    ++lwip_stats . ip . err;
N    IP_STATS_INC(ip.drop);
X    ++lwip_stats . ip . drop;
N    snmp_inc_ipinhdrerrors();
X    ;
N    return ERR_OK;
X    return 0;
N  }
N
N#ifdef LWIP_HOOK_IP4_INPUT
S  if (LWIP_HOOK_IP4_INPUT(p, inp)) {
S    /* the packet has been eaten */
S    return ERR_OK;
S  }
N#endif
N
N  /* obtain IP header length in number of 32-bit words */
N  iphdr_hlen = IPH_HL(iphdr);
X  iphdr_hlen = ((iphdr)->_v_hl & 0x0f);
N  /* calculate IP header length in bytes */
N  iphdr_hlen *= 4;
N  /* obtain ip length in bytes */
N  iphdr_len = ntohs(IPH_LEN(iphdr));
X  iphdr_len = lwip_ntohs(((iphdr)->_len));
N
N  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
N  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
N    if (iphdr_hlen > p->len) {
N      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
N        ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
N        iphdr_hlen, p->len));
X      do { if ( ((0x00U | 0x02) & 0x80U) && ((0x00U | 0x02) & 0x80U) && ((s16_t)((0x00U | 0x02) & 0x03) >= 0x00)) { {printf ("IP header (len %" "u" ") does not fit in first pbuf (len %" "u" "), IP packet dropped.\n", iphdr_hlen, p->len);}; if ((0x00U | 0x02) & 0x08U) { while(1); } } } while(0);
N    }
N    if (iphdr_len > p->tot_len) {
N      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
N        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
N        iphdr_len, p->tot_len));
X      do { if ( ((0x00U | 0x02) & 0x80U) && ((0x00U | 0x02) & 0x80U) && ((s16_t)((0x00U | 0x02) & 0x03) >= 0x00)) { {printf ("IP (len %" "u" ") is longer than pbuf (len %" "u" "), IP packet dropped.\n", iphdr_len, p->tot_len);}; if ((0x00U | 0x02) & 0x08U) { while(1); } } } while(0);
N    }
N    /* free (drop) packet pbufs */
N    pbuf_free(p);
N    IP_STATS_INC(ip.lenerr);
X    ++lwip_stats . ip . lenerr;
N    IP_STATS_INC(ip.drop);
X    ++lwip_stats . ip . drop;
N    snmp_inc_ipindiscards();
X    ;
N    return ERR_OK;
X    return 0;
N  }
N
N  /* verify checksum */
N#if CHECKSUM_CHECK_IP
X#if 1
N  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
N
N    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
N      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
X    do { if ( ((0x00U | 0x02) & 0x80U) && ((0x00U | 0x02) & 0x80U) && ((s16_t)((0x00U | 0x02) & 0x03) >= 0x00)) { {printf ("Checksum (0x%" "x" ") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen));}; if ((0x00U | 0x02) & 0x08U) { while(1); } } } while(0);
N    ip_debug_print(p);
X    ;
N    pbuf_free(p);
N    IP_STATS_INC(ip.chkerr);
X    ++lwip_stats . ip . chkerr;
N    IP_STATS_INC(ip.drop);
X    ++lwip_stats . ip . drop;
N    snmp_inc_ipinhdrerrors();
X    ;
N    return ERR_OK;
X    return 0;
N  }
N#endif
N
N  /* Trim pbuf. This should have been done at the netif layer,
N   * but we'll do it anyway just to be sure that its done. */
N  pbuf_realloc(p, iphdr_len);
N
N  /* copy IP addresses to aligned ip_addr_t */
N  ip_addr_copy(current_iphdr_dest, iphdr->dest);
X  ((current_iphdr_dest). addr = (iphdr->dest). addr);
N  ip_addr_copy(current_iphdr_src, iphdr->src);
X  ((current_iphdr_src). addr = (iphdr->src). addr);
N
N  /* match packet against an interface, i.e. is this packet for us? */
N#if LWIP_IGMP
X#if 0
S  if (ip_addr_ismulticast(&current_iphdr_dest)) {
S    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, &current_iphdr_dest))) {
S      netif = inp;
S    } else {
S      netif = NULL;
S    }
S  } else
N#endif /* LWIP_IGMP */
N  {
N    /* start trying with inp. if that's not acceptable, start walking the
N       list of configured netifs.
N       'first' is used as a boolean to mark whether we started walking the list */
N    int first = 1;
N    netif = inp;
N    do {
N      LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
N          ip4_addr_get_u32(&iphdr->dest), ip4_addr_get_u32(&netif->ip_addr),
N          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
N          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
N          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));
X      do { if ( ((0x00U) & 0x80U) && ((0x00U) & 0x80U) && ((s16_t)((0x00U) & 0x03) >= 0x00)) { {printf ("ip_input: iphdr->dest 0x%" "x" " netif->ip_addr 0x%" "x" " (0x%" "x" ", 0x%" "x" ", 0x%" "x" ")\n", ((&iphdr->dest)->addr), ((&netif->ip_addr)->addr), ((&iphdr->dest)->addr) & ((&netif->netmask)->addr), ((&netif->ip_addr)->addr) & ((&netif->netmask)->addr), ((&iphdr->dest)->addr) & ~((&netif->netmask)->addr));}; if ((0x00U) & 0x08U) { while(1); } } } while(0);
N
N      /* interface is up and configured? */
N      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
X      if (((((netif)->flags & 0x01U) ? (u8_t)1 : (u8_t)0)) && (!((&(netif->ip_addr)) == 0 || (&(netif->ip_addr))->addr == ((u32_t)0x00000000UL)))) {
N        /* unicast to this interface address? */
N        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
X        if (((&current_iphdr_dest)->addr == (&(netif->ip_addr))->addr) ||
N            /* or broadcast on this interface network address? */
N            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
X            ip4_addr_isbroadcast((&current_iphdr_dest)->addr, (netif))) {
N          LWIP_DEBUGF(IP_DEBUG, ("ip_input: packet accepted on interface %c%c\n",
N              netif->name[0], netif->name[1]));
X          do { if ( ((0x00U) & 0x80U) && ((0x00U) & 0x80U) && ((s16_t)((0x00U) & 0x03) >= 0x00)) { {printf ("ip_input: packet accepted on interface %c%c\n", netif->name[0], netif->name[1]);}; if ((0x00U) & 0x08U) { while(1); } } } while(0);
N          /* break out of for loop */
N          break;
N        }
N#if LWIP_AUTOIP
X#if 0
S        /* connections to link-local addresses must persist after changing
S           the netif's address (RFC3927 ch. 1.9) */
S        if ((netif->autoip != NULL) &&
S            ip_addr_cmp(&current_iphdr_dest, &(netif->autoip->llipaddr))) {
S          LWIP_DEBUGF(IP_DEBUG, ("ip_input: LLA packet accepted on interface %c%c\n",
S              netif->name[0], netif->name[1]));
S          /* break out of for loop */
S          break;
S        }
N#endif /* LWIP_AUTOIP */
N      }
N      if (first) {
N        first = 0;
N        netif = netif_list;
N      } else {
N        netif = netif->next;
N      }
N      if (netif == inp) {
N        netif = netif->next;
N      }
N    } while(netif != NULL);
X    } while(netif != 0);
N  }
N
N#if IP_ACCEPT_LINK_LAYER_ADDRESSING
X#if 0
S  /* Pass DHCP messages regardless of destination address. DHCP traffic is addressed
S   * using link layer addressing (such as Ethernet MAC) so we must not filter on IP.
S   * According to RFC 1542 section 3.1.1, referred by RFC 2131).
S   *
S   * If you want to accept private broadcast communication while a netif is down,
S   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
S   *
S   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
S   */
S  if (netif == NULL) {
S    /* remote port is DHCP server? */
S    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
S      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
S      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
S        ntohs(udphdr->dest)));
S      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
S        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
S        netif = inp;
S        check_ip_src = 0;
S      }
S    }
S  }
N#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
N
N  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
N#if IP_ACCEPT_LINK_LAYER_ADDRESSING
X#if 0
S  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
S  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
N#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
N  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
X  {  if ((ip4_addr_isbroadcast((&current_iphdr_src)->addr, (inp))) ||
N         (ip_addr_ismulticast(&current_iphdr_src))) {
X         ((((&current_iphdr_src)->addr & ((((0xf0000000UL) & 0xff) << 24) | (((0xf0000000UL) & 0xff00) << 8) | (((0xf0000000UL) & 0xff0000UL) >> 8) | (((0xf0000000UL) & 0xff000000UL) >> 24))) == ((((0xe0000000UL) & 0xff) << 24) | (((0xe0000000UL) & 0xff00) << 8) | (((0xe0000000UL) & 0xff0000UL) >> 8) | (((0xe0000000UL) & 0xff000000UL) >> 24))))) {
N      /* packet source is not valid */
N      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
X      do { if ( ((0x00U | 0x40U | 0x01) & 0x80U) && ((0x00U | 0x40U | 0x01) & 0x80U) && ((s16_t)((0x00U | 0x40U | 0x01) & 0x03) >= 0x00)) { {printf ("ip_input: packet source is not valid.\n");}; if ((0x00U | 0x40U | 0x01) & 0x08U) { while(1); } } } while(0);
N      /* free (drop) packet pbufs */
N      pbuf_free(p);
N      IP_STATS_INC(ip.drop);
X      ++lwip_stats . ip . drop;
N      snmp_inc_ipinaddrerrors();
X      ;
N      snmp_inc_ipindiscards();
X      ;
N      return ERR_OK;
X      return 0;
N    }
N  }
N
N  /* packet not for us? */
N  if (netif == NULL) {
X  if (netif == 0) {
N    /* packet not for us, route or discard */
N    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: packet not for us.\n"));
X    do { if ( ((0x00U | 0x40U) & 0x80U) && ((0x00U | 0x40U) & 0x80U) && ((s16_t)((0x00U | 0x40U) & 0x03) >= 0x00)) { {printf ("ip_input: packet not for us.\n");}; if ((0x00U | 0x40U) & 0x08U) { while(1); } } } while(0);
N#if IP_FORWARD
X#if 0
S    /* non-broadcast packet? */
S    if (!ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
S      /* try to forward IP packet on (other) interfaces */
S      ip_forward(p, iphdr, inp);
S    } else
N#endif /* IP_FORWARD */
N    {
N      snmp_inc_ipinaddrerrors();
X      ;
N      snmp_inc_ipindiscards();
X      ;
N    }
N    pbuf_free(p);
N    return ERR_OK;
X    return 0;
N  }
N  /* packet consists of multiple fragments? */
N  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
X  if ((((iphdr)->_offset) & ((((0x1fffU | 0x2000U) & 0xff) << 8) | (((0x1fffU | 0x2000U) & 0xff00) >> 8))) != 0) {
N#if IP_REASSEMBLY /* packet fragment reassembly code present? */
X#if 1  
N    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
N      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
X    do { if ( ((0x00U) & 0x80U) && ((0x00U) & 0x80U) && ((s16_t)((0x00U) & 0x03) >= 0x00)) { {printf ("IP packet is a fragment (id=0x%04" "x" " tot_len=%" "u" " len=%" "u" " MF=%" "u" " offset=%" "u" "), calling ip_reass()\n", lwip_ntohs(((iphdr)->_id)), p->tot_len, lwip_ntohs(((iphdr)->_len)), ! !(((iphdr)->_offset) & ((((0x2000U) & 0xff) << 8) | (((0x2000U) & 0xff00) >> 8))), (lwip_ntohs(((iphdr)->_offset)) & 0x1fffU)*8);}; if ((0x00U) & 0x08U) { while(1); } } } while(0);
N    /* reassemble the packet*/
N    p = ip_reass(p);
N    /* packet not fully reassembled yet? */
N    if (p == NULL) {
X    if (p == 0) {
N      return ERR_OK;
X      return 0;
N    }
N    iphdr = (struct ip_hdr *)p->payload;
N#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
S    pbuf_free(p);
S    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
S      ntohs(IPH_OFFSET(iphdr))));
S    IP_STATS_INC(ip.opterr);
S    IP_STATS_INC(ip.drop);
S    /* unsupported protocol feature */
S    snmp_inc_ipinunknownprotos();
S    return ERR_OK;
N#endif /* IP_REASSEMBLY */
N  }
N
N#if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */
X#if 1 == 0  
S
S#if LWIP_IGMP
S  /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
S  if((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
S#else
S  if (iphdr_hlen > IP_HLEN) {
S#endif /* LWIP_IGMP */
S    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
S    pbuf_free(p);
S    IP_STATS_INC(ip.opterr);
S    IP_STATS_INC(ip.drop);
S    /* unsupported protocol feature */
S    snmp_inc_ipinunknownprotos();
S    return ERR_OK;
S  }
N#endif /* IP_OPTIONS_ALLOWED == 0 */
N
N  /* send to upper layers */
N  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
X  do { if ( ((0x00U) & 0x80U) && ((0x00U) & 0x80U) && ((s16_t)((0x00U) & 0x03) >= 0x00)) { {printf ("ip_input: \n");}; if ((0x00U) & 0x08U) { while(1); } } } while(0);
N  ip_debug_print(p);
X  ;
N  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
X  do { if ( ((0x00U) & 0x80U) && ((0x00U) & 0x80U) && ((s16_t)((0x00U) & 0x03) >= 0x00)) { {printf ("ip_input: p->len %" "u" " p->tot_len %" "u" "\n", p->len, p->tot_len);}; if ((0x00U) & 0x08U) { while(1); } } } while(0);
N
N  current_netif = inp;
N  current_header = iphdr;
N
N#if LWIP_RAW
X#if 1
N  /* raw input did not eat the packet? */
N  if (raw_input(p, inp) == 0)
N#endif /* LWIP_RAW */
N  {
N    switch (IPH_PROTO(iphdr)) {
X    switch (((iphdr)->_proto)) {
N#if LWIP_UDP
X#if 1
N    case IP_PROTO_UDP:
X    case 17:
N#if LWIP_UDPLITE
X#if 0
S    case IP_PROTO_UDPLITE:
N#endif /* LWIP_UDPLITE */
N      snmp_inc_ipindelivers();
X      ;
N      udp_input(p, inp);
N      break;
N#endif /* LWIP_UDP */
N#if LWIP_TCP
X#if 1
N    case IP_PROTO_TCP:
X    case 6:
N      snmp_inc_ipindelivers();
X      ;
N      tcp_input(p, inp);
N      break;
N#endif /* LWIP_TCP */
N#if LWIP_ICMP
X#if 1
N    case IP_PROTO_ICMP:
X    case 1:
N      snmp_inc_ipindelivers();
X      ;
N      icmp_input(p, inp);
N      break;
N#endif /* LWIP_ICMP */
N#if LWIP_IGMP
X#if 0
S    case IP_PROTO_IGMP:
S      igmp_input(p, inp, &current_iphdr_dest);
S      break;
N#endif /* LWIP_IGMP */
N    default:
N#if LWIP_ICMP
X#if 1
N      /* send ICMP destination protocol unreachable unless is was a broadcast */
N      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
X      if (!ip4_addr_isbroadcast((&current_iphdr_dest)->addr, (inp)) &&
N          !ip_addr_ismulticast(&current_iphdr_dest)) {
X          !(((&current_iphdr_dest)->addr & ((((0xf0000000UL) & 0xff) << 24) | (((0xf0000000UL) & 0xff00) << 8) | (((0xf0000000UL) & 0xff0000UL) >> 8) | (((0xf0000000UL) & 0xff000000UL) >> 24))) == ((((0xe0000000UL) & 0xff) << 24) | (((0xe0000000UL) & 0xff00) << 8) | (((0xe0000000UL) & 0xff0000UL) >> 8) | (((0xe0000000UL) & 0xff000000UL) >> 24)))) {
N        p->payload = iphdr;
N        icmp_dest_unreach(p, ICMP_DUR_PROTO);
N      }
N#endif /* LWIP_ICMP */
N      pbuf_free(p);
N
N      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));
X      do { if ( ((0x00U | 0x02) & 0x80U) && ((0x00U | 0x02) & 0x80U) && ((s16_t)((0x00U | 0x02) & 0x03) >= 0x00)) { {printf ("Unsupported transport protocol %" "u" "\n", ((iphdr)->_proto));}; if ((0x00U | 0x02) & 0x08U) { while(1); } } } while(0);
N
N      IP_STATS_INC(ip.proterr);
X      ++lwip_stats . ip . proterr;
N      IP_STATS_INC(ip.drop);
X      ++lwip_stats . ip . drop;
N      snmp_inc_ipinunknownprotos();
X      ;
N    }
N  }
N
N  current_netif = NULL;
X  current_netif = 0;
N  current_header = NULL;
X  current_header = 0;
N  ip_addr_set_any(&current_iphdr_src);
X  ((&current_iphdr_src)->addr = ((u32_t)0x00000000UL));
N  ip_addr_set_any(&current_iphdr_dest);
X  ((&current_iphdr_dest)->addr = ((u32_t)0x00000000UL));
N
N  return ERR_OK;
X  return 0;
N}
N
N/**
N * Sends an IP packet on a network interface. This function constructs
N * the IP header and calculates the IP header checksum. If the source
N * IP address is NULL, the IP address of the outgoing network
N * interface is filled in as source address.
N * If the destination IP address is IP_HDRINCL, p is assumed to already
N * include an IP header and p->payload points to it instead of the data.
N *
N * @param p the packet to send (p->payload points to the data, e.g. next
N            protocol header; if dest == IP_HDRINCL, p already includes an IP
N            header and p->payload points to that IP header)
N * @param src the source IP address to send from (if src == IP_ADDR_ANY, the
N *         IP  address of the netif used to send is used as source address)
N * @param dest the destination IP address to send the packet to
N * @param ttl the TTL value to be set in the IP header
N * @param tos the TOS value to be set in the IP header
N * @param proto the PROTOCOL to be set in the IP header
N * @param netif the netif on which to send this packet
N * @return ERR_OK if the packet was sent OK
N *         ERR_BUF if p doesn't have enough space for IP/LINK headers
N *         returns errors returned by netif->output
N *
N * @note ip_id: RFC791 "some host may be able to simply use
N *  unique identifiers independent of destination"
N */
Nerr_t
Nip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
N             u8_t ttl, u8_t tos,
N             u8_t proto, struct netif *netif)
N{
N#if IP_OPTIONS_SEND
X#if 0
S  return ip_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
S}
S
S/**
S * Same as ip_output_if() but with the possibility to include IP options:
S *
S * @ param ip_options pointer to the IP options, copied into the IP header
S * @ param optlen length of ip_options
S */
Serr_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
S       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
S       u16_t optlen)
S{
N#endif /* IP_OPTIONS_SEND */
N  struct ip_hdr *iphdr;
N  ip_addr_t dest_addr;
N#if CHECKSUM_GEN_IP_INLINE
X#if 1
N  u32_t chk_sum = 0;
N#endif /* CHECKSUM_GEN_IP_INLINE */
N
N  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
N     gets altered as the packet is passed down the stack */
N  LWIP_ASSERT("p->ref == 1", p->ref == 1);
X  do { if(!(p->ref == 1)) {printf("p->ref == 1");while(1);}; } while(0);
N
N  snmp_inc_ipoutrequests();
X  ;
N
N  /* Should the IP header be generated or is it already included in p? */
N  if (dest != IP_HDRINCL) {
X  if (dest != 0) {
N    u16_t ip_hlen = IP_HLEN;
X    u16_t ip_hlen = 20;
N#if IP_OPTIONS_SEND
X#if 0
S    u16_t optlen_aligned = 0;
S    if (optlen != 0) {
S#if CHECKSUM_GEN_IP_INLINE
S      int i;
S#endif /* CHECKSUM_GEN_IP_INLINE */
S      /* round up to a multiple of 4 */
S      optlen_aligned = ((optlen + 3) & ~3);
S      ip_hlen += optlen_aligned;
S      /* First write in the IP options */
S      if (pbuf_header(p, optlen_aligned)) {
S        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output_if_opt: not enough room for IP options in pbuf\n"));
S        IP_STATS_INC(ip.err);
S        snmp_inc_ipoutdiscards();
S        return ERR_BUF;
S      }
S      MEMCPY(p->payload, ip_options, optlen);
S      if (optlen < optlen_aligned) {
S        /* zero the remaining bytes */
S        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
S      }
S#if CHECKSUM_GEN_IP_INLINE
S      for (i = 0; i < optlen_aligned/2; i++) {
S        chk_sum += ((u16_t*)p->payload)[i];
S      }
S#endif /* CHECKSUM_GEN_IP_INLINE */
S    }
N#endif /* IP_OPTIONS_SEND */
N    /* generate IP header */
N    if (pbuf_header(p, IP_HLEN)) {
X    if (pbuf_header(p, 20)) {
N      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));
X      do { if ( ((0x00U | 0x02) & 0x80U) && ((0x00U | 0x02) & 0x80U) && ((s16_t)((0x00U | 0x02) & 0x03) >= 0x00)) { {printf ("ip_output: not enough room for IP header in pbuf\n");}; if ((0x00U | 0x02) & 0x08U) { while(1); } } } while(0);
N
N      IP_STATS_INC(ip.err);
X      ++lwip_stats . ip . err;
N      snmp_inc_ipoutdiscards();
X      ;
N      return ERR_BUF;
X      return -2;
N    }
N
N    iphdr = (struct ip_hdr *)p->payload;
N    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
N               (p->len >= sizeof(struct ip_hdr)));
X    do { if(!((p->len >= sizeof(struct ip_hdr)))) {printf("check that first pbuf can hold struct ip_hdr");while(1);}; } while(0);
N
N    IPH_TTL_SET(iphdr, ttl);
X    (iphdr)->_ttl = (u8_t)(ttl);
N    IPH_PROTO_SET(iphdr, proto);
X    (iphdr)->_proto = (u8_t)(proto);
N#if CHECKSUM_GEN_IP_INLINE
X#if 1
N    chk_sum += LWIP_MAKE_U16(proto, ttl);
X    chk_sum += ((proto << 8) | ttl);
N#endif /* CHECKSUM_GEN_IP_INLINE */
N
N    /* dest cannot be NULL here */
N    ip_addr_copy(iphdr->dest, *dest);
X    ((iphdr->dest). addr = (*dest). addr);
N#if CHECKSUM_GEN_IP_INLINE
X#if 1
N    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
X    chk_sum += ((&iphdr->dest)->addr) & 0xFFFF;
N    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
X    chk_sum += ((&iphdr->dest)->addr) >> 16;
N#endif /* CHECKSUM_GEN_IP_INLINE */
N
N    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
X    (iphdr)->_v_hl = (((4) << 4) | (ip_hlen / 4));
N    IPH_TOS_SET(iphdr, tos);
X    (iphdr)->_tos = (tos);
N#if CHECKSUM_GEN_IP_INLINE
X#if 1
N    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
X    chk_sum += ((tos << 8) | iphdr->_v_hl);
N#endif /* CHECKSUM_GEN_IP_INLINE */
N    IPH_LEN_SET(iphdr, htons(p->tot_len));
X    (iphdr)->_len = (lwip_htons(p->tot_len));
N#if CHECKSUM_GEN_IP_INLINE
X#if 1
N    chk_sum += iphdr->_len;
N#endif /* CHECKSUM_GEN_IP_INLINE */
N    IPH_OFFSET_SET(iphdr, 0);
X    (iphdr)->_offset = (0);
N    IPH_ID_SET(iphdr, htons(ip_id));
X    (iphdr)->_id = (lwip_htons(ip_id));
N#if CHECKSUM_GEN_IP_INLINE
X#if 1
N    chk_sum += iphdr->_id;
N#endif /* CHECKSUM_GEN_IP_INLINE */
N    ++ip_id;
N
N    if (ip_addr_isany(src)) {
X    if (((src) == 0 || (src)->addr == ((u32_t)0x00000000UL))) {
N      ip_addr_copy(iphdr->src, netif->ip_addr);
X      ((iphdr->src). addr = (netif->ip_addr). addr);
N    } else {
N      /* src cannot be NULL here */
N      ip_addr_copy(iphdr->src, *src);
X      ((iphdr->src). addr = (*src). addr);
N    }
N
N#if CHECKSUM_GEN_IP_INLINE
X#if 1
N    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
X    chk_sum += ((&iphdr->src)->addr) & 0xFFFF;
N    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
X    chk_sum += ((&iphdr->src)->addr) >> 16;
N    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
N    chk_sum = (chk_sum >> 16) + chk_sum;
N    chk_sum = ~chk_sum;
N    iphdr->_chksum = chk_sum; /* network order */
N#else /* CHECKSUM_GEN_IP_INLINE */
S    IPH_CHKSUM_SET(iphdr, 0);
S#if CHECKSUM_GEN_IP
S    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
S#endif
N#endif /* CHECKSUM_GEN_IP_INLINE */
N  } else {
N    /* IP header already included in p */
N    iphdr = (struct ip_hdr *)p->payload;
N    ip_addr_copy(dest_addr, iphdr->dest);
X    ((dest_addr). addr = (iphdr->dest). addr);
N    dest = &dest_addr;
N  }
N
N  IP_STATS_INC(ip.xmit);
X  ++lwip_stats . ip . xmit;
N
N  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num));
X  do { if ( ((0x00U) & 0x80U) && ((0x00U) & 0x80U) && ((s16_t)((0x00U) & 0x03) >= 0x00)) { {printf ("ip_output_if: %c%c%" "u" "\n", netif->name[0], netif->name[1], netif->num);}; if ((0x00U) & 0x08U) { while(1); } } } while(0);
N  ip_debug_print(p);
X  ;
N
N#if ENABLE_LOOPBACK
X#if (0 || 1)
N  if (ip_addr_cmp(dest, &netif->ip_addr)) {
X  if (((dest)->addr == (&netif->ip_addr)->addr)) {
N    /* Packet to self, enqueue it for loopback */
N    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
X    do { if ( ((0x00U) & 0x80U) && ((0x00U) & 0x80U) && ((s16_t)((0x00U) & 0x03) >= 0x00)) { {printf ("netif_loop_output()");}; if ((0x00U) & 0x08U) { while(1); } } } while(0);
N    return netif_loop_output(netif, p, dest);
N  }
N#if LWIP_IGMP
X#if 0
S  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
S    netif_loop_output(netif, p, dest);
S  }
N#endif /* LWIP_IGMP */
N#endif /* ENABLE_LOOPBACK */
N#if IP_FRAG
X#if 1
N  /* don't fragment if interface has mtu set to 0 [loopif] */
N  if (netif->mtu && (p->tot_len > netif->mtu)) {
N    return ip_frag(p, netif, dest);
N  }
N#endif /* IP_FRAG */
N
N  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
X  do { if ( ((0x00U) & 0x80U) && ((0x00U) & 0x80U) && ((s16_t)((0x00U) & 0x03) >= 0x00)) { {printf ("netif->output()");}; if ((0x00U) & 0x08U) { while(1); } } } while(0);
N  return netif->output(netif, p, dest);
N}
N
N/**
N * Simple interface to ip_output_if. It finds the outgoing network
N * interface and calls upon ip_output_if to do the actual work.
N *
N * @param p the packet to send (p->payload points to the data, e.g. next
N            protocol header; if dest == IP_HDRINCL, p already includes an IP
N            header and p->payload points to that IP header)
N * @param src the source IP address to send from (if src == IP_ADDR_ANY, the
N *         IP  address of the netif used to send is used as source address)
N * @param dest the destination IP address to send the packet to
N * @param ttl the TTL value to be set in the IP header
N * @param tos the TOS value to be set in the IP header
N * @param proto the PROTOCOL to be set in the IP header
N *
N * @return ERR_RTE if no route is found
N *         see ip_output_if() for more return values
N */
Nerr_t
Nip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
N          u8_t ttl, u8_t tos, u8_t proto)
N{
N  struct netif *netif;
N
N  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
N     gets altered as the packet is passed down the stack */
N  LWIP_ASSERT("p->ref == 1", p->ref == 1);
X  do { if(!(p->ref == 1)) {printf("p->ref == 1");while(1);}; } while(0);
N
N  if ((netif = ip_route(dest)) == NULL) {
X  if ((netif = ip_route(dest)) == 0) {
N    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
N      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
X    do { if ( ((0x00U) & 0x80U) && ((0x00U) & 0x80U) && ((s16_t)((0x00U) & 0x03) >= 0x00)) { {printf ("ip_output: No route to %" "u" ".%" "u" ".%" "u" ".%" "u" "\n", ((u16_t)(((u8_t*)(dest))[0])), ((u16_t)(((u8_t*)(dest))[1])), ((u16_t)(((u8_t*)(dest))[2])), ((u16_t)(((u8_t*)(dest))[3])));}; if ((0x00U) & 0x08U) { while(1); } } } while(0);
N    IP_STATS_INC(ip.rterr);
X    ++lwip_stats . ip . rterr;
N    return ERR_RTE;
X    return -4;
N  }
N
N  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
N}
N
N#if LWIP_NETIF_HWADDRHINT
X#if 0
S/** Like ip_output, but takes and addr_hint pointer that is passed on to netif->addr_hint
S *  before calling ip_output_if.
S *
S * @param p the packet to send (p->payload points to the data, e.g. next
S            protocol header; if dest == IP_HDRINCL, p already includes an IP
S            header and p->payload points to that IP header)
S * @param src the source IP address to send from (if src == IP_ADDR_ANY, the
S *         IP  address of the netif used to send is used as source address)
S * @param dest the destination IP address to send the packet to
S * @param ttl the TTL value to be set in the IP header
S * @param tos the TOS value to be set in the IP header
S * @param proto the PROTOCOL to be set in the IP header
S * @param addr_hint address hint pointer set to netif->addr_hint before
S *        calling ip_output_if()
S *
S * @return ERR_RTE if no route is found
S *         see ip_output_if() for more return values
S */
Serr_t
Sip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
S          u8_t ttl, u8_t tos, u8_t proto, u8_t *addr_hint)
S{
S  struct netif *netif;
S  err_t err;
S
S  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
S     gets altered as the packet is passed down the stack */
S  LWIP_ASSERT("p->ref == 1", p->ref == 1);
S
S  if ((netif = ip_route(dest)) == NULL) {
S    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
S      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
S    IP_STATS_INC(ip.rterr);
S    return ERR_RTE;
S  }
S
S  NETIF_SET_HWADDRHINT(netif, addr_hint);
S  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
S  NETIF_SET_HWADDRHINT(netif, NULL);
S
S  return err;
S}
N#endif /* LWIP_NETIF_HWADDRHINT*/
N
N#if IP_DEBUG
X#if 0x00U
S/* Print an IP header by using LWIP_DEBUGF
S * @param p an IP packet, p->payload pointing to the IP header
S */
Svoid
Sip_debug_print(struct pbuf *p)
S{
S  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
S
S  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
S  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
S  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
S                    IPH_V(iphdr),
S                    IPH_HL(iphdr),
S                    IPH_TOS(iphdr),
S                    ntohs(IPH_LEN(iphdr))));
S  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
S  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
S                    ntohs(IPH_ID(iphdr)),
S                    ntohs(IPH_OFFSET(iphdr)) >> 15 & 1,
S                    ntohs(IPH_OFFSET(iphdr)) >> 14 & 1,
S                    ntohs(IPH_OFFSET(iphdr)) >> 13 & 1,
S                    ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK));
S  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
S  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
S                    IPH_TTL(iphdr),
S                    IPH_PROTO(iphdr),
S                    ntohs(IPH_CHKSUM(iphdr))));
S  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
S  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
S                    ip4_addr1_16(&iphdr->src),
S                    ip4_addr2_16(&iphdr->src),
S                    ip4_addr3_16(&iphdr->src),
S                    ip4_addr4_16(&iphdr->src)));
S  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
S  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
S                    ip4_addr1_16(&iphdr->dest),
S                    ip4_addr2_16(&iphdr->dest),
S                    ip4_addr3_16(&iphdr->dest),
S                    ip4_addr4_16(&iphdr->dest)));
S  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
S}
N#endif /* IP_DEBUG */
