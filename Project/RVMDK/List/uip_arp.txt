; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uip_arp.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\uip_arp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\ -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\lwip\src\api -I..\..\lwip\src\arch -I..\..\lwip\src\include -I..\..\lwip\src\netif -I..\..\lwip\src\include\ipv4 -I..\..\Source\inc -I..\..\lwip\src -I..\..\Source\uIP-1.0\uip -I..\..\Source\uIP-APP -I..\..\Source\uIP-1.0\apps\webserver -IE:\git_projects\enc28j60-for-uip\Project\RVMDK\RTE -I"D:\Program Files\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=518 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\uip_arp.crf ..\..\Source\uIP-1.0\uip\uip_arp.c]
                          THUMB

                          AREA ||i.uip_arp_arpin||, CODE, READONLY, ALIGN=2

                  uip_arp_arpin PROC
;;;277    void
;;;278    uip_arp_arpin(void)
000000  b510              PUSH     {r4,lr}
;;;279    {
;;;280      static uint16_t ii,jj;
;;;281      if(uip_len < sizeof(struct arp_hdr)) {
000002  4844              LDR      r0,|L1.276|
000004  8800              LDRH     r0,[r0,#0]  ; uip_len
000006  282a              CMP      r0,#0x2a
000008  d203              BCS      |L1.18|
;;;282        uip_len = 0;
00000a  2000              MOVS     r0,#0
00000c  4941              LDR      r1,|L1.276|
00000e  8008              STRH     r0,[r1,#0]
                  |L1.16|
;;;283        return;
;;;284      }
;;;285      uip_len = 0;
;;;286    
;;;287      switch(ABUF->opcode) {
;;;288      case HTONS(ARP_REQUEST):
;;;289        /* ARP request. If it asked for our address, we send out a
;;;290           reply. */
;;;291        if(uip_ipaddr_cmp(ABUF->dipaddr, uip_hostaddr)) {
;;;292          /* First, we register the one who made the request in our ARP
;;;293    	 table, since it is likely that we will do more communication
;;;294    	 with this host in the future. */
;;;295          uip_arp_update(ABUF->sipaddr, &ABUF->shwaddr);
;;;296          
;;;297          /* The reply opcode is 2. */
;;;298          ABUF->opcode = HTONS(2);
;;;299    
;;;300          memcpy(ABUF->dhwaddr.addr, ABUF->shwaddr.addr, 6);
;;;301          memcpy(ABUF->shwaddr.addr, uip_ethaddr.addr, 6);
;;;302          memcpy(ABUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
;;;303          memcpy(ABUF->ethhdr.dest.addr, ABUF->dhwaddr.addr, 6);
;;;304          
;;;305          ABUF->dipaddr[0] = ABUF->sipaddr[0];
;;;306          ABUF->dipaddr[1] = ABUF->sipaddr[1];
;;;307          ABUF->sipaddr[0] = uip_hostaddr[0];
;;;308          ABUF->sipaddr[1] = uip_hostaddr[1];
;;;309    
;;;310          ABUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
;;;311          uip_len = sizeof(struct arp_hdr);
;;;312        }
;;;313        break;
;;;314      case HTONS(ARP_REPLY):
;;;315        /* ARP reply. We insert or update the ARP table if it was meant
;;;316           for us. */
;;;317        if(uip_ipaddr_cmp(ABUF->dipaddr, uip_hostaddr)) {
;;;318          uip_arp_update(ABUF->sipaddr, &ABUF->shwaddr);
;;;319        }
;;;320        break;
;;;321      }
;;;322    
;;;323      return;
;;;324    }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  2000              MOVS     r0,#0                 ;285
000014  493f              LDR      r1,|L1.276|
000016  8008              STRH     r0,[r1,#0]            ;285
000018  483f              LDR      r0,|L1.280|
00001a  6800              LDR      r0,[r0,#0]            ;287  ; ABUF
00001c  8a80              LDRH     r0,[r0,#0x14]         ;287
00001e  f5b07f80          CMP      r0,#0x100             ;287
000022  d003              BEQ      |L1.44|
000024  f5b07f00          CMP      r0,#0x200             ;287
000028  d170              BNE      |L1.268|
00002a  e059              B        |L1.224|
                  |L1.44|
00002c  483a              LDR      r0,|L1.280|
00002e  6800              LDR      r0,[r0,#0]            ;291  ; ABUF
000030  8cc0              LDRH     r0,[r0,#0x26]         ;291
000032  493a              LDR      r1,|L1.284|
000034  8809              LDRH     r1,[r1,#0]            ;291  ; uip_hostaddr
000036  4288              CMP      r0,r1                 ;291
000038  d151              BNE      |L1.222|
00003a  4837              LDR      r0,|L1.280|
00003c  6800              LDR      r0,[r0,#0]            ;291  ; ABUF
00003e  8d00              LDRH     r0,[r0,#0x28]         ;291
000040  4936              LDR      r1,|L1.284|
000042  8849              LDRH     r1,[r1,#2]            ;291  ; uip_hostaddr
000044  4288              CMP      r0,r1                 ;291
000046  d14a              BNE      |L1.222|
000048  4833              LDR      r0,|L1.280|
00004a  6801              LDR      r1,[r0,#0]            ;295  ; ABUF
00004c  3116              ADDS     r1,r1,#0x16           ;295
00004e  6800              LDR      r0,[r0,#0]            ;295  ; ABUF
000050  301c              ADDS     r0,r0,#0x1c           ;295
000052  f7fffffe          BL       uip_arp_update
000056  f44f7000          MOV      r0,#0x200             ;298
00005a  492f              LDR      r1,|L1.280|
00005c  6809              LDR      r1,[r1,#0]            ;298  ; ABUF
00005e  8288              STRH     r0,[r1,#0x14]         ;298
000060  482d              LDR      r0,|L1.280|
000062  6800              LDR      r0,[r0,#0]            ;300  ; ABUF
000064  492c              LDR      r1,|L1.280|
000066  6809              LDR      r1,[r1,#0]            ;300  ; ABUF
000068  f8d12016          LDR      r2,[r1,#0x16]         ;300
00006c  6202              STR      r2,[r0,#0x20]         ;300
00006e  8b49              LDRH     r1,[r1,#0x1a]         ;300
000070  8481              STRH     r1,[r0,#0x24]         ;300
000072  4829              LDR      r0,|L1.280|
000074  6800              LDR      r0,[r0,#0]            ;301  ; ABUF
000076  492a              LDR      r1,|L1.288|
000078  680a              LDR      r2,[r1,#0]            ;301  ; uip_ethaddr
00007a  f8c02016          STR      r2,[r0,#0x16]         ;301
00007e  8889              LDRH     r1,[r1,#4]            ;301  ; uip_ethaddr
000080  8341              STRH     r1,[r0,#0x1a]         ;301
000082  4825              LDR      r0,|L1.280|
000084  6800              LDR      r0,[r0,#0]            ;302  ; ABUF
000086  4926              LDR      r1,|L1.288|
000088  680a              LDR      r2,[r1,#0]            ;302  ; uip_ethaddr
00008a  f8c02006          STR      r2,[r0,#6]            ;302
00008e  8889              LDRH     r1,[r1,#4]            ;302  ; uip_ethaddr
000090  8141              STRH     r1,[r0,#0xa]          ;302
000092  4821              LDR      r0,|L1.280|
000094  6800              LDR      r0,[r0,#0]            ;303  ; ABUF
000096  4920              LDR      r1,|L1.280|
000098  6809              LDR      r1,[r1,#0]            ;303  ; ABUF
00009a  6a0a              LDR      r2,[r1,#0x20]         ;303
00009c  6002              STR      r2,[r0,#0]            ;303
00009e  8c89              LDRH     r1,[r1,#0x24]         ;303
0000a0  8081              STRH     r1,[r0,#4]            ;303
0000a2  481d              LDR      r0,|L1.280|
0000a4  6800              LDR      r0,[r0,#0]            ;305  ; ABUF
0000a6  8b80              LDRH     r0,[r0,#0x1c]         ;305
0000a8  491b              LDR      r1,|L1.280|
0000aa  6809              LDR      r1,[r1,#0]            ;305  ; ABUF
0000ac  84c8              STRH     r0,[r1,#0x26]         ;305
0000ae  481a              LDR      r0,|L1.280|
0000b0  6800              LDR      r0,[r0,#0]            ;306  ; ABUF
0000b2  8bc1              LDRH     r1,[r0,#0x1e]         ;306
0000b4  4818              LDR      r0,|L1.280|
0000b6  6800              LDR      r0,[r0,#0]            ;306  ; ABUF
0000b8  8501              STRH     r1,[r0,#0x28]         ;306
0000ba  4818              LDR      r0,|L1.284|
0000bc  8800              LDRH     r0,[r0,#0]            ;307  ; uip_hostaddr
0000be  4916              LDR      r1,|L1.280|
0000c0  6809              LDR      r1,[r1,#0]            ;307  ; ABUF
0000c2  8388              STRH     r0,[r1,#0x1c]         ;307
0000c4  4815              LDR      r0,|L1.284|
0000c6  8841              LDRH     r1,[r0,#2]            ;308  ; uip_hostaddr
0000c8  4813              LDR      r0,|L1.280|
0000ca  6800              LDR      r0,[r0,#0]            ;308  ; ABUF
0000cc  83c1              STRH     r1,[r0,#0x1e]         ;308
0000ce  f44f60c1          MOV      r0,#0x608             ;310
0000d2  4911              LDR      r1,|L1.280|
0000d4  6809              LDR      r1,[r1,#0]            ;310  ; ABUF
0000d6  8188              STRH     r0,[r1,#0xc]          ;310
0000d8  202a              MOVS     r0,#0x2a              ;311
0000da  490e              LDR      r1,|L1.276|
0000dc  8008              STRH     r0,[r1,#0]            ;311
                  |L1.222|
0000de  e015              B        |L1.268|
                  |L1.224|
0000e0  480d              LDR      r0,|L1.280|
0000e2  6800              LDR      r0,[r0,#0]            ;317  ; ABUF
0000e4  8cc0              LDRH     r0,[r0,#0x26]         ;317
0000e6  490d              LDR      r1,|L1.284|
0000e8  8809              LDRH     r1,[r1,#0]            ;317  ; uip_hostaddr
0000ea  4288              CMP      r0,r1                 ;317
0000ec  d10d              BNE      |L1.266|
0000ee  480a              LDR      r0,|L1.280|
0000f0  6800              LDR      r0,[r0,#0]            ;317  ; ABUF
0000f2  8d00              LDRH     r0,[r0,#0x28]         ;317
0000f4  4909              LDR      r1,|L1.284|
0000f6  8849              LDRH     r1,[r1,#2]            ;317  ; uip_hostaddr
0000f8  4288              CMP      r0,r1                 ;317
0000fa  d106              BNE      |L1.266|
0000fc  4806              LDR      r0,|L1.280|
0000fe  6801              LDR      r1,[r0,#0]            ;318  ; ABUF
000100  3116              ADDS     r1,r1,#0x16           ;318
000102  6800              LDR      r0,[r0,#0]            ;318  ; ABUF
000104  301c              ADDS     r0,r0,#0x1c           ;318
000106  f7fffffe          BL       uip_arp_update
                  |L1.266|
00010a  bf00              NOP                            ;320
                  |L1.268|
00010c  bf00              NOP                            ;313
00010e  bf00              NOP                            ;323
000110  e77e              B        |L1.16|
;;;325    /*-----------------------------------------------------------------------------------*/
                          ENDP

000112  0000              DCW      0x0000
                  |L1.276|
                          DCD      uip_len
                  |L1.280|
                          DCD      ABUF
                  |L1.284|
                          DCD      uip_hostaddr
                  |L1.288|
                          DCD      uip_ethaddr

                          AREA ||i.uip_arp_init||, CODE, READONLY, ALIGN=2

                  uip_arp_init PROC
;;;124    void
;;;125    uip_arp_init(void)
000000  2000              MOVS     r0,#0
;;;126    {
;;;127      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
000002  490b              LDR      r1,|L2.48|
000004  7008              STRB     r0,[r1,#0]
000006  e00d              B        |L2.36|
                  |L2.8|
;;;128        memset(arp_table[i].ipaddr, 0, 4);
000008  4809              LDR      r0,|L2.48|
00000a  7800              LDRB     r0,[r0,#0]  ; i
00000c  eb000040          ADD      r0,r0,r0,LSL #1
000010  4908              LDR      r1,|L2.52|
000012  eb010080          ADD      r0,r1,r0,LSL #2
000016  2100              MOVS     r1,#0
000018  6001              STR      r1,[r0,#0]
00001a  4805              LDR      r0,|L2.48|
00001c  7800              LDRB     r0,[r0,#0]            ;127  ; i
00001e  1c40              ADDS     r0,r0,#1              ;127
000020  4903              LDR      r1,|L2.48|
000022  7008              STRB     r0,[r1,#0]            ;127
                  |L2.36|
000024  4802              LDR      r0,|L2.48|
000026  7800              LDRB     r0,[r0,#0]            ;127  ; i
000028  2808              CMP      r0,#8                 ;127
00002a  dbed              BLT      |L2.8|
;;;129      }
;;;130    }
00002c  4770              BX       lr
;;;131    /*-----------------------------------------------------------------------------------*/
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      i
                  |L2.52|
                          DCD      arp_table

                          AREA ||i.uip_arp_out||, CODE, READONLY, ALIGN=2

                  uip_arp_out PROC
;;;353    void
;;;354    uip_arp_out(void)
000000  b510              PUSH     {r4,lr}
;;;355    {
;;;356      struct arp_entry *tabptr;
;;;357      
;;;358      /* Find the destination IP address in the ARP table and construct
;;;359         the Ethernet header. If the destination IP addres isn't on the
;;;360         local network, we use the default router's IP address instead.
;;;361    
;;;362         If not ARP table entry is found, we overwrite the original IP
;;;363         packet with an ARP request for the IP address. */
;;;364    
;;;365      /* First check if destination is a local broadcast. */
;;;366      if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
000002  4865              LDR      r0,|L3.408|
000004  8bc0              LDRH     r0,[r0,#0x1e]  ; uip_buf
000006  4965              LDR      r1,|L3.412|
000008  8809              LDRH     r1,[r1,#0]  ; broadcast_ipaddr
00000a  4288              CMP      r0,r1
00000c  d10c              BNE      |L3.40|
00000e  4862              LDR      r0,|L3.408|
000010  8c00              LDRH     r0,[r0,#0x20]
000012  4962              LDR      r1,|L3.412|
000014  8849              LDRH     r1,[r1,#2]  ; broadcast_ipaddr
000016  4288              CMP      r0,r1
000018  d106              BNE      |L3.40|
;;;367        memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
00001a  485f              LDR      r0,|L3.408|
00001c  4960              LDR      r1,|L3.416|
00001e  680a              LDR      r2,[r1,#0]  ; broadcast_ethaddr
000020  6002              STR      r2,[r0,#0]  ; uip_buf
000022  8889              LDRH     r1,[r1,#4]  ; broadcast_ethaddr
000024  8081              STRH     r1,[r0,#4]
000026  e0a6              B        |L3.374|
                  |L3.40|
;;;368      } else {
;;;369        /* Check if the destination address is on the local network. */
;;;370        if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
000028  485b              LDR      r0,|L3.408|
00002a  8bc0              LDRH     r0,[r0,#0x1e]  ; uip_buf
00002c  495d              LDR      r1,|L3.420|
00002e  8809              LDRH     r1,[r1,#0]  ; uip_netmask
000030  4008              ANDS     r0,r0,r1
000032  495d              LDR      r1,|L3.424|
000034  8809              LDRH     r1,[r1,#0]  ; uip_hostaddr
000036  4a5b              LDR      r2,|L3.420|
000038  8812              LDRH     r2,[r2,#0]  ; uip_netmask
00003a  4011              ANDS     r1,r1,r2
00003c  4288              CMP      r0,r1
00003e  d10b              BNE      |L3.88|
000040  4855              LDR      r0,|L3.408|
000042  8c00              LDRH     r0,[r0,#0x20]
000044  4957              LDR      r1,|L3.420|
000046  8849              LDRH     r1,[r1,#2]  ; uip_netmask
000048  4008              ANDS     r0,r0,r1
00004a  4957              LDR      r1,|L3.424|
00004c  8849              LDRH     r1,[r1,#2]  ; uip_hostaddr
00004e  4a55              LDR      r2,|L3.420|
000050  8852              LDRH     r2,[r2,#2]  ; uip_netmask
000052  4011              ANDS     r1,r1,r2
000054  4288              CMP      r0,r1
000056  d008              BEQ      |L3.106|
                  |L3.88|
;;;371          /* Destination address was not on the local network, so we need to
;;;372    	 use the default router's IP address instead of the destination
;;;373    	 address when determining the MAC address. */
;;;374          uip_ipaddr_copy(ipaddr, uip_draddr);
000058  bf00              NOP      
00005a  4854              LDR      r0,|L3.428|
00005c  8800              LDRH     r0,[r0,#0]  ; uip_draddr
00005e  4954              LDR      r1,|L3.432|
000060  8008              STRH     r0,[r1,#0]
000062  4852              LDR      r0,|L3.428|
000064  8840              LDRH     r0,[r0,#2]  ; uip_draddr
000066  8048              STRH     r0,[r1,#2]
000068  e008              B        |L3.124|
                  |L3.106|
;;;375        } else {
;;;376          /* Else, we use the destination IP address. */
;;;377          uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
00006a  bf00              NOP      
00006c  484a              LDR      r0,|L3.408|
00006e  8bc0              LDRH     r0,[r0,#0x1e]  ; uip_buf
000070  494f              LDR      r1,|L3.432|
000072  8008              STRH     r0,[r1,#0]
000074  4848              LDR      r0,|L3.408|
000076  8c00              LDRH     r0,[r0,#0x20]
000078  8048              STRH     r0,[r1,#2]
00007a  bf00              NOP      
                  |L3.124|
;;;378        }
;;;379          
;;;380        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
00007c  2000              MOVS     r0,#0
00007e  494d              LDR      r1,|L3.436|
000080  7008              STRB     r0,[r1,#0]
000082  e016              B        |L3.178|
                  |L3.132|
;;;381          tabptr = &arp_table[i];
000084  484b              LDR      r0,|L3.436|
000086  7800              LDRB     r0,[r0,#0]  ; i
000088  eb000040          ADD      r0,r0,r0,LSL #1
00008c  494a              LDR      r1,|L3.440|
00008e  eb010480          ADD      r4,r1,r0,LSL #2
;;;382          if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
000092  4847              LDR      r0,|L3.432|
000094  8800              LDRH     r0,[r0,#0]  ; ipaddr
000096  8821              LDRH     r1,[r4,#0]
000098  4288              CMP      r0,r1
00009a  d105              BNE      |L3.168|
00009c  4844              LDR      r0,|L3.432|
00009e  8840              LDRH     r0,[r0,#2]  ; ipaddr
0000a0  8861              LDRH     r1,[r4,#2]
0000a2  4288              CMP      r0,r1
0000a4  d100              BNE      |L3.168|
;;;383    	break;
0000a6  e008              B        |L3.186|
                  |L3.168|
0000a8  4842              LDR      r0,|L3.436|
0000aa  7800              LDRB     r0,[r0,#0]            ;380  ; i
0000ac  1c40              ADDS     r0,r0,#1              ;380
0000ae  4941              LDR      r1,|L3.436|
0000b0  7008              STRB     r0,[r1,#0]            ;380
                  |L3.178|
0000b2  4840              LDR      r0,|L3.436|
0000b4  7800              LDRB     r0,[r0,#0]            ;380  ; i
0000b6  2808              CMP      r0,#8                 ;380
0000b8  dbe4              BLT      |L3.132|
                  |L3.186|
0000ba  bf00              NOP      
;;;384          }
;;;385        }
;;;386    
;;;387        if(i == UIP_ARPTAB_SIZE) {
0000bc  483d              LDR      r0,|L3.436|
0000be  7800              LDRB     r0,[r0,#0]  ; i
0000c0  2808              CMP      r0,#8
0000c2  d153              BNE      |L3.364|
;;;388          /* The destination address was not in our ARP table, so we
;;;389    	 overwrite the IP packet with an ARP request. */
;;;390    
;;;391          memset(ABUF->ethhdr.dest.addr, 0xff, 6);
0000c4  22ff              MOVS     r2,#0xff
0000c6  2106              MOVS     r1,#6
0000c8  483c              LDR      r0,|L3.444|
0000ca  6800              LDR      r0,[r0,#0]  ; ABUF
0000cc  f7fffffe          BL       __aeabi_memset
;;;392          memset(ABUF->dhwaddr.addr, 0x00, 6);
0000d0  483a              LDR      r0,|L3.444|
0000d2  6800              LDR      r0,[r0,#0]  ; ABUF
0000d4  2100              MOVS     r1,#0
0000d6  6201              STR      r1,[r0,#0x20]
0000d8  8481              STRH     r1,[r0,#0x24]
;;;393          memcpy(ABUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
0000da  4838              LDR      r0,|L3.444|
0000dc  6800              LDR      r0,[r0,#0]  ; ABUF
0000de  4938              LDR      r1,|L3.448|
0000e0  680a              LDR      r2,[r1,#0]  ; uip_ethaddr
0000e2  f8c02006          STR      r2,[r0,#6]
0000e6  8889              LDRH     r1,[r1,#4]  ; uip_ethaddr
0000e8  8141              STRH     r1,[r0,#0xa]
;;;394          memcpy(ABUF->shwaddr.addr, uip_ethaddr.addr, 6);
0000ea  4834              LDR      r0,|L3.444|
0000ec  6800              LDR      r0,[r0,#0]  ; ABUF
0000ee  4934              LDR      r1,|L3.448|
0000f0  680a              LDR      r2,[r1,#0]  ; uip_ethaddr
0000f2  f8c02016          STR      r2,[r0,#0x16]
0000f6  8889              LDRH     r1,[r1,#4]  ; uip_ethaddr
0000f8  8341              STRH     r1,[r0,#0x1a]
;;;395        
;;;396          uip_ipaddr_copy(ABUF->dipaddr, ipaddr);
0000fa  bf00              NOP      
0000fc  482c              LDR      r0,|L3.432|
0000fe  8800              LDRH     r0,[r0,#0]  ; ipaddr
000100  492e              LDR      r1,|L3.444|
000102  6809              LDR      r1,[r1,#0]  ; ABUF
000104  84c8              STRH     r0,[r1,#0x26]
000106  482a              LDR      r0,|L3.432|
000108  8841              LDRH     r1,[r0,#2]  ; ipaddr
00010a  482c              LDR      r0,|L3.444|
00010c  6800              LDR      r0,[r0,#0]  ; ABUF
00010e  8501              STRH     r1,[r0,#0x28]
000110  bf00              NOP      
;;;397          uip_ipaddr_copy(ABUF->sipaddr, uip_hostaddr);
000112  bf00              NOP      
000114  4824              LDR      r0,|L3.424|
000116  8800              LDRH     r0,[r0,#0]  ; uip_hostaddr
000118  4928              LDR      r1,|L3.444|
00011a  6809              LDR      r1,[r1,#0]  ; ABUF
00011c  8388              STRH     r0,[r1,#0x1c]
00011e  4822              LDR      r0,|L3.424|
000120  8841              LDRH     r1,[r0,#2]  ; uip_hostaddr
000122  4826              LDR      r0,|L3.444|
000124  6800              LDR      r0,[r0,#0]  ; ABUF
000126  83c1              STRH     r1,[r0,#0x1e]
000128  bf00              NOP      
;;;398          ABUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
00012a  f44f7080          MOV      r0,#0x100
00012e  4923              LDR      r1,|L3.444|
000130  6809              LDR      r1,[r1,#0]  ; ABUF
000132  8288              STRH     r0,[r1,#0x14]
;;;399          ABUF->hwtype = HTONS(ARP_HWTYPE_ETH);
000134  4921              LDR      r1,|L3.444|
000136  6809              LDR      r1,[r1,#0]  ; ABUF
000138  81c8              STRH     r0,[r1,#0xe]
;;;400          ABUF->protocol = HTONS(UIP_ETHTYPE_IP);
00013a  2008              MOVS     r0,#8
00013c  491f              LDR      r1,|L3.444|
00013e  6809              LDR      r1,[r1,#0]  ; ABUF
000140  8208              STRH     r0,[r1,#0x10]
;;;401          ABUF->hwlen = 6;
000142  2006              MOVS     r0,#6
000144  491d              LDR      r1,|L3.444|
000146  6809              LDR      r1,[r1,#0]  ; ABUF
000148  7488              STRB     r0,[r1,#0x12]
;;;402          ABUF->protolen = 4;
00014a  2004              MOVS     r0,#4
00014c  491b              LDR      r1,|L3.444|
00014e  6809              LDR      r1,[r1,#0]  ; ABUF
000150  74c8              STRB     r0,[r1,#0x13]
;;;403          ABUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
000152  f44f60c1          MOV      r0,#0x608
000156  4919              LDR      r1,|L3.444|
000158  6809              LDR      r1,[r1,#0]  ; ABUF
00015a  8188              STRH     r0,[r1,#0xc]
;;;404    
;;;405          uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
00015c  480e              LDR      r0,|L3.408|
00015e  3036              ADDS     r0,r0,#0x36
000160  4918              LDR      r1,|L3.452|
000162  6008              STR      r0,[r1,#0]  ; uip_appdata
;;;406        
;;;407          uip_len = sizeof(struct arp_hdr);
000164  202a              MOVS     r0,#0x2a
000166  4918              LDR      r1,|L3.456|
000168  8008              STRH     r0,[r1,#0]
                  |L3.362|
;;;408          return;
;;;409        }
;;;410    
;;;411        /* Build an ethernet header. */
;;;412        memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
;;;413      }
;;;414      memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
;;;415      
;;;416      IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
;;;417    
;;;418      uip_len += sizeof(struct uip_eth_hdr);
;;;419    }
00016a  bd10              POP      {r4,pc}
                  |L3.364|
00016c  480a              LDR      r0,|L3.408|
00016e  6861              LDR      r1,[r4,#4]            ;412
000170  6001              STR      r1,[r0,#0]            ;412  ; uip_buf
000172  8921              LDRH     r1,[r4,#8]            ;412
000174  8081              STRH     r1,[r0,#4]            ;412
                  |L3.374|
000176  4808              LDR      r0,|L3.408|
000178  4911              LDR      r1,|L3.448|
00017a  680a              LDR      r2,[r1,#0]            ;414  ; uip_ethaddr
00017c  f8c02006          STR      r2,[r0,#6]            ;414  ; uip_buf
000180  8889              LDRH     r1,[r1,#4]            ;414  ; uip_ethaddr
000182  8141              STRH     r1,[r0,#0xa]          ;414
000184  2008              MOVS     r0,#8                 ;416
000186  4904              LDR      r1,|L3.408|
000188  8188              STRH     r0,[r1,#0xc]          ;416
00018a  480f              LDR      r0,|L3.456|
00018c  8800              LDRH     r0,[r0,#0]            ;418  ; uip_len
00018e  300e              ADDS     r0,r0,#0xe            ;418
000190  490d              LDR      r1,|L3.456|
000192  8008              STRH     r0,[r1,#0]            ;418
000194  bf00              NOP      
000196  e7e8              B        |L3.362|
;;;420    /*-----------------------------------------------------------------------------------*/
                          ENDP

                  |L3.408|
                          DCD      uip_buf
                  |L3.412|
                          DCD      broadcast_ipaddr
                  |L3.416|
                          DCD      broadcast_ethaddr
                  |L3.420|
                          DCD      uip_netmask
                  |L3.424|
                          DCD      uip_hostaddr
                  |L3.428|
                          DCD      uip_draddr
                  |L3.432|
                          DCD      ipaddr
                  |L3.436|
                          DCD      i
                  |L3.440|
                          DCD      arp_table
                  |L3.444|
                          DCD      ABUF
                  |L3.448|
                          DCD      uip_ethaddr
                  |L3.452|
                          DCD      uip_appdata
                  |L3.456|
                          DCD      uip_len

                          AREA ||i.uip_arp_timer||, CODE, READONLY, ALIGN=2

                  uip_arp_timer PROC
;;;141    void
;;;142    uip_arp_timer(void)
000000  4912              LDR      r1,|L4.76|
;;;143    {
;;;144      struct arp_entry *tabptr;
;;;145      
;;;146      ++arptime;
000002  7809              LDRB     r1,[r1,#0]  ; arptime
000004  1c49              ADDS     r1,r1,#1
000006  4a11              LDR      r2,|L4.76|
000008  7011              STRB     r1,[r2,#0]
;;;147      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
00000a  2100              MOVS     r1,#0
00000c  4a10              LDR      r2,|L4.80|
00000e  7011              STRB     r1,[r2,#0]
000010  e017              B        |L4.66|
                  |L4.18|
;;;148        tabptr = &arp_table[i];
000012  490f              LDR      r1,|L4.80|
000014  7809              LDRB     r1,[r1,#0]  ; i
000016  eb010141          ADD      r1,r1,r1,LSL #1
00001a  4a0e              LDR      r2,|L4.84|
00001c  eb020081          ADD      r0,r2,r1,LSL #2
;;;149        if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
000020  8801              LDRH     r1,[r0,#0]
000022  8842              LDRH     r2,[r0,#2]
000024  4311              ORRS     r1,r1,r2
000026  b139              CBZ      r1,|L4.56|
;;;150           arptime - tabptr->time >= UIP_ARP_MAXAGE) {
000028  7a81              LDRB     r1,[r0,#0xa]
00002a  4a08              LDR      r2,|L4.76|
00002c  7812              LDRB     r2,[r2,#0]  ; arptime
00002e  1a51              SUBS     r1,r2,r1
000030  2978              CMP      r1,#0x78
000032  db01              BLT      |L4.56|
;;;151          memset(tabptr->ipaddr, 0, 4);
000034  2100              MOVS     r1,#0
000036  6001              STR      r1,[r0,#0]
                  |L4.56|
000038  4905              LDR      r1,|L4.80|
00003a  7809              LDRB     r1,[r1,#0]            ;147  ; i
00003c  1c49              ADDS     r1,r1,#1              ;147
00003e  4a04              LDR      r2,|L4.80|
000040  7011              STRB     r1,[r2,#0]            ;147
                  |L4.66|
000042  4903              LDR      r1,|L4.80|
000044  7809              LDRB     r1,[r1,#0]            ;147  ; i
000046  2908              CMP      r1,#8                 ;147
000048  dbe3              BLT      |L4.18|
;;;152        }
;;;153      }
;;;154    
;;;155    }
00004a  4770              BX       lr
;;;156    /*-----------------------------------------------------------------------------------*/
                          ENDP

                  |L4.76|
                          DCD      arptime
                  |L4.80|
                          DCD      i
                  |L4.84|
                          DCD      arp_table

                          AREA ||i.uip_arp_update||, CODE, READONLY, ALIGN=2

                  uip_arp_update PROC
;;;157    static void
;;;158    uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
000000  b510              PUSH     {r4,lr}
;;;159    {
000002  4602              MOV      r2,r0
;;;160      register struct arp_entry *tabptr;
;;;161      /* Walk through the ARP mapping table and try to find an entry to
;;;162         update. If none is found, the IP -> MAC address mapping is
;;;163         inserted in the ARP table. */
;;;164      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
000004  2300              MOVS     r3,#0
000006  4c42              LDR      r4,|L5.272|
000008  7023              STRB     r3,[r4,#0]
00000a  e01f              B        |L5.76|
                  |L5.12|
;;;165    
;;;166        tabptr = &arp_table[i];
00000c  4b40              LDR      r3,|L5.272|
00000e  781b              LDRB     r3,[r3,#0]  ; i
000010  eb030343          ADD      r3,r3,r3,LSL #1
000014  4c3f              LDR      r4,|L5.276|
000016  eb040083          ADD      r0,r4,r3,LSL #2
;;;167        /* Only check those entries that are actually in use. */
;;;168        if(tabptr->ipaddr[0] != 0 &&
00001a  8803              LDRH     r3,[r0,#0]
00001c  b18b              CBZ      r3,|L5.66|
;;;169           tabptr->ipaddr[1] != 0) {
00001e  8843              LDRH     r3,[r0,#2]
000020  b17b              CBZ      r3,|L5.66|
;;;170    
;;;171          /* Check if the source IP address of the incoming packet matches
;;;172             the IP address in this ARP table entry. */
;;;173          if(ipaddr[0] == tabptr->ipaddr[0] &&
000022  8813              LDRH     r3,[r2,#0]
000024  8804              LDRH     r4,[r0,#0]
000026  42a3              CMP      r3,r4
000028  d10b              BNE      |L5.66|
;;;174    	 ipaddr[1] == tabptr->ipaddr[1]) {
00002a  8853              LDRH     r3,[r2,#2]
00002c  8844              LDRH     r4,[r0,#2]
00002e  42a3              CMP      r3,r4
000030  d107              BNE      |L5.66|
;;;175    	 
;;;176    	/* An old entry found, update this and return. */
;;;177    	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
000032  680b              LDR      r3,[r1,#0]
000034  6043              STR      r3,[r0,#4]
000036  888b              LDRH     r3,[r1,#4]
000038  8103              STRH     r3,[r0,#8]
;;;178    	tabptr->time = arptime;
00003a  4b37              LDR      r3,|L5.280|
00003c  781b              LDRB     r3,[r3,#0]  ; arptime
00003e  7283              STRB     r3,[r0,#0xa]
                  |L5.64|
;;;179    
;;;180    	return;
;;;181          }
;;;182        }
;;;183      }
;;;184    
;;;185      /* If we get here, no existing ARP table entry was found, so we
;;;186         create one. */
;;;187    
;;;188      /* First, we try to find an unused entry in the ARP table. */
;;;189      for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
;;;190        tabptr = &arp_table[i];
;;;191        if(tabptr->ipaddr[0] == 0 &&
;;;192           tabptr->ipaddr[1] == 0) {
;;;193          break;
;;;194        }
;;;195      }
;;;196    
;;;197      /* If no unused entry is found, we try to find the oldest entry and
;;;198         throw it away. */
;;;199      if(i == UIP_ARPTAB_SIZE) {
;;;200        tmpage = 0;
;;;201        c = 0;
;;;202        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
;;;203          tabptr = &arp_table[i];
;;;204          if(arptime - tabptr->time > tmpage) {
;;;205    	tmpage = arptime - tabptr->time;
;;;206    	c = i;
;;;207          }
;;;208        }
;;;209        i = c;
;;;210        tabptr = &arp_table[i];
;;;211      }
;;;212    
;;;213      /* Now, i is the ARP table entry which we will fill with the new
;;;214         information. */
;;;215      memcpy(tabptr->ipaddr, ipaddr, 4);
;;;216      memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
;;;217      tabptr->time = arptime;
;;;218    }
000040  bd10              POP      {r4,pc}
                  |L5.66|
000042  4b33              LDR      r3,|L5.272|
000044  781b              LDRB     r3,[r3,#0]            ;164  ; i
000046  1c5b              ADDS     r3,r3,#1              ;164
000048  4c31              LDR      r4,|L5.272|
00004a  7023              STRB     r3,[r4,#0]            ;164
                  |L5.76|
00004c  4b30              LDR      r3,|L5.272|
00004e  781b              LDRB     r3,[r3,#0]            ;164  ; i
000050  2b08              CMP      r3,#8                 ;164
000052  dbdb              BLT      |L5.12|
000054  2300              MOVS     r3,#0                 ;189
000056  4c2e              LDR      r4,|L5.272|
000058  7023              STRB     r3,[r4,#0]            ;189
00005a  e010              B        |L5.126|
                  |L5.92|
00005c  4b2c              LDR      r3,|L5.272|
00005e  781b              LDRB     r3,[r3,#0]            ;190  ; i
000060  eb030343          ADD      r3,r3,r3,LSL #1       ;190
000064  4c2b              LDR      r4,|L5.276|
000066  eb040083          ADD      r0,r4,r3,LSL #2       ;190
00006a  8803              LDRH     r3,[r0,#0]            ;191
00006c  b913              CBNZ     r3,|L5.116|
00006e  8843              LDRH     r3,[r0,#2]            ;192
000070  b903              CBNZ     r3,|L5.116|
000072  e008              B        |L5.134|
                  |L5.116|
000074  4b26              LDR      r3,|L5.272|
000076  781b              LDRB     r3,[r3,#0]            ;189  ; i
000078  1c5b              ADDS     r3,r3,#1              ;189
00007a  4c25              LDR      r4,|L5.272|
00007c  7023              STRB     r3,[r4,#0]            ;189
                  |L5.126|
00007e  4b24              LDR      r3,|L5.272|
000080  781b              LDRB     r3,[r3,#0]            ;189  ; i
000082  2b08              CMP      r3,#8                 ;189
000084  dbea              BLT      |L5.92|
                  |L5.134|
000086  bf00              NOP                            ;193
000088  4b21              LDR      r3,|L5.272|
00008a  781b              LDRB     r3,[r3,#0]            ;199  ; i
00008c  2b08              CMP      r3,#8                 ;199
00008e  d134              BNE      |L5.250|
000090  2300              MOVS     r3,#0                 ;200
000092  4c22              LDR      r4,|L5.284|
000094  7023              STRB     r3,[r4,#0]            ;200
000096  4c22              LDR      r4,|L5.288|
000098  7023              STRB     r3,[r4,#0]            ;201
00009a  4c1d              LDR      r4,|L5.272|
00009c  7023              STRB     r3,[r4,#0]            ;202
00009e  e01d              B        |L5.220|
                  |L5.160|
0000a0  4b1b              LDR      r3,|L5.272|
0000a2  781b              LDRB     r3,[r3,#0]            ;203  ; i
0000a4  eb030343          ADD      r3,r3,r3,LSL #1       ;203
0000a8  4c1a              LDR      r4,|L5.276|
0000aa  eb040083          ADD      r0,r4,r3,LSL #2       ;203
0000ae  7a83              LDRB     r3,[r0,#0xa]          ;204
0000b0  4c19              LDR      r4,|L5.280|
0000b2  7824              LDRB     r4,[r4,#0]            ;204  ; arptime
0000b4  1ae3              SUBS     r3,r4,r3              ;204
0000b6  4c19              LDR      r4,|L5.284|
0000b8  7824              LDRB     r4,[r4,#0]            ;204  ; tmpage
0000ba  42a3              CMP      r3,r4                 ;204
0000bc  dd09              BLE      |L5.210|
0000be  7a83              LDRB     r3,[r0,#0xa]          ;205
0000c0  4c15              LDR      r4,|L5.280|
0000c2  7824              LDRB     r4,[r4,#0]            ;205  ; arptime
0000c4  1ae3              SUBS     r3,r4,r3              ;205
0000c6  4c15              LDR      r4,|L5.284|
0000c8  7023              STRB     r3,[r4,#0]            ;205
0000ca  4b11              LDR      r3,|L5.272|
0000cc  781b              LDRB     r3,[r3,#0]            ;206  ; i
0000ce  4c14              LDR      r4,|L5.288|
0000d0  7023              STRB     r3,[r4,#0]            ;206
                  |L5.210|
0000d2  4b0f              LDR      r3,|L5.272|
0000d4  781b              LDRB     r3,[r3,#0]            ;202  ; i
0000d6  1c5b              ADDS     r3,r3,#1              ;202
0000d8  4c0d              LDR      r4,|L5.272|
0000da  7023              STRB     r3,[r4,#0]            ;202
                  |L5.220|
0000dc  4b0c              LDR      r3,|L5.272|
0000de  781b              LDRB     r3,[r3,#0]            ;202  ; i
0000e0  2b08              CMP      r3,#8                 ;202
0000e2  dbdd              BLT      |L5.160|
0000e4  4b0e              LDR      r3,|L5.288|
0000e6  781b              LDRB     r3,[r3,#0]            ;209  ; c
0000e8  4c09              LDR      r4,|L5.272|
0000ea  7023              STRB     r3,[r4,#0]            ;209
0000ec  4623              MOV      r3,r4                 ;210
0000ee  781b              LDRB     r3,[r3,#0]            ;210  ; i
0000f0  eb030343          ADD      r3,r3,r3,LSL #1       ;210
0000f4  4c07              LDR      r4,|L5.276|
0000f6  eb040083          ADD      r0,r4,r3,LSL #2       ;210
                  |L5.250|
0000fa  6813              LDR      r3,[r2,#0]            ;215
0000fc  6003              STR      r3,[r0,#0]            ;215
0000fe  680b              LDR      r3,[r1,#0]            ;216
000100  6043              STR      r3,[r0,#4]            ;216
000102  888b              LDRH     r3,[r1,#4]            ;216
000104  8103              STRH     r3,[r0,#8]            ;216
000106  4b04              LDR      r3,|L5.280|
000108  781b              LDRB     r3,[r3,#0]            ;217  ; arptime
00010a  7283              STRB     r3,[r0,#0xa]          ;217
00010c  bf00              NOP      
00010e  e797              B        |L5.64|
;;;219    /*-----------------------------------------------------------------------------------*/
                          ENDP

                  |L5.272|
                          DCD      i
                  |L5.276|
                          DCD      arp_table
                  |L5.280|
                          DCD      arptime
                  |L5.284|
                          DCD      tmpage
                  |L5.288|
                          DCD      c

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  arp_table
                          %        96

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  broadcast_ethaddr
000000  ffffffff          DCB      0xff,0xff,0xff,0xff
000004  ffff              DCB      0xff,0xff
                  broadcast_ipaddr
000006  ffff              DCW      0xffff
000008  ffff              DCW      0xffff

                          AREA ||.data||, DATA, ALIGN=2

                  ipaddr
                          DCD      0x00000000
                  i
000004  00                DCB      0x00
                  c
000005  00                DCB      0x00
                  arptime
000006  00                DCB      0x00
                  tmpage
000007  00                DCB      0x00
                  ABUF
                          DCD      uip_buf
                  ||ii||
00000c  0000              DCB      0x00,0x00
                  ||jj||
00000e  0000              DCB      0x00,0x00
