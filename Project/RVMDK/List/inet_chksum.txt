; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\inet_chksum.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\inet_chksum.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\ -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\lwip\src\api -I..\..\lwip\src\arch -I..\..\lwip\src\include -I..\..\lwip\src\netif -I..\..\lwip\src\include\ipv4 -I..\..\Source\inc -I..\..\lwip\src -I..\..\Source\uIP-1.0\uip -I..\..\Source\uIP-APP -I..\..\Source\uIP-1.0\apps\webserver -IE:\git_projects\enc28j60-for-uip\Project\RVMDK\RTE -I"D:\Program Files\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include" -I"D:\Program Files\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=518 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\inet_chksum.crf ..\..\lwip\src\core\ipv4\inet_chksum.c]
                          THUMB

                          AREA ||i.inet_chksum||, CODE, READONLY, ALIGN=1

                  inet_chksum PROC
;;;395    u16_t
;;;396    inet_chksum(void *dataptr, u16_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;397    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;398      return ~LWIP_CHKSUM(dataptr, len);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       lwip_standard_chksum
00000e  43c0              MVNS     r0,r0
000010  b280              UXTH     r0,r0
;;;399    }
000012  bd70              POP      {r4-r6,pc}
;;;400    
                          ENDP


                          AREA ||i.inet_chksum_pbuf||, CODE, READONLY, ALIGN=1

                  inet_chksum_pbuf PROC
;;;408    u16_t
;;;409    inet_chksum_pbuf(struct pbuf *p)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;410    {
000004  4606              MOV      r6,r0
;;;411      u32_t acc;
;;;412      struct pbuf *q;
;;;413      u8_t swapped;
;;;414    
;;;415      acc = 0;
000006  2400              MOVS     r4,#0
;;;416      swapped = 0;
000008  2700              MOVS     r7,#0
;;;417      for(q = p; q != NULL; q = q->next) {
00000a  4635              MOV      r5,r6
00000c  e017              B        |L2.62|
                  |L2.14|
;;;418        acc += LWIP_CHKSUM(q->payload, q->len);
00000e  8969              LDRH     r1,[r5,#0xa]
000010  6868              LDR      r0,[r5,#4]
000012  f7fffffe          BL       lwip_standard_chksum
000016  4404              ADD      r4,r4,r0
;;;419        acc = FOLD_U32T(acc);
000018  b2a0              UXTH     r0,r4
00001a  eb004414          ADD      r4,r0,r4,LSR #16
;;;420        if (q->len % 2 != 0) {
00001e  8968              LDRH     r0,[r5,#0xa]
000020  eb0071d0          ADD      r1,r0,r0,LSR #31
000024  1049              ASRS     r1,r1,#1
000026  eba00141          SUB      r1,r0,r1,LSL #1
00002a  b139              CBZ      r1,|L2.60|
;;;421          swapped = 1 - swapped;
00002c  f1c70001          RSB      r0,r7,#1
000030  b2c7              UXTB     r7,r0
;;;422          acc = SWAP_BYTES_IN_WORD(acc);
000032  b2e0              UXTB     r0,r4
000034  f3c42107          UBFX     r1,r4,#8,#8
000038  ea412400          ORR      r4,r1,r0,LSL #8
                  |L2.60|
00003c  682d              LDR      r5,[r5,#0]            ;417
                  |L2.62|
00003e  2d00              CMP      r5,#0                 ;417
000040  d1e5              BNE      |L2.14|
;;;423        }
;;;424      }
;;;425    
;;;426      if (swapped) {
000042  b127              CBZ      r7,|L2.78|
;;;427        acc = SWAP_BYTES_IN_WORD(acc);
000044  b2e0              UXTB     r0,r4
000046  f3c42107          UBFX     r1,r4,#8,#8
00004a  ea412400          ORR      r4,r1,r0,LSL #8
                  |L2.78|
;;;428      }
;;;429      return (u16_t)~(acc & 0xffffUL);
00004e  43e0              MVNS     r0,r4
000050  b280              UXTH     r0,r0
;;;430    }
000052  e8bd81f0          POP      {r4-r8,pc}
;;;431    
                          ENDP


                          AREA ||i.inet_chksum_pseudo||, CODE, READONLY, ALIGN=1

                  inet_chksum_pseudo PROC
;;;271    u16_t
;;;272    inet_chksum_pseudo(struct pbuf *p,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;273           ip_addr_t *src, ip_addr_t *dest,
;;;274           u8_t proto, u16_t proto_len)
;;;275    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;276      u32_t acc;
;;;277      u32_t addr;
;;;278      struct pbuf *q;
;;;279      u8_t swapped;
;;;280    
;;;281      acc = 0;
00000c  2400              MOVS     r4,#0
;;;282      swapped = 0;
00000e  46a3              MOV      r11,r4
;;;283      /* iterate through all pbuf in chain */
;;;284      for(q = p; q != NULL; q = q->next) {
000010  463d              MOV      r5,r7
000012  e01a              B        |L3.74|
                  |L3.20|
;;;285        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
000014  bf00              NOP      
000016  bf00              NOP      
;;;286          (void *)q, (void *)q->next));
;;;287        acc += LWIP_CHKSUM(q->payload, q->len);
000018  8969              LDRH     r1,[r5,#0xa]
00001a  6868              LDR      r0,[r5,#4]
00001c  f7fffffe          BL       lwip_standard_chksum
000020  4404              ADD      r4,r4,r0
;;;288        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;289        /* just executing this next line is probably faster that the if statement needed
;;;290           to check whether we really need to execute it, and does no harm */
;;;291        acc = FOLD_U32T(acc);
000022  b2a0              UXTH     r0,r4
000024  eb004414          ADD      r4,r0,r4,LSR #16
;;;292        if (q->len % 2 != 0) {
000028  8968              LDRH     r0,[r5,#0xa]
00002a  eb0071d0          ADD      r1,r0,r0,LSR #31
00002e  1049              ASRS     r1,r1,#1
000030  eba00141          SUB      r1,r0,r1,LSL #1
000034  b141              CBZ      r1,|L3.72|
;;;293          swapped = 1 - swapped;
000036  f1cb0001          RSB      r0,r11,#1
00003a  f0000bff          AND      r11,r0,#0xff
;;;294          acc = SWAP_BYTES_IN_WORD(acc);
00003e  b2e0              UXTB     r0,r4
000040  f3c42107          UBFX     r1,r4,#8,#8
000044  ea412400          ORR      r4,r1,r0,LSL #8
                  |L3.72|
000048  682d              LDR      r5,[r5,#0]            ;284
                  |L3.74|
00004a  2d00              CMP      r5,#0                 ;284
00004c  d1e2              BNE      |L3.20|
;;;295        }
;;;296        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;297      }
;;;298    
;;;299      if (swapped) {
00004e  f1bb0f00          CMP      r11,#0
000052  d004              BEQ      |L3.94|
;;;300        acc = SWAP_BYTES_IN_WORD(acc);
000054  b2e0              UXTB     r0,r4
000056  f3c42107          UBFX     r1,r4,#8,#8
00005a  ea412400          ORR      r4,r1,r0,LSL #8
                  |L3.94|
;;;301      }
;;;302      addr = ip4_addr_get_u32(src);
00005e  f8d86000          LDR      r6,[r8,#0]
;;;303      acc += (addr & 0xffffUL);
000062  b2b0              UXTH     r0,r6
000064  4404              ADD      r4,r4,r0
;;;304      acc += ((addr >> 16) & 0xffffUL);
000066  f64f70ff          MOV      r0,#0xffff
00006a  ea004016          AND      r0,r0,r6,LSR #16
00006e  4404              ADD      r4,r4,r0
;;;305      addr = ip4_addr_get_u32(dest);
000070  f8d96000          LDR      r6,[r9,#0]
;;;306      acc += (addr & 0xffffUL);
000074  b2b0              UXTH     r0,r6
000076  4404              ADD      r4,r4,r0
;;;307      acc += ((addr >> 16) & 0xffffUL);
000078  f64f70ff          MOV      r0,#0xffff
00007c  ea004016          AND      r0,r0,r6,LSR #16
000080  4404              ADD      r4,r4,r0
;;;308      acc += (u32_t)htons((u16_t)proto);
000082  4650              MOV      r0,r10
000084  f7fffffe          BL       lwip_htons
000088  4404              ADD      r4,r4,r0
;;;309      acc += (u32_t)htons(proto_len);
00008a  980a              LDR      r0,[sp,#0x28]
00008c  f7fffffe          BL       lwip_htons
000090  4404              ADD      r4,r4,r0
;;;310    
;;;311      /* Fold 32-bit sum to 16 bits
;;;312         calling this twice is propably faster than if statements... */
;;;313      acc = FOLD_U32T(acc);
000092  b2a0              UXTH     r0,r4
000094  eb004414          ADD      r4,r0,r4,LSR #16
;;;314      acc = FOLD_U32T(acc);
000098  b2a0              UXTH     r0,r4
00009a  eb004414          ADD      r4,r0,r4,LSR #16
;;;315      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
00009e  bf00              NOP      
0000a0  bf00              NOP      
;;;316      return (u16_t)~(acc & 0xffffUL);
0000a2  43e0              MVNS     r0,r4
0000a4  b280              UXTH     r0,r0
;;;317    }
0000a6  e8bd9ff0          POP      {r4-r12,pc}
;;;318    
                          ENDP


                          AREA ||i.inet_chksum_pseudo_partial||, CODE, READONLY, ALIGN=2

                  inet_chksum_pseudo_partial PROC
;;;331    u16_t
;;;332    inet_chksum_pseudo_partial(struct pbuf *p,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;333           ip_addr_t *src, ip_addr_t *dest,
;;;334           u8_t proto, u16_t proto_len, u16_t chksum_len)
;;;335    {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  9d0f              LDR      r5,[sp,#0x3c]
;;;336      u32_t acc;
;;;337      u32_t addr;
;;;338      struct pbuf *q;
;;;339      u8_t swapped;
;;;340      u16_t chklen;
;;;341    
;;;342      acc = 0;
00000a  2400              MOVS     r4,#0
;;;343      swapped = 0;
00000c  46a3              MOV      r11,r4
;;;344      /* iterate through all pbuf in chain */
;;;345      for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
00000e  464e              MOV      r6,r9
000010  e02d              B        |L4.110|
                  |L4.18|
;;;346        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
000012  bf00              NOP      
000014  bf00              NOP      
;;;347          (void *)q, (void *)q->next));
;;;348        chklen = q->len;
000016  f8b6800a          LDRH     r8,[r6,#0xa]
;;;349        if (chklen > chksum_len) {
00001a  45a8              CMP      r8,r5
00001c  dd00              BLE      |L4.32|
;;;350          chklen = chksum_len;
00001e  46a8              MOV      r8,r5
                  |L4.32|
;;;351        }
;;;352        acc += LWIP_CHKSUM(q->payload, chklen);
000020  4641              MOV      r1,r8
000022  6870              LDR      r0,[r6,#4]
000024  f7fffffe          BL       lwip_standard_chksum
000028  4404              ADD      r4,r4,r0
;;;353        chksum_len -= chklen;
00002a  eba50008          SUB      r0,r5,r8
00002e  b285              UXTH     r5,r0
;;;354        LWIP_ASSERT("delete me", chksum_len < 0x7fff);
000030  bf00              NOP      
000032  f64770ff          MOV      r0,#0x7fff
000036  4285              CMP      r5,r0
000038  db04              BLT      |L4.68|
00003a  a026              ADR      r0,|L4.212|
00003c  f7fffffe          BL       __2printf
000040  bf00              NOP      
                  |L4.66|
000042  e7fe              B        |L4.66|
                  |L4.68|
000044  bf00              NOP      
;;;355        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;356        /* fold the upper bit down */
;;;357        acc = FOLD_U32T(acc);
000046  b2a0              UXTH     r0,r4
000048  eb004414          ADD      r4,r0,r4,LSR #16
;;;358        if (q->len % 2 != 0) {
00004c  8970              LDRH     r0,[r6,#0xa]
00004e  eb0071d0          ADD      r1,r0,r0,LSR #31
000052  1049              ASRS     r1,r1,#1
000054  eba00141          SUB      r1,r0,r1,LSL #1
000058  b141              CBZ      r1,|L4.108|
;;;359          swapped = 1 - swapped;
00005a  f1cb0001          RSB      r0,r11,#1
00005e  f0000bff          AND      r11,r0,#0xff
;;;360          acc = SWAP_BYTES_IN_WORD(acc);
000062  b2e0              UXTB     r0,r4
000064  f3c42107          UBFX     r1,r4,#8,#8
000068  ea412400          ORR      r4,r1,r0,LSL #8
                  |L4.108|
00006c  6836              LDR      r6,[r6,#0]            ;345
                  |L4.110|
00006e  b10e              CBZ      r6,|L4.116|
000070  2d00              CMP      r5,#0                 ;345
000072  dcce              BGT      |L4.18|
                  |L4.116|
;;;361        }
;;;362        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;363      }
;;;364    
;;;365      if (swapped) {
000074  f1bb0f00          CMP      r11,#0
000078  d004              BEQ      |L4.132|
;;;366        acc = SWAP_BYTES_IN_WORD(acc);
00007a  b2e0              UXTB     r0,r4
00007c  f3c42107          UBFX     r1,r4,#8,#8
000080  ea412400          ORR      r4,r1,r0,LSL #8
                  |L4.132|
;;;367      }
;;;368      addr = ip4_addr_get_u32(src);
000084  f8da7000          LDR      r7,[r10,#0]
;;;369      acc += (addr & 0xffffUL);
000088  b2b8              UXTH     r0,r7
00008a  4404              ADD      r4,r4,r0
;;;370      acc += ((addr >> 16) & 0xffffUL);
00008c  f64f70ff          MOV      r0,#0xffff
000090  ea004017          AND      r0,r0,r7,LSR #16
000094  4404              ADD      r4,r4,r0
;;;371      addr = ip4_addr_get_u32(dest);
000096  9802              LDR      r0,[sp,#8]
000098  6807              LDR      r7,[r0,#0]
;;;372      acc += (addr & 0xffffUL);
00009a  b2b8              UXTH     r0,r7
00009c  4404              ADD      r4,r4,r0
;;;373      acc += ((addr >> 16) & 0xffffUL);
00009e  f64f70ff          MOV      r0,#0xffff
0000a2  ea004017          AND      r0,r0,r7,LSR #16
0000a6  4404              ADD      r4,r4,r0
;;;374      acc += (u32_t)htons((u16_t)proto);
0000a8  9803              LDR      r0,[sp,#0xc]
0000aa  f7fffffe          BL       lwip_htons
0000ae  4404              ADD      r4,r4,r0
;;;375      acc += (u32_t)htons(proto_len);
0000b0  980e              LDR      r0,[sp,#0x38]
0000b2  f7fffffe          BL       lwip_htons
0000b6  4404              ADD      r4,r4,r0
;;;376    
;;;377      /* Fold 32-bit sum to 16 bits
;;;378         calling this twice is propably faster than if statements... */
;;;379      acc = FOLD_U32T(acc);
0000b8  b2a0              UXTH     r0,r4
0000ba  eb004414          ADD      r4,r0,r4,LSR #16
;;;380      acc = FOLD_U32T(acc);
0000be  b2a0              UXTH     r0,r4
0000c0  eb004414          ADD      r4,r0,r4,LSR #16
;;;381      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
0000c4  bf00              NOP      
0000c6  bf00              NOP      
;;;382      return (u16_t)~(acc & 0xffffUL);
0000c8  43e0              MVNS     r0,r4
0000ca  b280              UXTH     r0,r0
;;;383    }
0000cc  b004              ADD      sp,sp,#0x10
0000ce  e8bd9ff0          POP      {r4-r12,pc}
;;;384    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L4.212|
0000d4  64656c65          DCB      "delete me",0
0000d8  7465206d
0000dc  6500    
0000de  00                DCB      0
0000df  00                DCB      0

                          AREA ||i.lwip_standard_chksum||, CODE, READONLY, ALIGN=1

                  lwip_standard_chksum PROC
;;;134    static u16_t
;;;135    lwip_standard_chksum(void *dataptr, int len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;136    {
000002  4605              MOV      r5,r0
000004  460a              MOV      r2,r1
;;;137      u8_t *pb = (u8_t *)dataptr;
000006  462b              MOV      r3,r5
;;;138      u16_t *ps, t = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;139      u32_t sum = 0;
00000c  2100              MOVS     r1,#0
;;;140      int odd = ((mem_ptr_t)pb & 1);
00000e  f0030601          AND      r6,r3,#1
;;;141    
;;;142      /* Get aligned to u16_t */
;;;143      if (odd && len > 0) {
000012  b136              CBZ      r6,|L5.34|
000014  2a00              CMP      r2,#0
000016  dd04              BLE      |L5.34|
;;;144        ((u8_t *)&t)[1] = *pb++;
000018  f8130b01          LDRB     r0,[r3],#1
00001c  f88d0001          STRB     r0,[sp,#1]
;;;145        len--;
000020  1e52              SUBS     r2,r2,#1
                  |L5.34|
;;;146      }
;;;147    
;;;148      /* Add the bulk of the data */
;;;149      ps = (u16_t *)(void *)pb;
000022  461c              MOV      r4,r3
;;;150      while (len > 1) {
000024  e003              B        |L5.46|
                  |L5.38|
;;;151        sum += *ps++;
000026  f8347b02          LDRH     r7,[r4],#2
00002a  4439              ADD      r1,r1,r7
;;;152        len -= 2;
00002c  1e92              SUBS     r2,r2,#2
                  |L5.46|
00002e  2a01              CMP      r2,#1                 ;150
000030  dcf9              BGT      |L5.38|
;;;153      }
;;;154    
;;;155      /* Consume left-over byte, if any */
;;;156      if (len > 0) {
000032  2a00              CMP      r2,#0
000034  dd02              BLE      |L5.60|
;;;157        ((u8_t *)&t)[0] = *(u8_t *)ps;
000036  7820              LDRB     r0,[r4,#0]
000038  f88d0000          STRB     r0,[sp,#0]
                  |L5.60|
;;;158      }
;;;159    
;;;160      /* Add end bytes */
;;;161      sum += t;
00003c  f8bd0000          LDRH     r0,[sp,#0]
000040  4401              ADD      r1,r1,r0
;;;162    
;;;163      /* Fold 32-bit sum to 16 bits
;;;164         calling this twice is propably faster than if statements... */
;;;165      sum = FOLD_U32T(sum);
000042  b288              UXTH     r0,r1
000044  eb004111          ADD      r1,r0,r1,LSR #16
;;;166      sum = FOLD_U32T(sum);
000048  b288              UXTH     r0,r1
00004a  eb004111          ADD      r1,r0,r1,LSR #16
;;;167    
;;;168      /* Swap if alignment was odd */
;;;169      if (odd) {
00004e  b126              CBZ      r6,|L5.90|
;;;170        sum = SWAP_BYTES_IN_WORD(sum);
000050  b2c8              UXTB     r0,r1
000052  f3c12707          UBFX     r7,r1,#8,#8
000056  ea472100          ORR      r1,r7,r0,LSL #8
                  |L5.90|
;;;171      }
;;;172    
;;;173      return (u16_t)sum;
00005a  b288              UXTH     r0,r1
;;;174    }
00005c  bdf8              POP      {r3-r7,pc}
;;;175    #endif
                          ENDP

