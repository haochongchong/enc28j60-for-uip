; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uip-neighbor.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\uip-neighbor.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\ -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\lwip\src\api -I..\..\lwip\src\arch -I..\..\lwip\src\include -I..\..\lwip\src\netif -I..\..\lwip\src\include\ipv4 -I..\..\Source\inc -I..\..\lwip\src -I..\..\Source\uIP-1.0\uip -I..\..\Source\uIP-APP -I..\..\Source\uIP-1.0\apps\webserver -ID:\ENC28J60\Project\RVMDK\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=518 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\uip-neighbor.crf ..\..\Source\uIP-1.0\uip\uip-neighbor.c]
                          THUMB

                          AREA ||i.find_entry||, CODE, READONLY, ALIGN=2

                  find_entry PROC
;;;119    static struct neighbor_entry *
;;;120    find_entry(uip_ipaddr_t ipaddr)
000000  4602              MOV      r2,r0
;;;121    {
;;;122      int i;
;;;123      
;;;124      for(i = 0; i < ENTRIES; ++i) {
000002  2100              MOVS     r1,#0
000004  e017              B        |L1.54|
                  |L1.6|
;;;125        if(uip_ipaddr_cmp(entries[i].ipaddr, ipaddr)) {
000006  eb010041          ADD      r0,r1,r1,LSL #1
00000a  4b0d              LDR      r3,|L1.64|
00000c  f8330020          LDRH     r0,[r3,r0,LSL #2]
000010  8813              LDRH     r3,[r2,#0]
000012  4298              CMP      r0,r3
000014  d10e              BNE      |L1.52|
000016  eb010041          ADD      r0,r1,r1,LSL #1
00001a  4b09              LDR      r3,|L1.64|
00001c  eb030080          ADD      r0,r3,r0,LSL #2
000020  8840              LDRH     r0,[r0,#2]
000022  8853              LDRH     r3,[r2,#2]
000024  4298              CMP      r0,r3
000026  d105              BNE      |L1.52|
;;;126          return &entries[i];
000028  eb010041          ADD      r0,r1,r1,LSL #1
00002c  4b04              LDR      r3,|L1.64|
00002e  eb030080          ADD      r0,r3,r0,LSL #2
                  |L1.50|
;;;127        }
;;;128      }
;;;129      return NULL;
;;;130    }
000032  4770              BX       lr
                  |L1.52|
000034  1c49              ADDS     r1,r1,#1              ;124
                  |L1.54|
000036  2908              CMP      r1,#8                 ;124
000038  dbe5              BLT      |L1.6|
00003a  2000              MOVS     r0,#0                 ;129
00003c  e7f9              B        |L1.50|
;;;131    /*---------------------------------------------------------------------------*/
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      entries

                          AREA ||i.uip_neighbor_add||, CODE, READONLY, ALIGN=2

                  uip_neighbor_add PROC
;;;84     void
;;;85     uip_neighbor_add(uip_ipaddr_t ipaddr, struct uip_neighbor_addr *addr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;86     {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;87       int i, oldest;
;;;88       u8_t oldest_time;
;;;89     
;;;90     //  printf("Adding neighbor with link address %02x:%02x:%02x:%02x:%02x:%02x\n",
;;;91     //	 addr->addr.addr[0], addr->addr.addr[1], addr->addr.addr[2], addr->addr.addr[3],
;;;92     //	 addr->addr.addr[4], addr->addr.addr[5]);
;;;93       
;;;94       /* Find the first unused entry or the oldest used entry. */
;;;95       oldest_time = 0;
000006  2400              MOVS     r4,#0
;;;96       oldest = 0;
000008  2100              MOVS     r1,#0
;;;97       for(i = 0; i < ENTRIES; ++i) {
00000a  2000              MOVS     r0,#0
00000c  e02b              B        |L2.102|
                  |L2.14|
;;;98         if(entries[i].time == MAX_TIME) {
00000e  eb000540          ADD      r5,r0,r0,LSL #1
000012  4e25              LDR      r6,|L2.168|
000014  eb060585          ADD      r5,r6,r5,LSL #2
000018  7aad              LDRB     r5,[r5,#0xa]
00001a  2d80              CMP      r5,#0x80
00001c  d101              BNE      |L2.34|
;;;99           oldest = i;
00001e  4601              MOV      r1,r0
;;;100          break;
000020  e023              B        |L2.106|
                  |L2.34|
;;;101        }
;;;102        if(uip_ipaddr_cmp(entries[i].ipaddr, addr)) {
000022  eb000540          ADD      r5,r0,r0,LSL #1
000026  4e20              LDR      r6,|L2.168|
000028  f8365025          LDRH     r5,[r6,r5,LSL #2]
00002c  8816              LDRH     r6,[r2,#0]
00002e  42b5              CMP      r5,r6
000030  d10a              BNE      |L2.72|
000032  eb000540          ADD      r5,r0,r0,LSL #1
000036  4e1c              LDR      r6,|L2.168|
000038  eb060585          ADD      r5,r6,r5,LSL #2
00003c  886d              LDRH     r5,[r5,#2]
00003e  8856              LDRH     r6,[r2,#2]
000040  42b5              CMP      r5,r6
000042  d101              BNE      |L2.72|
;;;103          oldest = i;
000044  4601              MOV      r1,r0
;;;104          break;
000046  e010              B        |L2.106|
                  |L2.72|
;;;105        }
;;;106        if(entries[i].time > oldest_time) {
000048  eb000540          ADD      r5,r0,r0,LSL #1
00004c  4e16              LDR      r6,|L2.168|
00004e  eb060585          ADD      r5,r6,r5,LSL #2
000052  7aad              LDRB     r5,[r5,#0xa]
000054  42a5              CMP      r5,r4
000056  dd05              BLE      |L2.100|
;;;107          oldest = i;
000058  4601              MOV      r1,r0
;;;108          oldest_time = entries[i].time;
00005a  eb000540          ADD      r5,r0,r0,LSL #1
00005e  eb060585          ADD      r5,r6,r5,LSL #2
000062  7aac              LDRB     r4,[r5,#0xa]
                  |L2.100|
000064  1c40              ADDS     r0,r0,#1              ;97
                  |L2.102|
000066  2808              CMP      r0,#8                 ;97
000068  dbd1              BLT      |L2.14|
                  |L2.106|
00006a  bf00              NOP                            ;100
;;;109        }
;;;110      }
;;;111    
;;;112      /* Use the oldest or first free entry (either pointed to by the
;;;113         "oldest" variable). */
;;;114      entries[oldest].time = 0;
00006c  2500              MOVS     r5,#0
00006e  eb010641          ADD      r6,r1,r1,LSL #1
000072  4f0d              LDR      r7,|L2.168|
000074  eb070686          ADD      r6,r7,r6,LSL #2
000078  72b5              STRB     r5,[r6,#0xa]
;;;115      uip_ipaddr_copy(entries[oldest].ipaddr, ipaddr);
00007a  bf00              NOP      
00007c  881d              LDRH     r5,[r3,#0]
00007e  eb010641          ADD      r6,r1,r1,LSL #1
000082  f8275026          STRH     r5,[r7,r6,LSL #2]
000086  885d              LDRH     r5,[r3,#2]
000088  eb010641          ADD      r6,r1,r1,LSL #1
00008c  eb070686          ADD      r6,r7,r6,LSL #2
000090  8075              STRH     r5,[r6,#2]
000092  bf00              NOP      
;;;116      memcpy(&entries[oldest].addr, addr, sizeof(struct uip_neighbor_addr));
000094  eb010541          ADD      r5,r1,r1,LSL #1
000098  463e              MOV      r6,r7
00009a  eb060585          ADD      r5,r6,r5,LSL #2
00009e  6816              LDR      r6,[r2,#0]
0000a0  606e              STR      r6,[r5,#4]
0000a2  8896              LDRH     r6,[r2,#4]
0000a4  812e              STRH     r6,[r5,#8]
;;;117    }
0000a6  bdf0              POP      {r4-r7,pc}
;;;118    /*---------------------------------------------------------------------------*/
                          ENDP

                  |L2.168|
                          DCD      entries

                          AREA ||i.uip_neighbor_init||, CODE, READONLY, ALIGN=2

                  uip_neighbor_init PROC
;;;62     void
;;;63     uip_neighbor_init(void)
000000  2000              MOVS     r0,#0
;;;64     {
;;;65       int i;
;;;66     
;;;67       for(i = 0; i < ENTRIES; ++i) {
000002  e007              B        |L3.20|
                  |L3.4|
;;;68         entries[i].time = MAX_TIME;
000004  2180              MOVS     r1,#0x80
000006  eb000240          ADD      r2,r0,r0,LSL #1
00000a  4b04              LDR      r3,|L3.28|
00000c  eb030282          ADD      r2,r3,r2,LSL #2
000010  7291              STRB     r1,[r2,#0xa]
000012  1c40              ADDS     r0,r0,#1              ;67
                  |L3.20|
000014  2808              CMP      r0,#8                 ;67
000016  dbf5              BLT      |L3.4|
;;;69       }
;;;70     }
000018  4770              BX       lr
;;;71     /*---------------------------------------------------------------------------*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      entries

                          AREA ||i.uip_neighbor_lookup||, CODE, READONLY, ALIGN=1

                  uip_neighbor_lookup PROC
;;;143    struct uip_neighbor_addr *
;;;144    uip_neighbor_lookup(uip_ipaddr_t ipaddr)
000000  b570              PUSH     {r4-r6,lr}
;;;145    {
000002  4605              MOV      r5,r0
;;;146      struct neighbor_entry *e;
;;;147    
;;;148      e = find_entry(ipaddr);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       find_entry
00000a  4604              MOV      r4,r0
;;;149      if(e != NULL) {
00000c  b10c              CBZ      r4,|L4.18|
;;;150        /*    printf("Lookup neighbor with link address %02x:%02x:%02x:%02x:%02x:%02x\n",
;;;151    	   e->addr.addr.addr[0], e->addr.addr.addr[1], e->addr.addr.addr[2], e->addr.addr.addr[3],
;;;152    	   e->addr.addr.addr[4], e->addr.addr.addr[5]);*/
;;;153    
;;;154        return &e->addr;
00000e  1d20              ADDS     r0,r4,#4
                  |L4.16|
;;;155      }
;;;156      return NULL;
;;;157    }
000010  bd70              POP      {r4-r6,pc}
                  |L4.18|
000012  2000              MOVS     r0,#0                 ;156
000014  e7fc              B        |L4.16|
;;;158    /*---------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.uip_neighbor_periodic||, CODE, READONLY, ALIGN=2

                  uip_neighbor_periodic PROC
;;;72     void
;;;73     uip_neighbor_periodic(void)
000000  2000              MOVS     r0,#0
;;;74     {
;;;75       int i;
;;;76     
;;;77       for(i = 0; i < ENTRIES; ++i) {
000002  e014              B        |L5.46|
                  |L5.4|
;;;78         if(entries[i].time < MAX_TIME) {
000004  eb000140          ADD      r1,r0,r0,LSL #1
000008  4a0a              LDR      r2,|L5.52|
00000a  eb020181          ADD      r1,r2,r1,LSL #2
00000e  7a89              LDRB     r1,[r1,#0xa]
000010  2980              CMP      r1,#0x80
000012  da0b              BGE      |L5.44|
;;;79           entries[i].time++;
000014  eb000140          ADD      r1,r0,r0,LSL #1
000018  eb020181          ADD      r1,r2,r1,LSL #2
00001c  7a89              LDRB     r1,[r1,#0xa]
00001e  1c49              ADDS     r1,r1,#1
000020  eb000240          ADD      r2,r0,r0,LSL #1
000024  4b03              LDR      r3,|L5.52|
000026  eb030282          ADD      r2,r3,r2,LSL #2
00002a  7291              STRB     r1,[r2,#0xa]
                  |L5.44|
00002c  1c40              ADDS     r0,r0,#1              ;77
                  |L5.46|
00002e  2808              CMP      r0,#8                 ;77
000030  dbe8              BLT      |L5.4|
;;;80         }
;;;81       }
;;;82     }
000032  4770              BX       lr
;;;83     /*---------------------------------------------------------------------------*/
                          ENDP

                  |L5.52|
                          DCD      entries

                          AREA ||i.uip_neighbor_update||, CODE, READONLY, ALIGN=1

                  uip_neighbor_update PROC
;;;132    void
;;;133    uip_neighbor_update(uip_ipaddr_t ipaddr)
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
000002  4605              MOV      r5,r0
;;;135      struct neighbor_entry *e;
;;;136    
;;;137      e = find_entry(ipaddr);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       find_entry
00000a  4604              MOV      r4,r0
;;;138      if(e != NULL) {
00000c  b10c              CBZ      r4,|L6.18|
;;;139        e->time = 0;
00000e  2000              MOVS     r0,#0
000010  72a0              STRB     r0,[r4,#0xa]
                  |L6.18|
;;;140      }
;;;141    }
000012  bd70              POP      {r4-r6,pc}
;;;142    /*---------------------------------------------------------------------------*/
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  entries
                          %        96
